
/tmp/arduino_build_696336/Azangoo.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 a2 00 	jmp	0x144	; 0x144 <__ctors_end>
       4:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       8:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
       c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      10:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      14:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      18:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      1c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      20:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      24:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      28:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      2c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      30:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      34:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      38:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      3c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      40:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__vector_16>
      44:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      48:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__vector_18>
      4c:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <__vector_19>
      50:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      54:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      58:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      5c:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>
      60:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__vector_24>
      64:	0c 94 ca 00 	jmp	0x194	; 0x194 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	30 00       	.word	0x0030	; ????

0000006a <set_clock()::__c>:
      6a:	3a 00                                               :.

0000006c <set_clock()::__c>:
      6c:	30 00                                               0.

0000006e <set_clock()::__c>:
      6e:	3a 00                                               :.

00000070 <set_clock()::__c>:
      70:	30 00                                               0.

00000072 <set_clock()::__c>:
      72:	53 65 74 20 54 69 6d 65 3a 00                       Set Time:.

0000007c <set_clock()::__c>:
      7c:	30 00                                               0.

0000007e <set_clock()::__c>:
      7e:	2f 00                                               /.

00000080 <set_clock()::__c>:
      80:	30 00                                               0.

00000082 <set_clock()::__c>:
      82:	2f 00                                               /.

00000084 <set_clock()::__c>:
      84:	53 65 74 20 44 61 74 65 3a 00                       Set Date:.

0000008e <port_to_mode_PGM>:
      8e:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000098 <port_to_output_PGM>:
      98:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000a2 <port_to_input_PGM>:
      a2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ac <digital_pin_to_port_PGM>:
      ac:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      bc:	03 03 03 03 02 02 03                                .......

000000c3 <digital_pin_to_bit_mask_PGM>:
      c3:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d3:	04 08 10 20 40 80 40                                ... @.@

000000da <digital_pin_to_timer_PGM>:
      da:	00 00 00 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
      ea:	00 00 00 00 00 00 00                                .......

000000f1 <welcome()::__c>:
      f1:	30 39 33 37 20 39 33 38 20 36 37 35 32 00           0937 938 6752.

000000ff <welcome()::__c>:
      ff:	50 72 61 79 20 54 69 6d 65 72 00                    Pray Timer.

0000010a <play_azan()::__c>:
     10a:	30 39 33 37 20 39 33 38 20 36 37 35 32 00           0937 938 6752.

00000118 <play_azan()::__c>:
     118:	50 6c 61 79 69 6e 67 00                             Playing.

00000120 <display_home()::__c>:
     120:	30 00                                               0.

00000122 <display_home()::__c>:
     122:	3a 00                                               :.

00000124 <display_home()::__c>:
     124:	30 00                                               0.

00000126 <display_home()::__c>:
     126:	3a 00                                               :.

00000128 <display_home()::__c>:
     128:	30 00                                               0.

0000012a <display_home()::__c>:
     12a:	54 69 6d 65 3a 20 20 00                             Time:  .

00000132 <display_home()::__c>:
     132:	30 00                                               0.

00000134 <display_home()::__c>:
     134:	2f 00                                               /.

00000136 <display_home()::__c>:
     136:	30 00                                               0.

00000138 <display_home()::__c>:
     138:	2f 00                                               /.

0000013a <display_home()::__c>:
     13a:	44 61 74 65 3a 20 00 00                             Date: ..

00000142 <__ctors_start>:
__ctors_start():
     142:	b3 18       	sub	r11, r3

00000144 <__ctors_end>:
__dtors_end():
     144:	11 24       	eor	r1, r1
     146:	1f be       	out	0x3f, r1	; 63
     148:	cf ef       	ldi	r28, 0xFF	; 255
     14a:	d4 e0       	ldi	r29, 0x04	; 4
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61

00000150 <__do_copy_data>:
__do_copy_data():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     150:	11 e0       	ldi	r17, 0x01	; 1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     152:	a0 e0       	ldi	r26, 0x00	; 0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     154:	b1 e0       	ldi	r27, 0x01	; 1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     156:	ea e6       	ldi	r30, 0x6A	; 106
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     158:	fb e3       	ldi	r31, 0x3B	; 59
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     15a:	02 c0       	rjmp	.+4      	; 0x160 <__do_copy_data+0x10>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     15c:	05 90       	lpm	r0, Z+
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     15e:	0d 92       	st	X+, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     160:	a8 3a       	cpi	r26, 0xA8	; 168
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     162:	b1 07       	cpc	r27, r17
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     164:	d9 f7       	brne	.-10     	; 0x15c <__do_copy_data+0xc>

00000166 <__do_clear_bss>:
__do_clear_bss():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     166:	23 e0       	ldi	r18, 0x03	; 3
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     168:	a8 ea       	ldi	r26, 0xA8	; 168
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     16a:	b1 e0       	ldi	r27, 0x01	; 1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     16c:	01 c0       	rjmp	.+2      	; 0x170 <.do_clear_bss_start>

0000016e <.do_clear_bss_loop>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     16e:	1d 92       	st	X+, r1

00000170 <.do_clear_bss_start>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     170:	ad 3c       	cpi	r26, 0xCD	; 205
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     172:	b2 07       	cpc	r27, r18
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     174:	e1 f7       	brne	.-8      	; 0x16e <.do_clear_bss_loop>

00000176 <__do_global_ctors>:
__do_global_ctors():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     176:	10 e0       	ldi	r17, 0x00	; 0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     178:	c2 ea       	ldi	r28, 0xA2	; 162
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     17a:	d0 e0       	ldi	r29, 0x00	; 0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     17c:	04 c0       	rjmp	.+8      	; 0x186 <__do_global_ctors+0x10>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     17e:	21 97       	sbiw	r28, 0x01	; 1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     180:	fe 01       	movw	r30, r28
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     182:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <__tablejump2__>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     186:	c1 3a       	cpi	r28, 0xA1	; 161
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     188:	d1 07       	cpc	r29, r17
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     18a:	c9 f7       	brne	.-14     	; 0x17e <__do_global_ctors+0x8>
     18c:	0e 94 c5 19 	call	0x338a	; 0x338a <main>
     190:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <_exit>

00000194 <__bad_interrupt>:
__vector_22():
     194:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000198 <TwoWire::read()>:
read():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     198:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
     19c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     1a0:	2f ef       	ldi	r18, 0xFF	; 255
     1a2:	3f ef       	ldi	r19, 0xFF	; 255
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     1a4:	98 17       	cp	r25, r24
     1a6:	48 f4       	brcc	.+18     	; 0x1ba <TwoWire::read()+0x22>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
     1a8:	e9 2f       	mov	r30, r25
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	e4 5a       	subi	r30, 0xA4	; 164
     1ae:	fd 4f       	sbci	r31, 0xFD	; 253
     1b0:	20 81       	ld	r18, Z
     1b2:	30 e0       	ldi	r19, 0x00	; 0
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:303
    ++rxBufferIndex;
     1b4:	9f 5f       	subi	r25, 0xFF	; 255
     1b6:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <TwoWire::rxBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:307
  }

  return value;
}
     1ba:	c9 01       	movw	r24, r18
     1bc:	08 95       	ret

000001be <TwoWire::read() [clone .constprop.64]>:
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:301
int TwoWire::read(void)
{
  int value = -1;

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     1be:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
     1c2:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:298
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  int value = -1;
     1c6:	2f ef       	ldi	r18, 0xFF	; 255
     1c8:	3f ef       	ldi	r19, 0xFF	; 255
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:301

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
     1ca:	98 17       	cp	r25, r24
     1cc:	48 f4       	brcc	.+18     	; 0x1e0 <TwoWire::read() [clone .constprop.64]+0x22>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:302
    value = rxBuffer[rxBufferIndex];
     1ce:	e9 2f       	mov	r30, r25
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	e4 5a       	subi	r30, 0xA4	; 164
     1d4:	fd 4f       	sbci	r31, 0xFD	; 253
     1d6:	20 81       	ld	r18, Z
     1d8:	30 e0       	ldi	r19, 0x00	; 0
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:303
    ++rxBufferIndex;
     1da:	9f 5f       	subi	r25, 0xFF	; 255
     1dc:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <TwoWire::rxBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:307
  }

  return value;
}
     1e0:	c9 01       	movw	r24, r18
     1e2:	08 95       	ret

000001e4 <TwoWire::endTransmission() [clone .constprop.55]>:
endTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:225
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
  // transmit buffer (blocking)
  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);
     1e4:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <TwoWire::txBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:269
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
    return 1;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
twi_writeTo():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:268
 *          5 .. timeout
 */
uint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)
{
  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < length){
     1ea:	91 32       	cpi	r25, 0x21	; 33
     1ec:	08 f0       	brcs	.+2      	; 0x1f0 <TwoWire::endTransmission() [clone .constprop.55]+0xc>
     1ee:	43 c0       	rjmp	.+134    	; 0x276 <TwoWire::endTransmission() [clone .constprop.55]+0x92>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:282
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(TWI_READY != twi_state){
     1f0:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi_state>
     1f4:	81 11       	cpse	r24, r1
     1f6:	fc cf       	rjmp	.-8      	; 0x1f0 <TwoWire::endTransmission() [clone .constprop.55]+0xc>
endTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:225
     1f8:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <TwoWire::txAddress>
twi_writeTo():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:287
      continue;
    }
  #endif

  twi_state = TWI_MTX;
     1fc:	22 e0       	ldi	r18, 0x02	; 2
     1fe:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <twi_state>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:288
  twi_sendStop = sendStop;
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <twi_sendStop>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:290
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
     208:	2f ef       	ldi	r18, 0xFF	; 255
     20a:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <twi_error>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:293

  // initialize buffer iteration vars
  twi_masterBuffer = data;
     20e:	21 e3       	ldi	r18, 0x31	; 49
     210:	32 e0       	ldi	r19, 0x02	; 2
     212:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <twi_masterBuffer+0x1>
     216:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <twi_masterBuffer>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:294
  twi_masterBufferIndex = 0;
     21a:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <twi_masterBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:295
  twi_masterBufferLength = length;
     21e:	90 93 55 02 	sts	0x0255, r25	; 0x800255 <twi_masterBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:298

  // build sla+w, slave device address + w bit
  twi_slarw = TW_WRITE;
     222:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <twi_slarw>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:299
  twi_slarw |= address << 1;
     226:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <twi_slarw>
     22a:	88 0f       	add	r24, r24
     22c:	89 2b       	or	r24, r25
     22e:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <twi_slarw>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:304

  // if we're in a repeated start, then we've already sent the START
  // in the ISR. Don't do it again.
  //
  if (true == twi_inRepStart) {
     232:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <twi_inRepStart>
     236:	81 30       	cpi	r24, 0x01	; 1
     238:	29 f5       	brne	.+74     	; 0x284 <TwoWire::endTransmission() [clone .constprop.55]+0xa0>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:311
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the 
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
     23a:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_inRepStart>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:322
          return (5);
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
     23e:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <twi_slarw>
     242:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:323
      } while(TWCR & _BV(TWWC));
     246:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     24a:	83 fd       	sbrc	r24, 3
     24c:	f8 cf       	rjmp	.-16     	; 0x23e <TwoWire::endTransmission() [clone .constprop.55]+0x5a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:325
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
     24e:	85 ec       	ldi	r24, 0xC5	; 197
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:329
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:341
        twi_handleTimeout(twi_do_reset_on_timeout);
        return (5);
      }
    }
  #else
    while(wait && (TWI_MTX == twi_state)){
     254:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi_state>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	e1 f3       	breq	.-8      	; 0x254 <TwoWire::endTransmission() [clone .constprop.55]+0x70>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:346
      continue;
    }
  #endif

  if (twi_error == 0xFF)
     25c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <twi_error>
     260:	8f 3f       	cpi	r24, 0xFF	; 255
     262:	91 f0       	breq	.+36     	; 0x288 <TwoWire::endTransmission() [clone .constprop.55]+0xa4>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:348
    return 0; // success
  else if (twi_error == TW_MT_SLA_NACK)
     264:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <twi_error>
     268:	80 32       	cpi	r24, 0x20	; 32
     26a:	81 f0       	breq	.+32     	; 0x28c <TwoWire::endTransmission() [clone .constprop.55]+0xa8>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:350
    return 2; // error: address send, nack received
  else if (twi_error == TW_MT_DATA_NACK)
     26c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <twi_error>
     270:	80 33       	cpi	r24, 0x30	; 48
     272:	71 f0       	breq	.+28     	; 0x290 <TwoWire::endTransmission() [clone .constprop.55]+0xac>
endTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:353
    return 3; // error: data send, nack received
  else
    return 4; // other twi error
     274:	84 e0       	ldi	r24, 0x04	; 4
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:227
  // reset tx buffer iterator vars
  txBufferIndex = 0;
     276:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:228
  txBufferLength = 0;
     27a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <TwoWire::txBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:230
  // indicate that we are done transmitting
  transmitting = 0;
     27e:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <TwoWire::transmitting>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:240
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
}
     282:	08 95       	ret
twi_writeTo():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:329
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA); // enable INTs
     284:	85 ee       	ldi	r24, 0xE5	; 229
     286:	e4 cf       	rjmp	.-56     	; 0x250 <TwoWire::endTransmission() [clone .constprop.55]+0x6c>
endTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:347
      continue;
    }
  #endif

  if (twi_error == 0xFF)
    return 0; // success
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	f5 cf       	rjmp	.-22     	; 0x276 <TwoWire::endTransmission() [clone .constprop.55]+0x92>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:349
  else if (twi_error == TW_MT_SLA_NACK)
    return 2; // error: address send, nack received
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	f3 cf       	rjmp	.-26     	; 0x276 <TwoWire::endTransmission() [clone .constprop.55]+0x92>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:351
  else if (twi_error == TW_MT_DATA_NACK)
    return 3; // error: data send, nack received
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	f1 cf       	rjmp	.-30     	; 0x276 <TwoWire::endTransmission() [clone .constprop.55]+0x92>

00000294 <Keypad::transitionTo(unsigned char, KeyState) [clone .constprop.28]>:
transitionTo():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:248
void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
}

void Keypad::transitionTo(byte idx, KeyState nextState) {
	key[idx].kstate = nextState;
     294:	96 e0       	ldi	r25, 0x06	; 6
     296:	89 9f       	mul	r24, r25
     298:	d0 01       	movw	r26, r0
     29a:	11 24       	eor	r1, r1
     29c:	a9 5d       	subi	r26, 0xD9	; 217
     29e:	bc 4f       	sbci	r27, 0xFC	; 252
     2a0:	90 96       	adiw	r26, 0x20	; 32
     2a2:	7c 93       	st	X, r23
     2a4:	6e 93       	st	-X, r22
     2a6:	5f 97       	sbiw	r26, 0x1f	; 31
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:249
	key[idx].stateChanged = true;
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	91 96       	adiw	r26, 0x21	; 33
     2ac:	9c 93       	st	X, r25
     2ae:	91 97       	sbiw	r26, 0x21	; 33
     2b0:	e0 91 94 03 	lds	r30, 0x0394	; 0x800394 <keypad+0x6d>
     2b4:	f0 91 95 03 	lds	r31, 0x0395	; 0x800395 <keypad+0x6e>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:253

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
     2b8:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <keypad+0x6c>
     2bc:	99 23       	and	r25, r25
     2be:	39 f0       	breq	.+14     	; 0x2ce <Keypad::transitionTo(unsigned char, KeyState) [clone .constprop.28]+0x3a>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:254
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
     2c0:	30 97       	sbiw	r30, 0x00	; 0
     2c2:	51 f0       	breq	.+20     	; 0x2d8 <Keypad::transitionTo(unsigned char, KeyState) [clone .constprop.28]+0x44>
     2c4:	81 11       	cpse	r24, r1
     2c6:	08 c0       	rjmp	.+16     	; 0x2d8 <Keypad::transitionTo(unsigned char, KeyState) [clone .constprop.28]+0x44>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:255
			keypadEventListener(key[0].kchar);
     2c8:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <keypad+0x1c>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:262
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
			keypadEventListener(key[idx].kchar);
     2cc:	09 94       	ijmp
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:261
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
     2ce:	30 97       	sbiw	r30, 0x00	; 0
     2d0:	19 f0       	breq	.+6      	; 0x2d8 <Keypad::transitionTo(unsigned char, KeyState) [clone .constprop.28]+0x44>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:262
			keypadEventListener(key[idx].kchar);
     2d2:	5c 96       	adiw	r26, 0x1c	; 28
     2d4:	8c 91       	ld	r24, X
     2d6:	fa cf       	rjmp	.-12     	; 0x2cc <Keypad::transitionTo(unsigned char, KeyState) [clone .constprop.28]+0x38>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:265
		}
	}
}
     2d8:	08 95       	ret

000002da <TwoWire::available()>:
available():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
     2da:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
     2de:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:291
}
     2e2:	89 1b       	sub	r24, r25
     2e4:	99 0b       	sbc	r25, r25
     2e6:	08 95       	ret

000002e8 <TwoWire::onRequestService()>:
onRequestService():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:366
  // !!! this will kill any pending pre-master sendTo() activity
  txBufferIndex = 0;
  txBufferLength = 0;
  // alert user program
  user_onRequest();
}
     2e8:	08 95       	ret

000002ea <TwoWire::onReceiveService(unsigned char*, int)>:
onReceiveService():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:351
  // set rx iterator vars
  rxBufferIndex = 0;
  rxBufferLength = numBytes;
  // alert user program
  user_onReceive(numBytes);
}
     2ea:	08 95       	ret

000002ec <Print::write(unsigned char const*, unsigned int)>:
write():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     2ec:	af 92       	push	r10
     2ee:	bf 92       	push	r11
     2f0:	cf 92       	push	r12
     2f2:	df 92       	push	r13
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	6c 01       	movw	r12, r24
     302:	7b 01       	movw	r14, r22
     304:	8b 01       	movw	r16, r22
     306:	04 0f       	add	r16, r20
     308:	15 1f       	adc	r17, r21
     30a:	eb 01       	movw	r28, r22
     30c:	5e 01       	movw	r10, r28
     30e:	ae 18       	sub	r10, r14
     310:	bf 08       	sbc	r11, r15
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
     312:	c0 17       	cp	r28, r16
     314:	d1 07       	cpc	r29, r17
     316:	59 f0       	breq	.+22     	; 0x32e <Print::write(unsigned char const*, unsigned int)+0x42>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
     318:	69 91       	ld	r22, Y+
     31a:	d6 01       	movw	r26, r12
     31c:	ed 91       	ld	r30, X+
     31e:	fc 91       	ld	r31, X
     320:	01 90       	ld	r0, Z+
     322:	f0 81       	ld	r31, Z
     324:	e0 2d       	mov	r30, r0
     326:	c6 01       	movw	r24, r12
     328:	09 95       	icall
     32a:	89 2b       	or	r24, r25
     32c:	79 f7       	brne	.-34     	; 0x30c <Print::write(unsigned char const*, unsigned int)+0x20>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
     32e:	c5 01       	movw	r24, r10
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	ff 90       	pop	r15
     33a:	ef 90       	pop	r14
     33c:	df 90       	pop	r13
     33e:	cf 90       	pop	r12
     340:	bf 90       	pop	r11
     342:	af 90       	pop	r10
     344:	08 95       	ret

00000346 <HardwareSerial::availableForWrite()>:
availableForWrite():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     346:	fc 01       	movw	r30, r24
     348:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
     34a:	44 8d       	ldd	r20, Z+28	; 0x1c
     34c:	25 2f       	mov	r18, r21
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	84 2f       	mov	r24, r20
     352:	90 e0       	ldi	r25, 0x00	; 0
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	54 17       	cp	r21, r20
     35a:	10 f0       	brcs	.+4      	; 0x360 <HardwareSerial::availableForWrite()+0x1a>
     35c:	cf 96       	adiw	r24, 0x3f	; 63
     35e:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
     360:	01 97       	sbiw	r24, 0x01	; 1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
     362:	08 95       	ret

00000364 <HardwareSerial::read()>:
read():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     364:	fc 01       	movw	r30, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     366:	91 8d       	ldd	r25, Z+25	; 0x19
     368:	82 8d       	ldd	r24, Z+26	; 0x1a
     36a:	98 17       	cp	r25, r24
     36c:	61 f0       	breq	.+24     	; 0x386 <HardwareSerial::read()+0x22>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     36e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     370:	ae 0f       	add	r26, r30
     372:	bf 2f       	mov	r27, r31
     374:	b1 1d       	adc	r27, r1
     376:	5d 96       	adiw	r26, 0x1d	; 29
     378:	8c 91       	ld	r24, X
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     37a:	92 8d       	ldd	r25, Z+26	; 0x1a
     37c:	9f 5f       	subi	r25, 0xFF	; 255
     37e:	9f 73       	andi	r25, 0x3F	; 63
     380:	92 8f       	std	Z+26, r25	; 0x1a
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	9f ef       	ldi	r25, 0xFF	; 255
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     38a:	08 95       	ret

0000038c <HardwareSerial::peek()>:
peek():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     38c:	fc 01       	movw	r30, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
     38e:	91 8d       	ldd	r25, Z+25	; 0x19
     390:	82 8d       	ldd	r24, Z+26	; 0x1a
     392:	98 17       	cp	r25, r24
     394:	31 f0       	breq	.+12     	; 0x3a2 <HardwareSerial::peek()+0x16>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     396:	82 8d       	ldd	r24, Z+26	; 0x1a
     398:	e8 0f       	add	r30, r24
     39a:	f1 1d       	adc	r31, r1
     39c:	85 8d       	ldd	r24, Z+29	; 0x1d
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
     3a4:	9f ef       	ldi	r25, 0xFF	; 255
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     3a6:	08 95       	ret

000003a8 <HardwareSerial::available()>:
available():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     3a8:	fc 01       	movw	r30, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     3aa:	91 8d       	ldd	r25, Z+25	; 0x19
     3ac:	22 8d       	ldd	r18, Z+26	; 0x1a
     3ae:	89 2f       	mov	r24, r25
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	80 5c       	subi	r24, 0xC0	; 192
     3b4:	9f 4f       	sbci	r25, 0xFF	; 255
     3b6:	82 1b       	sub	r24, r18
     3b8:	91 09       	sbc	r25, r1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
     3ba:	8f 73       	andi	r24, 0x3F	; 63
     3bc:	99 27       	eor	r25, r25
     3be:	08 95       	ret

000003c0 <Serial0_available()>:
Serial0_available():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     3c0:	8e e7       	ldi	r24, 0x7E	; 126
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <HardwareSerial::available()>
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	89 2b       	or	r24, r25
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <Serial0_available()+0x10>
     3ce:	20 e0       	ldi	r18, 0x00	; 0
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
     3d0:	82 2f       	mov	r24, r18
     3d2:	08 95       	ret

000003d4 <serialEventRun()>:
serialEventRun():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	89 2b       	or	r24, r25
     3da:	29 f0       	breq	.+10     	; 0x3e6 <serialEventRun()+0x12>
     3dc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Serial0_available()>
     3e0:	81 11       	cpse	r24, r1
     3e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
     3e6:	08 95       	ret

000003e8 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     3e8:	fc 01       	movw	r30, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     3ea:	a4 8d       	ldd	r26, Z+28	; 0x1c
     3ec:	a8 0f       	add	r26, r24
     3ee:	b9 2f       	mov	r27, r25
     3f0:	b1 1d       	adc	r27, r1
     3f2:	a3 5a       	subi	r26, 0xA3	; 163
     3f4:	bf 4f       	sbci	r27, 0xFF	; 255
     3f6:	2c 91       	ld	r18, X
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     3f8:	84 8d       	ldd	r24, Z+28	; 0x1c
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	8f 73       	andi	r24, 0x3F	; 63
     400:	99 27       	eor	r25, r25
     402:	84 8f       	std	Z+28, r24	; 0x1c
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
     404:	a6 89       	ldd	r26, Z+22	; 0x16
     406:	b7 89       	ldd	r27, Z+23	; 0x17
     408:	2c 93       	st	X, r18
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     40a:	a0 89       	ldd	r26, Z+16	; 0x10
     40c:	b1 89       	ldd	r27, Z+17	; 0x11
     40e:	8c 91       	ld	r24, X
     410:	83 70       	andi	r24, 0x03	; 3
     412:	80 64       	ori	r24, 0x40	; 64
     414:	8c 93       	st	X, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     416:	93 8d       	ldd	r25, Z+27	; 0x1b
     418:	84 8d       	ldd	r24, Z+28	; 0x1c
     41a:	98 13       	cpse	r25, r24
     41c:	06 c0       	rjmp	.+12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
     41e:	02 88       	ldd	r0, Z+18	; 0x12
     420:	f3 89       	ldd	r31, Z+19	; 0x13
     422:	e0 2d       	mov	r30, r0
     424:	80 81       	ld	r24, Z
     426:	8f 7d       	andi	r24, 0xDF	; 223
     428:	80 83       	st	Z, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
     42a:	08 95       	ret

0000042c <HardwareSerial::write(unsigned char)>:
write():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ec 01       	movw	r28, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	88 8f       	std	Y+24, r24	; 0x18
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     43e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     440:	8c 8d       	ldd	r24, Y+28	; 0x1c
     442:	98 13       	cpse	r25, r24
     444:	1a c0       	rjmp	.+52     	; 0x47a <HardwareSerial::write(unsigned char)+0x4e>
     446:	e8 89       	ldd	r30, Y+16	; 0x10
     448:	f9 89       	ldd	r31, Y+17	; 0x11
     44a:	80 81       	ld	r24, Z
     44c:	85 ff       	sbrs	r24, 5
     44e:	15 c0       	rjmp	.+42     	; 0x47a <HardwareSerial::write(unsigned char)+0x4e>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     450:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/whisper/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     452:	f8 94       	cli
write():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
     454:	ee 89       	ldd	r30, Y+22	; 0x16
     456:	ff 89       	ldd	r31, Y+23	; 0x17
     458:	60 83       	st	Z, r22
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     45a:	e8 89       	ldd	r30, Y+16	; 0x10
     45c:	f9 89       	ldd	r31, Y+17	; 0x11
     45e:	80 81       	ld	r24, Z
     460:	83 70       	andi	r24, 0x03	; 3
     462:	80 64       	ori	r24, 0x40	; 64
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
     464:	80 83       	st	Z, r24
__iRestore():
/home/whisper/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     466:	9f bf       	out	0x3f, r25	; 63
write():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	08 95       	ret
     47a:	f6 2e       	mov	r15, r22
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     47c:	0b 8d       	ldd	r16, Y+27	; 0x1b
     47e:	10 e0       	ldi	r17, 0x00	; 0
     480:	0f 5f       	subi	r16, 0xFF	; 255
     482:	1f 4f       	sbci	r17, 0xFF	; 255
     484:	0f 73       	andi	r16, 0x3F	; 63
     486:	11 27       	eor	r17, r17
     488:	e0 2e       	mov	r14, r16
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     48a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     48c:	8e 11       	cpse	r24, r14
     48e:	0c c0       	rjmp	.+24     	; 0x4a8 <HardwareSerial::write(unsigned char)+0x7c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	07 fc       	sbrc	r0, 7
     494:	fa cf       	rjmp	.-12     	; 0x48a <HardwareSerial::write(unsigned char)+0x5e>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     496:	e8 89       	ldd	r30, Y+16	; 0x10
     498:	f9 89       	ldd	r31, Y+17	; 0x11
     49a:	80 81       	ld	r24, Z
     49c:	85 ff       	sbrs	r24, 5
     49e:	f5 cf       	rjmp	.-22     	; 0x48a <HardwareSerial::write(unsigned char)+0x5e>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
     4a0:	ce 01       	movw	r24, r28
     4a2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <HardwareSerial::_tx_udr_empty_irq()>
     4a6:	f1 cf       	rjmp	.-30     	; 0x48a <HardwareSerial::write(unsigned char)+0x5e>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     4a8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     4aa:	ec 0f       	add	r30, r28
     4ac:	fd 2f       	mov	r31, r29
     4ae:	f1 1d       	adc	r31, r1
     4b0:	e3 5a       	subi	r30, 0xA3	; 163
     4b2:	ff 4f       	sbci	r31, 0xFF	; 255
     4b4:	f0 82       	st	Z, r15
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     4b6:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/whisper/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4b8:	f8 94       	cli
write():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
     4ba:	0b 8f       	std	Y+27, r16	; 0x1b
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
     4bc:	ea 89       	ldd	r30, Y+18	; 0x12
     4be:	fb 89       	ldd	r31, Y+19	; 0x13
     4c0:	80 81       	ld	r24, Z
     4c2:	80 62       	ori	r24, 0x20	; 32
     4c4:	cf cf       	rjmp	.-98     	; 0x464 <HardwareSerial::write(unsigned char)+0x38>

000004c6 <HardwareSerial::flush()>:
flush():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	ec 01       	movw	r28, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     4cc:	88 8d       	ldd	r24, Y+24	; 0x18
     4ce:	88 23       	and	r24, r24
     4d0:	b9 f0       	breq	.+46     	; 0x500 <__stack+0x1>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     4d2:	aa 89       	ldd	r26, Y+18	; 0x12
     4d4:	bb 89       	ldd	r27, Y+19	; 0x13
     4d6:	e8 89       	ldd	r30, Y+16	; 0x10
     4d8:	f9 89       	ldd	r31, Y+17	; 0x11
     4da:	8c 91       	ld	r24, X
     4dc:	85 fd       	sbrc	r24, 5
     4de:	03 c0       	rjmp	.+6      	; 0x4e6 <HardwareSerial::flush()+0x20>
     4e0:	80 81       	ld	r24, Z
     4e2:	86 fd       	sbrc	r24, 6
     4e4:	0d c0       	rjmp	.+26     	; 0x500 <__stack+0x1>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	07 fc       	sbrc	r0, 7
     4ea:	f7 cf       	rjmp	.-18     	; 0x4da <HardwareSerial::flush()+0x14>
     4ec:	8c 91       	ld	r24, X
     4ee:	85 ff       	sbrs	r24, 5
     4f0:	f2 cf       	rjmp	.-28     	; 0x4d6 <HardwareSerial::flush()+0x10>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
     4f2:	80 81       	ld	r24, Z
     4f4:	85 ff       	sbrs	r24, 5
     4f6:	ed cf       	rjmp	.-38     	; 0x4d2 <HardwareSerial::flush()+0xc>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <HardwareSerial::_tx_udr_empty_irq()>
     4fe:	e9 cf       	rjmp	.-46     	; 0x4d2 <HardwareSerial::flush()+0xc>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <turnOffPWM>:
turnOffPWM():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
     506:	84 30       	cpi	r24, 0x04	; 4
     508:	81 f0       	breq	.+32     	; 0x52a <turnOffPWM+0x24>
     50a:	28 f4       	brcc	.+10     	; 0x516 <turnOffPWM+0x10>
     50c:	82 30       	cpi	r24, 0x02	; 2
     50e:	e9 f0       	breq	.+58     	; 0x54a <turnOffPWM+0x44>
     510:	83 30       	cpi	r24, 0x03	; 3
     512:	f9 f0       	breq	.+62     	; 0x552 <turnOffPWM+0x4c>
     514:	08 95       	ret
     516:	88 30       	cpi	r24, 0x08	; 8
     518:	71 f0       	breq	.+28     	; 0x536 <turnOffPWM+0x30>
     51a:	89 30       	cpi	r24, 0x09	; 9
     51c:	91 f0       	breq	.+36     	; 0x542 <turnOffPWM+0x3c>
     51e:	85 30       	cpi	r24, 0x05	; 5
     520:	b9 f4       	brne	.+46     	; 0x550 <turnOffPWM+0x4a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     522:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     526:	8f 7d       	andi	r24, 0xDF	; 223
     528:	03 c0       	rjmp	.+6      	; 0x530 <turnOffPWM+0x2a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
     52a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     52e:	8f 77       	andi	r24, 0x7F	; 127
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
     530:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     534:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
     536:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     53a:	8f 77       	andi	r24, 0x7F	; 127
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
     53c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     540:	08 95       	ret
     542:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     546:	8f 7d       	andi	r24, 0xDF	; 223
     548:	f9 cf       	rjmp	.-14     	; 0x53c <turnOffPWM+0x36>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
     54a:	84 b5       	in	r24, 0x24	; 36
     54c:	8f 77       	andi	r24, 0x7F	; 127
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     54e:	84 bd       	out	0x24, r24	; 36
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
     550:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
     552:	84 b5       	in	r24, 0x24	; 36
     554:	8f 7d       	andi	r24, 0xDF	; 223
     556:	fb cf       	rjmp	.-10     	; 0x54e <turnOffPWM+0x48>

00000558 <digitalRead>:
digitalRead():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
     55c:	28 2f       	mov	r18, r24
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	f9 01       	movw	r30, r18
     562:	e6 52       	subi	r30, 0x26	; 38
     564:	ff 4f       	sbci	r31, 0xFF	; 255
     566:	84 91       	lpm	r24, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
     568:	f9 01       	movw	r30, r18
     56a:	ed 53       	subi	r30, 0x3D	; 61
     56c:	ff 4f       	sbci	r31, 0xFF	; 255
     56e:	d4 91       	lpm	r29, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
     570:	f9 01       	movw	r30, r18
     572:	e4 55       	subi	r30, 0x54	; 84
     574:	ff 4f       	sbci	r31, 0xFF	; 255
     576:	c4 91       	lpm	r28, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
     578:	cc 23       	and	r28, r28
     57a:	a1 f0       	breq	.+40     	; 0x5a4 <digitalRead+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     57c:	81 11       	cpse	r24, r1
     57e:	0e 94 83 02 	call	0x506	; 0x506 <turnOffPWM>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
     582:	ec 2f       	mov	r30, r28
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	ee 55       	subi	r30, 0x5E	; 94
     58c:	ff 4f       	sbci	r31, 0xFF	; 255
     58e:	a5 91       	lpm	r26, Z+
     590:	b4 91       	lpm	r27, Z
     592:	ec 91       	ld	r30, X
     594:	ed 23       	and	r30, r29
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	09 f4       	brne	.+2      	; 0x59e <digitalRead+0x46>
     59c:	80 e0       	ldi	r24, 0x00	; 0
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fa cf       	rjmp	.-12     	; 0x59e <digitalRead+0x46>

000005aa <Keypad::pin_read(unsigned char)>:
pin_read():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:82

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
	virtual int  pin_read(byte pinNum) { return digitalRead(pinNum); }
     5aa:	86 2f       	mov	r24, r22
     5ac:	0c 94 ac 02 	jmp	0x558	; 0x558 <digitalRead>

000005b0 <digitalWrite>:
digitalWrite():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
     5b6:	28 2f       	mov	r18, r24
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	f9 01       	movw	r30, r18
     5bc:	e6 52       	subi	r30, 0x26	; 38
     5be:	ff 4f       	sbci	r31, 0xFF	; 255
     5c0:	84 91       	lpm	r24, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
     5c2:	f9 01       	movw	r30, r18
     5c4:	ed 53       	subi	r30, 0x3D	; 61
     5c6:	ff 4f       	sbci	r31, 0xFF	; 255
     5c8:	d4 91       	lpm	r29, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
     5ca:	f9 01       	movw	r30, r18
     5cc:	e4 55       	subi	r30, 0x54	; 84
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
     5d0:	c4 91       	lpm	r28, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
     5d2:	cc 23       	and	r28, r28
     5d4:	a9 f0       	breq	.+42     	; 0x600 <digitalWrite+0x50>
     5d6:	16 2f       	mov	r17, r22
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     5d8:	81 11       	cpse	r24, r1
     5da:	0e 94 83 02 	call	0x506	; 0x506 <turnOffPWM>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
     5de:	ec 2f       	mov	r30, r28
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	e8 56       	subi	r30, 0x68	; 104
     5e8:	ff 4f       	sbci	r31, 0xFF	; 255
     5ea:	a5 91       	lpm	r26, Z+
     5ec:	b4 91       	lpm	r27, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
     5ee:	8f b7       	in	r24, 0x3f	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
     5f0:	f8 94       	cli
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
     5f2:	ec 91       	ld	r30, X
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
     5f4:	11 11       	cpse	r17, r1
     5f6:	08 c0       	rjmp	.+16     	; 0x608 <digitalWrite+0x58>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
     5f8:	d0 95       	com	r29
     5fa:	de 23       	and	r29, r30
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
     5fc:	dc 93       	st	X, r29
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
     5fe:	8f bf       	out	0x3f, r24	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:212
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
     608:	de 2b       	or	r29, r30
     60a:	f8 cf       	rjmp	.-16     	; 0x5fc <digitalWrite+0x4c>

0000060c <Keypad::pin_write(unsigned char, bool)>:
pin_write():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:81
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
     60c:	86 2f       	mov	r24, r22
     60e:	64 2f       	mov	r22, r20
     610:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <digitalWrite>

00000614 <TwoWire::begin() [clone .constprop.4]>:
begin():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:61

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void)
{
  rxBufferIndex = 0;
     614:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <TwoWire::rxBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:62
  rxBufferLength = 0;
     618:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <TwoWire::rxBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:64

  txBufferIndex = 0;
     61c:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:65
  txBufferLength = 0;
     620:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <TwoWire::txBufferLength>
twi_init():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:84
 * Output   none
 */
void twi_init(void)
{
  // initialize state
  twi_state = TWI_READY;
     624:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <twi_state>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:85
  twi_sendStop = true; // default value
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <twi_sendStop>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:86
  twi_inRepStart = false;
     62e:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_inRepStart>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:89

  // activate internal pullups for twi.
  digitalWrite(SDA, 1);
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	82 e1       	ldi	r24, 0x12	; 18
     636:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:90
  digitalWrite(SCL, 1);
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	83 e1       	ldi	r24, 0x13	; 19
     63e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:93

  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     642:	e9 eb       	ldi	r30, 0xB9	; 185
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	8e 7f       	andi	r24, 0xFE	; 254
     64a:	80 83       	st	Z, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:94
  cbi(TWSR, TWPS1);
     64c:	80 81       	ld	r24, Z
     64e:	8d 7f       	andi	r24, 0xFD	; 253
     650:	80 83       	st	Z, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:95
  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;
     652:	88 e4       	ldi	r24, 0x48	; 72
     654:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:103
  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))
  note: TWBR should be 10 or higher for master mode
  It is 72 for a 16mhz Wiring board with 100kHz TWI */

  // enable twi module, acks, and twi interrupt
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);
     658:	85 e4       	ldi	r24, 0x45	; 69
     65a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
twi_attachSlaveTxEvent():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:408
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveTxEvent( void (*function)(void) )
{
  twi_onSlaveTransmit = function;
     65e:	84 e7       	ldi	r24, 0x74	; 116
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <twi_onSlaveTransmit+0x1>
     666:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <twi_onSlaveTransmit>
twi_attachSlaveRxEvent():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:397
 * Input    function: callback function to use
 * Output   none
 */
void twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )
{
  twi_onSlaveReceive = function;
     66a:	85 e7       	ldi	r24, 0x75	; 117
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <twi_onSlaveReceive+0x1>
     672:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_onSlaveReceive>
begin():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:70

  twi_init();
  twi_attachSlaveTxEvent(onRequestService); // default callback must exist
  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist
}
     676:	08 95       	ret

00000678 <pinMode>:
pinMode():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	fc 01       	movw	r30, r24
     680:	ed 53       	subi	r30, 0x3D	; 61
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	24 91       	lpm	r18, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
     686:	84 55       	subi	r24, 0x54	; 84
     688:	9f 4f       	sbci	r25, 0xFF	; 255
     68a:	fc 01       	movw	r30, r24
     68c:	84 91       	lpm	r24, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
     68e:	88 23       	and	r24, r24
     690:	c9 f0       	breq	.+50     	; 0x6c4 <pinMode+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	fc 01       	movw	r30, r24
     69a:	e2 57       	subi	r30, 0x72	; 114
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	a5 91       	lpm	r26, Z+
     6a0:	b4 91       	lpm	r27, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
     6a2:	fc 01       	movw	r30, r24
     6a4:	e8 56       	subi	r30, 0x68	; 104
     6a6:	ff 4f       	sbci	r31, 0xFF	; 255
     6a8:	c5 91       	lpm	r28, Z+
     6aa:	d4 91       	lpm	r29, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
     6ac:	61 11       	cpse	r22, r1
     6ae:	0d c0       	rjmp	.+26     	; 0x6ca <pinMode+0x52>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
     6b0:	9f b7       	in	r25, 0x3f	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
     6b2:	f8 94       	cli
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
     6b4:	8c 91       	ld	r24, X
     6b6:	20 95       	com	r18
     6b8:	82 23       	and	r24, r18
     6ba:	8c 93       	st	X, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
     6bc:	88 81       	ld	r24, Y
     6be:	28 23       	and	r18, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
     6c0:	28 83       	st	Y, r18
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
     6c2:	9f bf       	out	0x3f, r25	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     6ca:	62 30       	cpi	r22, 0x02	; 2
     6cc:	51 f4       	brne	.+20     	; 0x6e2 <pinMode+0x6a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
     6ce:	9f b7       	in	r25, 0x3f	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
     6d0:	f8 94       	cli
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
     6d2:	3c 91       	ld	r19, X
     6d4:	82 2f       	mov	r24, r18
     6d6:	80 95       	com	r24
     6d8:	83 23       	and	r24, r19
     6da:	8c 93       	st	X, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
     6dc:	e8 81       	ld	r30, Y
     6de:	2e 2b       	or	r18, r30
     6e0:	ef cf       	rjmp	.-34     	; 0x6c0 <pinMode+0x48>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     6e2:	8f b7       	in	r24, 0x3f	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
     6e4:	f8 94       	cli
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
     6e6:	ec 91       	ld	r30, X
     6e8:	2e 2b       	or	r18, r30
     6ea:	2c 93       	st	X, r18
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
     6ec:	8f bf       	out	0x3f, r24	; 63
     6ee:	ea cf       	rjmp	.-44     	; 0x6c4 <pinMode+0x4c>

000006f0 <Keypad::pin_mode(unsigned char, unsigned char)>:
pin_mode():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:80
class Keypad : public Key {
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
     6f0:	86 2f       	mov	r24, r22
     6f2:	64 2f       	mov	r22, r20
     6f4:	0c 94 3c 03 	jmp	0x678	; 0x678 <pinMode>

000006f8 <delayMicroseconds>:
delayMicroseconds():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	91 05       	cpc	r25, r1
     6fc:	39 f0       	breq	.+14     	; 0x70c <delayMicroseconds+0x14>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
     706:	05 97       	sbiw	r24, 0x05	; 5
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <delayMicroseconds+0x10>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
     70c:	08 95       	ret

0000070e <micros>:
micros():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
     70e:	3f b7       	in	r19, 0x3f	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
     710:	f8 94       	cli
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
     712:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <timer0_overflow_count>
     716:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <timer0_overflow_count+0x1>
     71a:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <timer0_overflow_count+0x2>
     71e:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <timer0_overflow_count+0x3>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
     722:	26 b5       	in	r18, 0x26	; 38
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
     724:	a8 9b       	sbis	0x15, 0	; 21
     726:	05 c0       	rjmp	.+10     	; 0x732 <micros+0x24>
     728:	2f 3f       	cpi	r18, 0xFF	; 255
     72a:	19 f0       	breq	.+6      	; 0x732 <micros+0x24>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	a1 1d       	adc	r26, r1
     730:	b1 1d       	adc	r27, r1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
     732:	3f bf       	out	0x3f, r19	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
     734:	ba 2f       	mov	r27, r26
     736:	a9 2f       	mov	r26, r25
     738:	98 2f       	mov	r25, r24
     73a:	88 27       	eor	r24, r24
     73c:	bc 01       	movw	r22, r24
     73e:	cd 01       	movw	r24, r26
     740:	62 0f       	add	r22, r18
     742:	71 1d       	adc	r23, r1
     744:	81 1d       	adc	r24, r1
     746:	91 1d       	adc	r25, r1
     748:	42 e0       	ldi	r20, 0x02	; 2
     74a:	66 0f       	add	r22, r22
     74c:	77 1f       	adc	r23, r23
     74e:	88 1f       	adc	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	4a 95       	dec	r20
     754:	d1 f7       	brne	.-12     	; 0x74a <micros+0x3c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
     756:	08 95       	ret

00000758 <delay>:
delay():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
     758:	8f 92       	push	r8
     75a:	9f 92       	push	r9
     75c:	af 92       	push	r10
     75e:	bf 92       	push	r11
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	4b 01       	movw	r8, r22
     76a:	5c 01       	movw	r10, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
     76c:	0e 94 87 03 	call	0x70e	; 0x70e <micros>
     770:	6b 01       	movw	r12, r22
     772:	7c 01       	movw	r14, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     774:	0e 94 87 03 	call	0x70e	; 0x70e <micros>
     778:	6c 19       	sub	r22, r12
     77a:	7d 09       	sbc	r23, r13
     77c:	8e 09       	sbc	r24, r14
     77e:	9f 09       	sbc	r25, r15
     780:	68 3e       	cpi	r22, 0xE8	; 232
     782:	73 40       	sbci	r23, 0x03	; 3
     784:	81 05       	cpc	r24, r1
     786:	91 05       	cpc	r25, r1
     788:	a8 f3       	brcs	.-22     	; 0x774 <delay+0x1c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:402
      ms--;
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	82 1a       	sub	r8, r18
     78e:	91 08       	sbc	r9, r1
     790:	a1 08       	sbc	r10, r1
     792:	b1 08       	sbc	r11, r1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
     794:	88 ee       	ldi	r24, 0xE8	; 232
     796:	c8 0e       	add	r12, r24
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	d8 1e       	adc	r13, r24
     79c:	e1 1c       	adc	r14, r1
     79e:	f1 1c       	adc	r15, r1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
     7a0:	81 14       	cp	r8, r1
     7a2:	91 04       	cpc	r9, r1
     7a4:	a1 04       	cpc	r10, r1
     7a6:	b1 04       	cpc	r11, r1
     7a8:	29 f7       	brne	.-54     	; 0x774 <delay+0x1c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	08 95       	ret

000007bc <millis>:
millis():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     7bc:	2f b7       	in	r18, 0x3f	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
     7be:	f8 94       	cli
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
     7c0:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <timer0_millis>
     7c4:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <timer0_millis+0x1>
     7c8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <timer0_millis+0x2>
     7cc:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <timer0_millis+0x3>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
     7d0:	2f bf       	out	0x3f, r18	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
     7d2:	08 95       	ret

000007d4 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]>:
nextKeyState():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:152
	return anyActivity;
}

// Private
// This function is a state machine but is also used for debouncing the keys.
void Keypad::nextKeyState(byte idx, boolean button) {
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	c8 2f       	mov	r28, r24
     7de:	d6 2f       	mov	r29, r22
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:153
	key[idx].stateChanged = false;
     7e0:	86 e0       	ldi	r24, 0x06	; 6
     7e2:	c8 9f       	mul	r28, r24
     7e4:	f0 01       	movw	r30, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	e9 5d       	subi	r30, 0xD9	; 217
     7ea:	fc 4f       	sbci	r31, 0xFC	; 252
     7ec:	11 a2       	std	Z+33, r1	; 0x21
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:155

	switch (key[idx].kstate) {
     7ee:	87 8d       	ldd	r24, Z+31	; 0x1f
     7f0:	90 a1       	ldd	r25, Z+32	; 0x20
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	91 05       	cpc	r25, r1
     7f6:	f1 f0       	breq	.+60     	; 0x834 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0x60>
     7f8:	58 f0       	brcs	.+22     	; 0x810 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0x3c>
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	91 05       	cpc	r25, r1
     7fe:	f1 f1       	breq	.+124    	; 0x87c <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0xa8>
     800:	03 97       	sbiw	r24, 0x03	; 3
     802:	09 f4       	brne	.+2      	; 0x806 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0x32>
     804:	40 c0       	rjmp	.+128    	; 0x886 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0xb2>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:175
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
			break;
	}
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	08 95       	ret
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:157
void Keypad::nextKeyState(byte idx, boolean button) {
	key[idx].stateChanged = false;

	switch (key[idx].kstate) {
		case IDLE:
			if (button==CLOSED) {
     810:	66 23       	and	r22, r22
     812:	c9 f3       	breq	.-14     	; 0x806 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0x32>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:158
				transitionTo (idx, PRESSED);
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	8c 2f       	mov	r24, r28
     81a:	0e 94 4a 01 	call	0x294	; 0x294 <Keypad::transitionTo(unsigned char, KeyState) [clone .constprop.28]>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:159
				holdTimer = millis(); }		// Get ready for next HOLD state.
     81e:	0e 94 de 03 	call	0x7bc	; 0x7bc <millis>
     822:	60 93 7f 03 	sts	0x037F, r22	; 0x80037f <keypad+0x58>
     826:	70 93 80 03 	sts	0x0380, r23	; 0x800380 <keypad+0x59>
     82a:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <keypad+0x5a>
     82e:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <keypad+0x5b>
     832:	e9 cf       	rjmp	.-46     	; 0x806 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0x32>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:162
			break;
		case PRESSED:
			if ((millis()-holdTimer)>holdTime)	// Waiting for a key HOLD...
     834:	0e 94 de 03 	call	0x7bc	; 0x7bc <millis>
     838:	00 91 7f 03 	lds	r16, 0x037F	; 0x80037f <keypad+0x58>
     83c:	10 91 80 03 	lds	r17, 0x0380	; 0x800380 <keypad+0x59>
     840:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <keypad+0x5a>
     844:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <keypad+0x5b>
     848:	ab 01       	movw	r20, r22
     84a:	bc 01       	movw	r22, r24
     84c:	40 1b       	sub	r20, r16
     84e:	51 0b       	sbc	r21, r17
     850:	62 0b       	sbc	r22, r18
     852:	73 0b       	sbc	r23, r19
     854:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <keypad+0x6a>
     858:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <keypad+0x6b>
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	a0 e0       	ldi	r26, 0x00	; 0
     860:	84 17       	cp	r24, r20
     862:	95 07       	cpc	r25, r21
     864:	a6 07       	cpc	r26, r22
     866:	b7 07       	cpc	r27, r23
     868:	48 f4       	brcc	.+18     	; 0x87c <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0xa8>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:163
				transitionTo (idx, HOLD);
     86a:	62 e0       	ldi	r22, 0x02	; 2
     86c:	70 e0       	ldi	r23, 0x00	; 0
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:172
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
     86e:	8c 2f       	mov	r24, r28
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:175
			break;
	}
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:172
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
     878:	0c 94 4a 01 	jmp	0x294	; 0x294 <Keypad::transitionTo(unsigned char, KeyState) [clone .constprop.28]>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:165
			break;
		case PRESSED:
			if ((millis()-holdTimer)>holdTime)	// Waiting for a key HOLD...
				transitionTo (idx, HOLD);
			else if (button==OPEN)				// or for a key to be RELEASED.
				transitionTo (idx, RELEASED);
     87c:	63 e0       	ldi	r22, 0x03	; 3
     87e:	70 e0       	ldi	r23, 0x00	; 0
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:164
				holdTimer = millis(); }		// Get ready for next HOLD state.
			break;
		case PRESSED:
			if ((millis()-holdTimer)>holdTime)	// Waiting for a key HOLD...
				transitionTo (idx, HOLD);
			else if (button==OPEN)				// or for a key to be RELEASED.
     880:	d1 11       	cpse	r29, r1
     882:	c1 cf       	rjmp	.-126    	; 0x806 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0x32>
     884:	f4 cf       	rjmp	.-24     	; 0x86e <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0x9a>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:172
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	f1 cf       	rjmp	.-30     	; 0x86e <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]+0x9a>

0000088c <Keypad::getKey() [clone .constprop.21]>:
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:57
void Keypad::begin(char *userKeymap) {
    keymap = userKeymap;
}

// Returns a single key only. Retained for backwards compatibility.
char Keypad::getKey() {
     88c:	6f 92       	push	r6
     88e:	7f 92       	push	r7
     890:	8f 92       	push	r8
     892:	9f 92       	push	r9
     894:	af 92       	push	r10
     896:	bf 92       	push	r11
     898:	cf 92       	push	r12
     89a:	df 92       	push	r13
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:58
	single_key = true;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 93 03 	sts	0x0393, r24	; 0x800393 <keypad+0x6c>
getKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:73
// Populate the key list.
bool Keypad::getKeys() {
	bool keyActivity = false;

	// Limit how often the keypad is scanned. This makes the loop() run 10 times as fast.
	if ( (millis()-startTime)>debounceTime ) {
     8ae:	0e 94 de 03 	call	0x7bc	; 0x7bc <millis>
     8b2:	00 91 83 03 	lds	r16, 0x0383	; 0x800383 <keypad+0x5c>
     8b6:	10 91 84 03 	lds	r17, 0x0384	; 0x800384 <keypad+0x5d>
     8ba:	20 91 85 03 	lds	r18, 0x0385	; 0x800385 <keypad+0x5e>
     8be:	30 91 86 03 	lds	r19, 0x0386	; 0x800386 <keypad+0x5f>
     8c2:	ab 01       	movw	r20, r22
     8c4:	bc 01       	movw	r22, r24
     8c6:	40 1b       	sub	r20, r16
     8c8:	51 0b       	sbc	r21, r17
     8ca:	62 0b       	sbc	r22, r18
     8cc:	73 0b       	sbc	r23, r19
     8ce:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <keypad+0x68>
     8d2:	90 91 90 03 	lds	r25, 0x0390	; 0x800390 <keypad+0x69>
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	a0 e0       	ldi	r26, 0x00	; 0
     8da:	84 17       	cp	r24, r20
     8dc:	95 07       	cpc	r25, r21
     8de:	a6 07       	cpc	r26, r22
     8e0:	b7 07       	cpc	r27, r23
     8e2:	08 f0       	brcs	.+2      	; 0x8e6 <Keypad::getKey() [clone .constprop.21]+0x5a>
     8e4:	14 c1       	rjmp	.+552    	; 0xb0e <Keypad::getKey() [clone .constprop.21]+0x282>
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:85
}

// Private : Hardware scan
void Keypad::scanKeys() {
	// Re-intialize the row pins. Allows sharing these pins with other hardware.
	for (byte r=0; r<sizeKpd.rows; r++) {
     8e6:	c0 e0       	ldi	r28, 0x00	; 0
scanKeys():
     8e8:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <keypad+0x66>
     8ec:	c8 17       	cp	r28, r24
     8ee:	60 f4       	brcc	.+24     	; 0x908 <Keypad::getKey() [clone .constprop.21]+0x7c>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:86
		pin_mode(rowPins[r],INPUT_PULLUP);
     8f0:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <keypad+0x62>
     8f4:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <keypad+0x63>
     8f8:	ec 0f       	add	r30, r28
     8fa:	f1 1d       	adc	r31, r1
pin_mode():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:80
     8fc:	62 e0       	ldi	r22, 0x02	; 2
     8fe:	80 81       	ld	r24, Z
     900:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
scanKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:85
}

// Private : Hardware scan
void Keypad::scanKeys() {
	// Re-intialize the row pins. Allows sharing these pins with other hardware.
	for (byte r=0; r<sizeKpd.rows; r++) {
     904:	cf 5f       	subi	r28, 0xFF	; 255
     906:	f0 cf       	rjmp	.-32     	; 0x8e8 <Keypad::getKey() [clone .constprop.21]+0x5c>
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:90
		pin_mode(rowPins[r],INPUT_PULLUP);
	}

	// bitMap stores ALL the keys that are being pressed.
	for (byte c=0; c<sizeKpd.columns; c++) {
     908:	71 2c       	mov	r7, r1
scanKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:94
		pin_mode(columnPins[c],OUTPUT);
		pin_write(columnPins[c], LOW);	// Begin column pulse output.
		for (byte r=0; r<sizeKpd.rows; r++) {
			bitWrite(bitMap[r], c, !pin_read(rowPins[r]));  // keypress is active low so invert to high.
     90a:	81 2c       	mov	r8, r1
     90c:	91 2c       	mov	r9, r1
     90e:	54 01       	movw	r10, r8
     910:	83 94       	inc	r8
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:90
	for (byte r=0; r<sizeKpd.rows; r++) {
		pin_mode(rowPins[r],INPUT_PULLUP);
	}

	// bitMap stores ALL the keys that are being pressed.
	for (byte c=0; c<sizeKpd.columns; c++) {
     912:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <keypad+0x67>
     916:	78 16       	cp	r7, r24
     918:	08 f0       	brcs	.+2      	; 0x91c <Keypad::getKey() [clone .constprop.21]+0x90>
     91a:	5f c0       	rjmp	.+190    	; 0x9da <Keypad::getKey() [clone .constprop.21]+0x14e>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:91
		pin_mode(columnPins[c],OUTPUT);
     91c:	07 2d       	mov	r16, r7
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <keypad+0x64>
     924:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <keypad+0x65>
     928:	e0 0f       	add	r30, r16
     92a:	f1 1f       	adc	r31, r17
pin_mode():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:80
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	80 81       	ld	r24, Z
     930:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
scanKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:92
		pin_write(columnPins[c], LOW);	// Begin column pulse output.
     934:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <keypad+0x64>
     938:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <keypad+0x65>
     93c:	e0 0f       	add	r30, r16
     93e:	f1 1f       	adc	r31, r17
pin_write():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:81
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	80 81       	ld	r24, Z
     944:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
scanKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:94
		for (byte r=0; r<sizeKpd.rows; r++) {
			bitWrite(bitMap[r], c, !pin_read(rowPins[r]));  // keypress is active low so invert to high.
     948:	d5 01       	movw	r26, r10
     94a:	c4 01       	movw	r24, r8
     94c:	07 2c       	mov	r0, r7
     94e:	04 c0       	rjmp	.+8      	; 0x958 <Keypad::getKey() [clone .constprop.21]+0xcc>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	aa 1f       	adc	r26, r26
     956:	bb 1f       	adc	r27, r27
     958:	0a 94       	dec	r0
     95a:	d2 f7       	brpl	.-12     	; 0x950 <Keypad::getKey() [clone .constprop.21]+0xc4>
     95c:	6c 01       	movw	r12, r24
     95e:	7c 01       	movw	r14, r24
     960:	e0 94       	com	r14
     962:	f0 94       	com	r15
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:93

	// bitMap stores ALL the keys that are being pressed.
	for (byte c=0; c<sizeKpd.columns; c++) {
		pin_mode(columnPins[c],OUTPUT);
		pin_write(columnPins[c], LOW);	// Begin column pulse output.
		for (byte r=0; r<sizeKpd.rows; r++) {
     964:	61 2c       	mov	r6, r1
scanKeys():
     966:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <keypad+0x66>
     96a:	68 16       	cp	r6, r24
     96c:	f8 f4       	brcc	.+62     	; 0x9ac <Keypad::getKey() [clone .constprop.21]+0x120>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:94
			bitWrite(bitMap[r], c, !pin_read(rowPins[r]));  // keypress is active low so invert to high.
     96e:	c6 2d       	mov	r28, r6
     970:	d0 e0       	ldi	r29, 0x00	; 0
     972:	e0 91 89 03 	lds	r30, 0x0389	; 0x800389 <keypad+0x62>
     976:	f0 91 8a 03 	lds	r31, 0x038A	; 0x80038a <keypad+0x63>
     97a:	ec 0f       	add	r30, r28
     97c:	fd 1f       	adc	r31, r29
pin_read():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:82
	virtual int  pin_read(byte pinNum) { return digitalRead(pinNum); }
     97e:	80 81       	ld	r24, Z
     980:	0e 94 ac 02 	call	0x558	; 0x558 <digitalRead>
     984:	24 96       	adiw	r28, 0x04	; 4
scanKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:94
     986:	cc 0f       	add	r28, r28
     988:	dd 1f       	adc	r29, r29
     98a:	c9 5d       	subi	r28, 0xD9	; 217
     98c:	dc 4f       	sbci	r29, 0xFC	; 252
     98e:	89 2b       	or	r24, r25
     990:	41 f4       	brne	.+16     	; 0x9a2 <Keypad::getKey() [clone .constprop.21]+0x116>
     992:	88 81       	ld	r24, Y
     994:	99 81       	ldd	r25, Y+1	; 0x01
     996:	8c 29       	or	r24, r12
     998:	9d 29       	or	r25, r13
     99a:	99 83       	std	Y+1, r25	; 0x01
     99c:	88 83       	st	Y, r24
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:93

	// bitMap stores ALL the keys that are being pressed.
	for (byte c=0; c<sizeKpd.columns; c++) {
		pin_mode(columnPins[c],OUTPUT);
		pin_write(columnPins[c], LOW);	// Begin column pulse output.
		for (byte r=0; r<sizeKpd.rows; r++) {
     99e:	63 94       	inc	r6
     9a0:	e2 cf       	rjmp	.-60     	; 0x966 <Keypad::getKey() [clone .constprop.21]+0xda>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:94
			bitWrite(bitMap[r], c, !pin_read(rowPins[r]));  // keypress is active low so invert to high.
     9a2:	88 81       	ld	r24, Y
     9a4:	99 81       	ldd	r25, Y+1	; 0x01
     9a6:	8e 21       	and	r24, r14
     9a8:	9f 21       	and	r25, r15
     9aa:	f7 cf       	rjmp	.-18     	; 0x99a <Keypad::getKey() [clone .constprop.21]+0x10e>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:97
		}
		// Set pin to high impedance input. Effectively ends column pulse.
		pin_write(columnPins[c],HIGH);
     9ac:	e0 91 8b 03 	lds	r30, 0x038B	; 0x80038b <keypad+0x64>
     9b0:	f0 91 8c 03 	lds	r31, 0x038C	; 0x80038c <keypad+0x65>
     9b4:	e0 0f       	add	r30, r16
     9b6:	f1 1f       	adc	r31, r17
pin_write():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:81
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
	virtual void pin_write(byte pinNum, boolean level) { digitalWrite(pinNum, level); }
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	80 81       	ld	r24, Z
     9bc:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
scanKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:98
		pin_mode(columnPins[c],INPUT);
     9c0:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <keypad+0x64>
     9c4:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <keypad+0x65>
     9c8:	08 0f       	add	r16, r24
     9ca:	19 1f       	adc	r17, r25
pin_mode():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.h:80
class Keypad : public Key {
public:

	Keypad(char *userKeymap, byte *row, byte *col, byte numRows, byte numCols);

	virtual void pin_mode(byte pinNum, byte mode) { pinMode(pinNum, mode); }
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	f8 01       	movw	r30, r16
     9d0:	80 81       	ld	r24, Z
     9d2:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
scanKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:90
	for (byte r=0; r<sizeKpd.rows; r++) {
		pin_mode(rowPins[r],INPUT_PULLUP);
	}

	// bitMap stores ALL the keys that are being pressed.
	for (byte c=0; c<sizeKpd.columns; c++) {
     9d6:	73 94       	inc	r7
     9d8:	9c cf       	rjmp	.-200    	; 0x912 <Keypad::getKey() [clone .constprop.21]+0x86>
     9da:	c7 e2       	ldi	r28, 0x27	; 39
     9dc:	d3 e0       	ldi	r29, 0x03	; 3
     9de:	fe 01       	movw	r30, r28
updateList():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:111

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
			key[i].kchar = NO_KEY;
			key[i].kcode = -1;
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	9f ef       	ldi	r25, 0xFF	; 255
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:109

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
     9e4:	27 8d       	ldd	r18, Z+31	; 0x1f
     9e6:	30 a1       	ldd	r19, Z+32	; 0x20
     9e8:	23 2b       	or	r18, r19
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <Keypad::getKey() [clone .constprop.21]+0x168>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:110
			key[i].kchar = NO_KEY;
     9ec:	14 8e       	std	Z+28, r1	; 0x1c
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:111
			key[i].kcode = -1;
     9ee:	96 8f       	std	Z+30, r25	; 0x1e
     9f0:	85 8f       	std	Z+29, r24	; 0x1d
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:112
			key[i].stateChanged = false;
     9f2:	11 a2       	std	Z+33, r1	; 0x21
     9f4:	36 96       	adiw	r30, 0x06	; 6
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:108
bool Keypad::updateList() {

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
     9f6:	23 e0       	ldi	r18, 0x03	; 3
     9f8:	e3 36       	cpi	r30, 0x63	; 99
     9fa:	f2 07       	cpc	r31, r18
     9fc:	99 f7       	brne	.-26     	; 0x9e4 <Keypad::getKey() [clone .constprop.21]+0x158>
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:117
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
     9fe:	f1 2c       	mov	r15, r1
updateList():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:131
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
						key[i].kchar = keyChar;
     a00:	96 e0       	ldi	r25, 0x06	; 6
     a02:	d9 2e       	mov	r13, r25
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:117
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
     a04:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <keypad+0x66>
     a08:	f8 16       	cp	r15, r24
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <Keypad::getKey() [clone .constprop.21]+0x182>
     a0c:	50 c0       	rjmp	.+160    	; 0xaae <Keypad::getKey() [clone .constprop.21]+0x222>
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:118
		for (byte c=0; c<sizeKpd.columns; c++) {
     a0e:	e1 2c       	mov	r14, r1
updateList():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:119
			boolean button = bitRead(bitMap[r],c);
     a10:	0f 2d       	mov	r16, r15
     a12:	10 e0       	ldi	r17, 0x00	; 0
     a14:	00 0f       	add	r16, r16
     a16:	11 1f       	adc	r17, r17
     a18:	01 5d       	subi	r16, 0xD1	; 209
     a1a:	1c 4f       	sbci	r17, 0xFC	; 252
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:118
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
     a1c:	20 91 8e 03 	lds	r18, 0x038E	; 0x80038e <keypad+0x67>
     a20:	e2 16       	cp	r14, r18
     a22:	08 f0       	brcs	.+2      	; 0xa26 <Keypad::getKey() [clone .constprop.21]+0x19a>
     a24:	42 c0       	rjmp	.+132    	; 0xaaa <Keypad::getKey() [clone .constprop.21]+0x21e>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:119
			boolean button = bitRead(bitMap[r],c);
     a26:	f8 01       	movw	r30, r16
     a28:	60 81       	ld	r22, Z
     a2a:	71 81       	ldd	r23, Z+1	; 0x01
     a2c:	0e 2c       	mov	r0, r14
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <Keypad::getKey() [clone .constprop.21]+0x1a8>
     a30:	76 95       	lsr	r23
     a32:	67 95       	ror	r22
     a34:	0a 94       	dec	r0
     a36:	e2 f7       	brpl	.-8      	; 0xa30 <Keypad::getKey() [clone .constprop.21]+0x1a4>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:120
			char keyChar = keymap[r * sizeKpd.columns + c];
     a38:	f2 9e       	mul	r15, r18
     a3a:	90 01       	movw	r18, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	2e 0d       	add	r18, r14
     a40:	31 1d       	adc	r19, r1
     a42:	e7 e2       	ldi	r30, 0x27	; 39
     a44:	f3 e0       	ldi	r31, 0x03	; 3
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:202
}

// Search by code for a key in the list of active keys.
// Returns -1 if not found or the index into the list of active keys.
int Keypad::findInList (int keyCode) {
	for (byte i=0; i<LIST_MAX; i++) {
     a46:	80 e0       	ldi	r24, 0x00	; 0
findInList():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:203
		if (key[i].kcode == keyCode) {
     a48:	45 8d       	ldd	r20, Z+29	; 0x1d
     a4a:	56 8d       	ldd	r21, Z+30	; 0x1e
     a4c:	24 17       	cp	r18, r20
     a4e:	35 07       	cpc	r19, r21
     a50:	09 f4       	brne	.+2      	; 0xa54 <Keypad::getKey() [clone .constprop.21]+0x1c8>
     a52:	61 c0       	rjmp	.+194    	; 0xb16 <Keypad::getKey() [clone .constprop.21]+0x28a>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:202
}

// Search by code for a key in the list of active keys.
// Returns -1 if not found or the index into the list of active keys.
int Keypad::findInList (int keyCode) {
	for (byte i=0; i<LIST_MAX; i++) {
     a54:	8f 5f       	subi	r24, 0xFF	; 255
     a56:	36 96       	adiw	r30, 0x06	; 6
     a58:	8a 30       	cpi	r24, 0x0A	; 10
     a5a:	b1 f7       	brne	.-20     	; 0xa48 <Keypad::getKey() [clone .constprop.21]+0x1bc>
updateList():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:128
			// Key is already on the list so set its next state.
			if (idx > -1)	{
				nextKeyState(idx, button);
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
     a5c:	60 ff       	sbrs	r22, 0
     a5e:	23 c0       	rjmp	.+70     	; 0xaa6 <Keypad::getKey() [clone .constprop.21]+0x21a>
     a60:	e7 e2       	ldi	r30, 0x27	; 39
     a62:	f3 e0       	ldi	r31, 0x03	; 3
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	80 e0       	ldi	r24, 0x00	; 0
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:130
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
     a68:	44 8d       	ldd	r20, Z+28	; 0x1c
     a6a:	41 11       	cpse	r20, r1
     a6c:	17 c0       	rjmp	.+46     	; 0xa9c <Keypad::getKey() [clone .constprop.21]+0x210>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:120

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
			char keyChar = keymap[r * sizeKpd.columns + c];
     a6e:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <keypad+0x60>
     a72:	f0 91 88 03 	lds	r31, 0x0388	; 0x800388 <keypad+0x61>
     a76:	e2 0f       	add	r30, r18
     a78:	f3 1f       	adc	r31, r19
     a7a:	40 81       	ld	r20, Z
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:131
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
						key[i].kchar = keyChar;
     a7c:	d8 9e       	mul	r13, r24
     a7e:	f0 01       	movw	r30, r0
     a80:	d9 9e       	mul	r13, r25
     a82:	f0 0d       	add	r31, r0
     a84:	11 24       	eor	r1, r1
     a86:	e9 5d       	subi	r30, 0xD9	; 217
     a88:	fc 4f       	sbci	r31, 0xFC	; 252
     a8a:	44 8f       	std	Z+28, r20	; 0x1c
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:132
						key[i].kcode = keyCode;
     a8c:	36 8f       	std	Z+30, r19	; 0x1e
     a8e:	25 8f       	std	Z+29, r18	; 0x1d
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:133
						key[i].kstate = IDLE;		// Keys NOT on the list have an initial state of IDLE.
     a90:	10 a2       	std	Z+32, r1	; 0x20
     a92:	17 8e       	std	Z+31, r1	; 0x1f
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:134
						nextKeyState (i, button);
     a94:	61 e0       	ldi	r22, 0x01	; 1
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:125
			char keyChar = keymap[r * sizeKpd.columns + c];
			int keyCode = r * sizeKpd.columns + c;
			int idx = findInList (keyCode);
			// Key is already on the list so set its next state.
			if (idx > -1)	{
				nextKeyState(idx, button);
     a96:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Keypad::nextKeyState(unsigned char, bool) [clone .constprop.26]>
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <Keypad::getKey() [clone .constprop.21]+0x21a>
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	36 96       	adiw	r30, 0x06	; 6
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:129
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
     aa0:	8a 30       	cpi	r24, 0x0A	; 10
     aa2:	91 05       	cpc	r25, r1
     aa4:	09 f7       	brne	.-62     	; 0xa68 <Keypad::getKey() [clone .constprop.21]+0x1dc>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:118
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
     aa6:	e3 94       	inc	r14
     aa8:	b9 cf       	rjmp	.-142    	; 0xa1c <Keypad::getKey() [clone .constprop.21]+0x190>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:117
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
     aaa:	f3 94       	inc	r15
     aac:	ab cf       	rjmp	.-170    	; 0xa04 <Keypad::getKey() [clone .constprop.21]+0x178>
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:105
}

// Manage the list without rearranging the keys. Returns true if any keys on the list changed state.
bool Keypad::updateList() {

	bool anyActivity = false;
     aae:	10 e0       	ldi	r17, 0x00	; 0
updateList():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:144
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].stateChanged) anyActivity = true;
     ab0:	89 a1       	ldd	r24, Y+33	; 0x21
     ab2:	81 11       	cpse	r24, r1
getKey():
     ab4:	18 2f       	mov	r17, r24
     ab6:	26 96       	adiw	r28, 0x06	; 6
updateList():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:143
			}
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
     ab8:	f3 e0       	ldi	r31, 0x03	; 3
     aba:	c3 36       	cpi	r28, 0x63	; 99
     abc:	df 07       	cpc	r29, r31
     abe:	c1 f7       	brne	.-16     	; 0xab0 <Keypad::getKey() [clone .constprop.21]+0x224>
getKeys():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:76

	// Limit how often the keypad is scanned. This makes the loop() run 10 times as fast.
	if ( (millis()-startTime)>debounceTime ) {
		scanKeys();
		keyActivity = updateList();
		startTime = millis();
     ac0:	0e 94 de 03 	call	0x7bc	; 0x7bc <millis>
     ac4:	60 93 83 03 	sts	0x0383, r22	; 0x800383 <keypad+0x5c>
     ac8:	70 93 84 03 	sts	0x0384, r23	; 0x800384 <keypad+0x5d>
     acc:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <keypad+0x5e>
     ad0:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <keypad+0x5f>
getKey():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:60

// Returns a single key only. Retained for backwards compatibility.
char Keypad::getKey() {
	single_key = true;

	if (getKeys() && key[0].stateChanged && (key[0].kstate==PRESSED))
     ad4:	11 23       	and	r17, r17
     ad6:	d9 f0       	breq	.+54     	; 0xb0e <Keypad::getKey() [clone .constprop.21]+0x282>
     ad8:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <keypad+0x21>
     adc:	88 23       	and	r24, r24
     ade:	b9 f0       	breq	.+46     	; 0xb0e <Keypad::getKey() [clone .constprop.21]+0x282>
     ae0:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <keypad+0x1f>
     ae4:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <keypad+0x20>
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	89 f4       	brne	.+34     	; 0xb0e <Keypad::getKey() [clone .constprop.21]+0x282>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:61
		return key[0].kchar;
     aec:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <keypad+0x1c>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:66
	
	single_key = false;

	return NO_KEY;
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	ff 90       	pop	r15
     afa:	ef 90       	pop	r14
     afc:	df 90       	pop	r13
     afe:	cf 90       	pop	r12
     b00:	bf 90       	pop	r11
     b02:	af 90       	pop	r10
     b04:	9f 90       	pop	r9
     b06:	8f 90       	pop	r8
     b08:	7f 90       	pop	r7
     b0a:	6f 90       	pop	r6
     b0c:	08 95       	ret
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:63
	single_key = true;

	if (getKeys() && key[0].stateChanged && (key[0].kstate==PRESSED))
		return key[0].kchar;
	
	single_key = false;
     b0e:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <keypad+0x6c>
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:65

	return NO_KEY;
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	ed cf       	rjmp	.-38     	; 0xaf0 <Keypad::getKey() [clone .constprop.21]+0x264>
updateList():
/home/whisper/Arduino/libraries/Keypad/src/Keypad.cpp:119
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
     b16:	61 70       	andi	r22, 0x01	; 1
     b18:	be cf       	rjmp	.-132    	; 0xa96 <Keypad::getKey() [clone .constprop.21]+0x20a>

00000b1a <LiquidCrystal::pulseEnable()>:
pulseEnable():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:303
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	ec 01       	movw	r28, r24
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:304
  digitalWrite(_enable_pin, LOW);
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	8e 81       	ldd	r24, Y+6	; 0x06
     b24:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:305
  delayMicroseconds(1);    
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delayMicroseconds>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:306
  digitalWrite(_enable_pin, HIGH);
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	8e 81       	ldd	r24, Y+6	; 0x06
     b34:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:307
  delayMicroseconds(1);    // enable pulse must be >450ns
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delayMicroseconds>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:308
  digitalWrite(_enable_pin, LOW);
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	8e 81       	ldd	r24, Y+6	; 0x06
     b44:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  delayMicroseconds(100);   // commands need > 37us to settle
     b48:	84 e6       	ldi	r24, 0x64	; 100
     b4a:	90 e0       	ldi	r25, 0x00	; 0
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:310
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:309
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
     b50:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <delayMicroseconds>

00000b54 <LiquidCrystal::write4bits(unsigned char)>:
write4bits():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:312
}

void LiquidCrystal::write4bits(uint8_t value) {
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	6c 01       	movw	r12, r24
     b66:	7c 01       	movw	r14, r24
     b68:	87 e0       	ldi	r24, 0x07	; 7
     b6a:	e8 0e       	add	r14, r24
     b6c:	f1 1c       	adc	r15, r1
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  for (int i = 0; i < 4; i++) {
     b6e:	d0 e0       	ldi	r29, 0x00	; 0
     b70:	c0 e0       	ldi	r28, 0x00	; 0
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:314
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     b72:	06 2f       	mov	r16, r22
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	b8 01       	movw	r22, r16
     b78:	0c 2e       	mov	r0, r28
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <LiquidCrystal::write4bits(unsigned char)+0x2c>
     b7c:	75 95       	asr	r23
     b7e:	67 95       	ror	r22
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <LiquidCrystal::write4bits(unsigned char)+0x28>
     b84:	61 70       	andi	r22, 0x01	; 1
     b86:	f7 01       	movw	r30, r14
     b88:	81 91       	ld	r24, Z+
     b8a:	7f 01       	movw	r14, r30
     b8c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:313
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
     b90:	21 96       	adiw	r28, 0x01	; 1
     b92:	c4 30       	cpi	r28, 0x04	; 4
     b94:	d1 05       	cpc	r29, r1
     b96:	79 f7       	brne	.-34     	; 0xb76 <LiquidCrystal::write4bits(unsigned char)+0x22>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     b98:	c6 01       	movw	r24, r12
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:318
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:317
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }

  pulseEnable();
     baa:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <LiquidCrystal::pulseEnable()>

00000bae <LiquidCrystal::send(unsigned char, unsigned char)>:
send():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:287
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	ec 01       	movw	r28, r24
     bc0:	f6 2e       	mov	r15, r22
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:288
  digitalWrite(_rs_pin, mode);
     bc2:	64 2f       	mov	r22, r20
     bc4:	8c 81       	ldd	r24, Y+4	; 0x04
     bc6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:291

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
     bca:	8d 81       	ldd	r24, Y+5	; 0x05
     bcc:	8f 3f       	cpi	r24, 0xFF	; 255
     bce:	19 f0       	breq	.+6      	; 0xbd6 <LiquidCrystal::send(unsigned char, unsigned char)+0x28>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:292
    digitalWrite(_rw_pin, LOW);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
     bd6:	0f 2d       	mov	r16, r15
     bd8:	10 e0       	ldi	r17, 0x00	; 0
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:295
  }
  
  if (_displayfunction & LCD_8BITMODE) {
     bda:	8f 85       	ldd	r24, Y+15	; 0x0f
     bdc:	84 ff       	sbrs	r24, 4
     bde:	25 c0       	rjmp	.+74     	; 0xc2a <LiquidCrystal::send(unsigned char, unsigned char)+0x7c>
     be0:	6e 01       	movw	r12, r28
     be2:	87 e0       	ldi	r24, 0x07	; 7
     be4:	c8 0e       	add	r12, r24
     be6:	d1 1c       	adc	r13, r1
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     be8:	f1 2c       	mov	r15, r1
     bea:	e1 2c       	mov	r14, r1
write8bits():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:322
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
     bec:	b8 01       	movw	r22, r16
     bee:	0e 2c       	mov	r0, r14
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <LiquidCrystal::send(unsigned char, unsigned char)+0x48>
     bf2:	75 95       	asr	r23
     bf4:	67 95       	ror	r22
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <LiquidCrystal::send(unsigned char, unsigned char)+0x44>
     bfa:	61 70       	andi	r22, 0x01	; 1
     bfc:	f6 01       	movw	r30, r12
     bfe:	81 91       	ld	r24, Z+
     c00:	6f 01       	movw	r12, r30
     c02:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:321

  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
     c06:	ff ef       	ldi	r31, 0xFF	; 255
     c08:	ef 1a       	sub	r14, r31
     c0a:	ff 0a       	sbc	r15, r31
     c0c:	88 e0       	ldi	r24, 0x08	; 8
     c0e:	e8 16       	cp	r14, r24
     c10:	f1 04       	cpc	r15, r1
     c12:	61 f7       	brne	.-40     	; 0xbec <LiquidCrystal::send(unsigned char, unsigned char)+0x3e>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     c14:	ce 01       	movw	r24, r28
send():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
write8bits():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:325
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  
  pulseEnable();
     c26:	0c 94 8d 05 	jmp	0xb1a	; 0xb1a <LiquidCrystal::pulseEnable()>
send():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:298
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
     c2a:	b8 01       	movw	r22, r16
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	75 95       	asr	r23
     c30:	67 95       	ror	r22
     c32:	8a 95       	dec	r24
     c34:	e1 f7       	brne	.-8      	; 0xc2e <LiquidCrystal::send(unsigned char, unsigned char)+0x80>
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 aa 05 	call	0xb54	; 0xb54 <LiquidCrystal::write4bits(unsigned char)>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
    write4bits(value);
     c3c:	6f 2d       	mov	r22, r15
     c3e:	ce 01       	movw	r24, r28
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:301
  }
}
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:299
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
     c50:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <LiquidCrystal::write4bits(unsigned char)>

00000c54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>:
command():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:276
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	68 2f       	mov	r22, r24
     c58:	86 e9       	ldi	r24, 0x96	; 150
     c5a:	93 e0       	ldi	r25, 0x03	; 3
     c5c:	0c 94 d7 05 	jmp	0xbae	; 0xbae <LiquidCrystal::send(unsigned char, unsigned char)>

00000c60 <LiquidCrystal::clear() [clone .constprop.73]>:
clear():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:178
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	0e 94 2a 06 	call	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:179
  delayMicroseconds(2000);  // this command takes a long time!
     c66:	80 ed       	ldi	r24, 0xD0	; 208
     c68:	97 e0       	ldi	r25, 0x07	; 7
     c6a:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <delayMicroseconds>

00000c6e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]>:
begin():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:78
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
  
  begin(16, 1);  
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
     c6e:	cf 93       	push	r28
     c70:	df 93       	push	r29
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:79
  if (lines > 1) {
     c72:	82 30       	cpi	r24, 0x02	; 2
     c74:	29 f4       	brne	.+10     	; 0xc80 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0x12>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:80
    _displayfunction |= LCD_2LINE;
     c76:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <lcd+0xf>
     c7a:	98 60       	ori	r25, 0x08	; 8
     c7c:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <lcd+0xf>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:82
  }
  _numlines = lines;
     c80:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <lcd+0x13>
setRowOffsets():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:169

}

void LiquidCrystal::setRowOffsets(int row0, int row1, int row2, int row3)
{
  _row_offsets[0] = row0;
     c84:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <lcd+0x14>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:170
  _row_offsets[1] = row1;
     c88:	80 e4       	ldi	r24, 0x40	; 64
     c8a:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <lcd+0x15>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:171
  _row_offsets[2] = row2;
     c8e:	80 e1       	ldi	r24, 0x10	; 16
     c90:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <lcd+0x16>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:172
  _row_offsets[3] = row3;
     c94:	80 e5       	ldi	r24, 0x50	; 80
     c96:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <lcd+0x17>
begin():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:91
  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
    _displayfunction |= LCD_5x10DOTS;
  }

  pinMode(_rs_pin, OUTPUT);
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <lcd+0x4>
     ca0:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:93
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
     ca4:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <lcd+0x5>
     ca8:	8f 3f       	cpi	r24, 0xFF	; 255
     caa:	19 f0       	breq	.+6      	; 0xcb2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0x44>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:94
    pinMode(_rw_pin, OUTPUT);
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:96
  }
  pinMode(_enable_pin, OUTPUT);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <lcd+0x6>
     cb8:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
     cbc:	c6 e9       	ldi	r28, 0x96	; 150
     cbe:	d3 e0       	ldi	r29, 0x03	; 3
     cc0:	9e 01       	movw	r18, r28
     cc2:	26 59       	subi	r18, 0x96	; 150
     cc4:	33 40       	sbci	r19, 0x03	; 3
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     cc6:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <lcd+0xf>
     cca:	84 fd       	sbrc	r24, 4
     ccc:	0b c0       	rjmp	.+22     	; 0xce4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0x76>
     cce:	84 e0       	ldi	r24, 0x04	; 4
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	21 96       	adiw	r28, 0x01	; 1
     cd4:	28 17       	cp	r18, r24
     cd6:	39 07       	cpc	r19, r25
     cd8:	44 f4       	brge	.+16     	; 0xcea <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0x7c>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:101
  {
    pinMode(_data_pins[i], OUTPUT);
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	8e 81       	ldd	r24, Y+6	; 0x06
     cde:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
     ce2:	ee cf       	rjmp	.-36     	; 0xcc0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0x52>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:99
    pinMode(_rw_pin, OUTPUT);
  }
  pinMode(_enable_pin, OUTPUT);
  
  // Do these once, instead of every time a character is drawn for speed reasons.
  for (int i=0; i<((_displayfunction & LCD_8BITMODE) ? 8 : 4); ++i)
     ce4:	88 e0       	ldi	r24, 0x08	; 8
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	f4 cf       	rjmp	.-24     	; 0xcd2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0x64>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:107
   } 

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way before 4.5V so we'll wait 50
  delayMicroseconds(50000); 
     cea:	80 e5       	ldi	r24, 0x50	; 80
     cec:	93 ec       	ldi	r25, 0xC3	; 195
     cee:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delayMicroseconds>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:109
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <lcd+0x4>
     cf8:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:110
  digitalWrite(_enable_pin, LOW);
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <lcd+0x6>
     d02:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:111
  if (_rw_pin != 255) { 
     d06:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <lcd+0x5>
     d0a:	8f 3f       	cpi	r24, 0xFF	; 255
     d0c:	19 f0       	breq	.+6      	; 0xd14 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0xa6>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:112
    digitalWrite(_rw_pin, LOW);
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:116
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
     d14:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <lcd+0xf>
     d18:	84 fd       	sbrc	r24, 4
     d1a:	35 c0       	rjmp	.+106    	; 0xd86 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0x118>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:121
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	86 e9       	ldi	r24, 0x96	; 150
     d20:	93 e0       	ldi	r25, 0x03	; 3
     d22:	0e 94 aa 05 	call	0xb54	; 0xb54 <LiquidCrystal::write4bits(unsigned char)>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:122
    delayMicroseconds(4500); // wait min 4.1ms
     d26:	84 e9       	ldi	r24, 0x94	; 148
     d28:	91 e1       	ldi	r25, 0x11	; 17
     d2a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delayMicroseconds>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:125

    // second try
    write4bits(0x03);
     d2e:	63 e0       	ldi	r22, 0x03	; 3
     d30:	86 e9       	ldi	r24, 0x96	; 150
     d32:	93 e0       	ldi	r25, 0x03	; 3
     d34:	0e 94 aa 05 	call	0xb54	; 0xb54 <LiquidCrystal::write4bits(unsigned char)>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:126
    delayMicroseconds(4500); // wait min 4.1ms
     d38:	84 e9       	ldi	r24, 0x94	; 148
     d3a:	91 e1       	ldi	r25, 0x11	; 17
     d3c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delayMicroseconds>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:129
    
    // third go!
    write4bits(0x03); 
     d40:	63 e0       	ldi	r22, 0x03	; 3
     d42:	86 e9       	ldi	r24, 0x96	; 150
     d44:	93 e0       	ldi	r25, 0x03	; 3
     d46:	0e 94 aa 05 	call	0xb54	; 0xb54 <LiquidCrystal::write4bits(unsigned char)>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:130
    delayMicroseconds(150);
     d4a:	86 e9       	ldi	r24, 0x96	; 150
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delayMicroseconds>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:133

    // finally, set to 4-bit interface
    write4bits(0x02); 
     d52:	62 e0       	ldi	r22, 0x02	; 2
     d54:	86 e9       	ldi	r24, 0x96	; 150
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	0e 94 aa 05 	call	0xb54	; 0xb54 <LiquidCrystal::write4bits(unsigned char)>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:151
    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
     d5c:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <lcd+0xf>
     d60:	80 62       	ori	r24, 0x20	; 32
     d62:	0e 94 2a 06 	call	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:154

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
     d66:	84 e0       	ldi	r24, 0x04	; 4
     d68:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <lcd+0x10>
display():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:208
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::display() {
  _displaycontrol |= LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     d6c:	8c e0       	ldi	r24, 0x0C	; 12
     d6e:	0e 94 2a 06 	call	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>
begin():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:158
  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
  display();

  // clear it off
  clear();
     d72:	0e 94 30 06 	call	0xc60	; 0xc60 <LiquidCrystal::clear() [clone .constprop.73]>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:161

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     d76:	82 e0       	ldi	r24, 0x02	; 2
     d78:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <lcd+0x11>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     d7c:	86 e0       	ldi	r24, 0x06	; 6
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:165

}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:163
  clear();

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
     d82:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:139
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
     d86:	80 62       	ori	r24, 0x20	; 32
     d88:	0e 94 2a 06 	call	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:140
    delayMicroseconds(4500);  // wait more than 4.1ms
     d8c:	84 e9       	ldi	r24, 0x94	; 148
     d8e:	91 e1       	ldi	r25, 0x11	; 17
     d90:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delayMicroseconds>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:143

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
     d94:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <lcd+0xf>
     d98:	80 62       	ori	r24, 0x20	; 32
     d9a:	0e 94 2a 06 	call	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:144
    delayMicroseconds(150);
     d9e:	86 e9       	ldi	r24, 0x96	; 150
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <delayMicroseconds>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:147

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
     da6:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <lcd+0xf>
     daa:	80 62       	ori	r24, 0x20	; 32
     dac:	0e 94 2a 06 	call	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>
     db0:	d5 cf       	rjmp	.-86     	; 0xd5c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]+0xee>

00000db2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>:
setCursor():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:194
{
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
  if ( row >= max_lines ) {
    row = max_lines - 1;    // we count rows starting w/0
  }
  if ( row >= _numlines ) {
     db2:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <lcd+0x13>
     db6:	69 17       	cp	r22, r25
     db8:	10 f0       	brcs	.+4      	; 0xdbe <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]+0xc>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:195
    row = _numlines - 1;    // we count rows starting w/0
     dba:	6f ef       	ldi	r22, 0xFF	; 255
     dbc:	69 0f       	add	r22, r25
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:198
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
     dbe:	e6 2f       	mov	r30, r22
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	ea 56       	subi	r30, 0x6A	; 106
     dc4:	fc 4f       	sbci	r31, 0xFC	; 252
     dc6:	94 89       	ldd	r25, Z+20	; 0x14
     dc8:	89 0f       	add	r24, r25
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>

00000dd0 <LiquidCrystal::noBlink() [clone .constprop.31]>:
noBlink():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:223
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}

// Turn on and off the blinking cursor
void LiquidCrystal::noBlink() {
  _displaycontrol &= ~LCD_BLINKON;
     dd0:	e6 e9       	ldi	r30, 0x96	; 150
     dd2:	f3 e0       	ldi	r31, 0x03	; 3
     dd4:	80 89       	ldd	r24, Z+16	; 0x10
     dd6:	8e 7f       	andi	r24, 0xFE	; 254
     dd8:	80 8b       	std	Z+16, r24	; 0x10
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:224
  command(LCD_DISPLAYCONTROL | _displaycontrol);
     dda:	88 60       	ori	r24, 0x08	; 8
     ddc:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>

00000de0 <LiquidCrystal::write(unsigned char)>:
write():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	0e 94 d7 05 	call	0xbae	; 0xbae <LiquidCrystal::send(unsigned char, unsigned char)>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	08 95       	ret

00000dec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>:
print():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:44

size_t Print::print(const __FlashStringHelper *ifsh)
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	8c 01       	movw	r16, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:47
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     df6:	d0 e0       	ldi	r29, 0x00	; 0
     df8:	c0 e0       	ldi	r28, 0x00	; 0
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:49
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     dfa:	f8 01       	movw	r30, r16
     dfc:	ec 0f       	add	r30, r28
     dfe:	fd 1f       	adc	r31, r29
     e00:	64 91       	lpm	r22, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:50
    if (c == 0) break;
     e02:	66 23       	and	r22, r22
     e04:	39 f0       	breq	.+14     	; 0xe14 <Print::print(__FlashStringHelper const*) [clone .constprop.43]+0x28>
write():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
     e06:	41 e0       	ldi	r20, 0x01	; 1
     e08:	86 e9       	ldi	r24, 0x96	; 150
     e0a:	93 e0       	ldi	r25, 0x03	; 3
     e0c:	0e 94 d7 05 	call	0xbae	; 0xbae <LiquidCrystal::send(unsigned char, unsigned char)>
print():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:51
    if (write(c)) n++;
     e10:	21 96       	adiw	r28, 0x01	; 1
     e12:	f3 cf       	rjmp	.-26     	; 0xdfa <Print::print(__FlashStringHelper const*) [clone .constprop.43]+0xe>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:55
    else break;
  }
  return n;
}
     e14:	ce 01       	movw	r24, r28
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <Print::flush()>:
flush():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:65

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     e20:	08 95       	ret

00000e22 <jalali_jd0(int)>:
jalali_jd0():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:21
const PROGMEM int UPPER_GREGORIAN_YEAR = 2945;
int gmonths[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
int jmonths[12] = {31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29};

long jalali_jd0(int jalali_year)
{
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	a4 97       	sbiw	r28, 0x24	; 36
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8c 01       	movw	r16, r24
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:22
    const int breaks[] = {6, 394, 720, 786, 1145, 1635, 1701, 1866, 2328};
     e44:	82 e1       	ldi	r24, 0x12	; 18
     e46:	ea e4       	ldi	r30, 0x4A	; 74
     e48:	f1 e0       	ldi	r31, 0x01	; 1
     e4a:	de 01       	movw	r26, r28
     e4c:	11 96       	adiw	r26, 0x01	; 1
     e4e:	01 90       	ld	r0, Z+
     e50:	0d 92       	st	X+, r0
     e52:	8a 95       	dec	r24
     e54:	e1 f7       	brne	.-8      	; 0xe4e <jalali_jd0(int)+0x2c>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:23
    const int deltas[] = {1249, 952, 891, 930, 866, 869, 844, 848, 852};
     e56:	82 e1       	ldi	r24, 0x12	; 18
     e58:	ec e5       	ldi	r30, 0x5C	; 92
     e5a:	f1 e0       	ldi	r31, 0x01	; 1
     e5c:	de 01       	movw	r26, r28
     e5e:	53 96       	adiw	r26, 0x13	; 19
     e60:	01 90       	ld	r0, Z+
     e62:	0d 92       	st	X+, r0
     e64:	8a 95       	dec	r24
     e66:	e1 f7       	brne	.-8      	; 0xe60 <jalali_jd0(int)+0x3e>
     e68:	fe 01       	movw	r30, r28
     e6a:	31 96       	adiw	r30, 0x01	; 1
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:27
    long rval;
    long l = jalali_year;

    for (int i = 0; i < 9; i++)
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:28
        if (jalali_year < breaks[i])
     e70:	21 91       	ld	r18, Z+
     e72:	31 91       	ld	r19, Z+
     e74:	02 17       	cp	r16, r18
     e76:	13 07       	cpc	r17, r19
     e78:	dc f5       	brge	.+118    	; 0xef0 <jalali_jd0(int)+0xce>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:30
        {
            rval = JALALI_ZERO + l * 365 + (deltas[i] + l * 303) / 1250;
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	e1 e0       	ldi	r30, 0x01	; 1
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	ec 0f       	add	r30, r28
     e84:	fd 1f       	adc	r31, r29
     e86:	e8 0f       	add	r30, r24
     e88:	f9 1f       	adc	r31, r25
     e8a:	c2 88       	ldd	r12, Z+18	; 0x12
     e8c:	d3 88       	ldd	r13, Z+19	; 0x13
     e8e:	0d 2c       	mov	r0, r13
     e90:	00 0c       	add	r0, r0
     e92:	ee 08       	sbc	r14, r14
     e94:	ff 08       	sbc	r15, r15
     e96:	2f e2       	ldi	r18, 0x2F	; 47
     e98:	31 e0       	ldi	r19, 0x01	; 1
     e9a:	d8 01       	movw	r26, r16
     e9c:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <__usmulhisi3>
     ea0:	6c 0d       	add	r22, r12
     ea2:	7d 1d       	adc	r23, r13
     ea4:	8e 1d       	adc	r24, r14
     ea6:	9f 1d       	adc	r25, r15
     ea8:	22 ee       	ldi	r18, 0xE2	; 226
     eaa:	34 e0       	ldi	r19, 0x04	; 4
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__divmodsi4>
     eb4:	69 01       	movw	r12, r18
     eb6:	7a 01       	movw	r14, r20
     eb8:	2d e6       	ldi	r18, 0x6D	; 109
     eba:	31 e0       	ldi	r19, 0x01	; 1
     ebc:	d8 01       	movw	r26, r16
     ebe:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <__usmulhisi3>
     ec2:	6e 5c       	subi	r22, 0xCE	; 206
     ec4:	76 44       	sbci	r23, 0x46	; 70
     ec6:	82 4e       	sbci	r24, 0xE2	; 226
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	6c 0d       	add	r22, r12
     ecc:	7d 1d       	adc	r23, r13
     ece:	8e 1d       	adc	r24, r14
     ed0:	9f 1d       	adc	r25, r15
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:33
            return (rval);
        }
}
     ed2:	a4 96       	adiw	r28, 0x24	; 36
     ed4:	0f b6       	in	r0, 0x3f	; 63
     ed6:	f8 94       	cli
     ed8:	de bf       	out	0x3e, r29	; 62
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	cd bf       	out	0x3d, r28	; 61
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	08 95       	ret
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:27
    const int breaks[] = {6, 394, 720, 786, 1145, 1635, 1701, 1866, 2328};
    const int deltas[] = {1249, 952, 891, 930, 866, 869, 844, 848, 852};
    long rval;
    long l = jalali_year;

    for (int i = 0; i < 9; i++)
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	89 30       	cpi	r24, 0x09	; 9
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f0       	breq	.+2      	; 0xefa <jalali_jd0(int)+0xd8>
     ef8:	bb cf       	rjmp	.-138    	; 0xe70 <jalali_jd0(int)+0x4e>
     efa:	eb cf       	rjmp	.-42     	; 0xed2 <jalali_jd0(int)+0xb0>

00000efc <twi_stop>:
twi_stop():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:436
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     efc:	85 ed       	ldi	r24, 0xD5	; 213
     efe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:456
          return;
        }
      }
    }
  #else
    while(TWCR & _BV(TWSTO)){
     f02:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     f06:	84 fd       	sbrc	r24, 4
     f08:	fc cf       	rjmp	.-8      	; 0xf02 <twi_stop+0x6>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:462
      continue;
    }
  #endif

  // update twi state
  twi_state = TWI_READY;
     f0a:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <twi_state>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:463
}
     f0e:	08 95       	ret

00000f10 <twi_transmit>:
twi_transmit():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:371
uint8_t twi_transmit(const uint8_t* data, uint8_t length)
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
     f10:	20 91 db 01 	lds	r18, 0x01DB	; 0x8001db <twi_txBufferLength>
     f14:	26 0f       	add	r18, r22
     f16:	33 27       	eor	r19, r19
     f18:	33 1f       	adc	r19, r19
     f1a:	21 32       	cpi	r18, 0x21	; 33
     f1c:	31 05       	cpc	r19, r1
     f1e:	ec f4       	brge	.+58     	; 0xf5a <twi_transmit+0x4a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:376
    return 1;
  }

  // ensure we are currently a slave transmitter
  if(TWI_STX != twi_state){
     f20:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <twi_state>
     f24:	fc 01       	movw	r30, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	24 30       	cpi	r18, 0x04	; 4
     f2c:	69 f0       	breq	.+26     	; 0xf48 <twi_transmit+0x38>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:377
    return 2;
     f2e:	82 e0       	ldi	r24, 0x02	; 2
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:387
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;

  return 0;
}
     f30:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:382
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
    twi_txBuffer[twi_txBufferLength+i] = data[i];
     f32:	a0 91 db 01 	lds	r26, 0x01DB	; 0x8001db <twi_txBufferLength>
     f36:	21 91       	ld	r18, Z+
     f38:	ac 01       	movw	r20, r24
     f3a:	45 54       	subi	r20, 0x45	; 69
     f3c:	5e 4f       	sbci	r21, 0xFE	; 254
     f3e:	a4 0f       	add	r26, r20
     f40:	b5 2f       	mov	r27, r21
     f42:	b1 1d       	adc	r27, r1
     f44:	2c 93       	st	X, r18
     f46:	01 96       	adiw	r24, 0x01	; 1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:381
  if(TWI_STX != twi_state){
    return 2;
  }

  // set length and copy data into tx buffer
  for(i = 0; i < length; ++i){
     f48:	86 17       	cp	r24, r22
     f4a:	98 f3       	brcs	.-26     	; 0xf32 <twi_transmit+0x22>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:384
    twi_txBuffer[twi_txBufferLength+i] = data[i];
  }
  twi_txBufferLength += length;
     f4c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <twi_txBufferLength>
     f50:	68 0f       	add	r22, r24
     f52:	60 93 db 01 	sts	0x01DB, r22	; 0x8001db <twi_txBufferLength>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:372
{
  uint8_t i;

  // ensure data will fit into buffer
  if(TWI_BUFFER_SIZE < (twi_txBufferLength+length)){
    return 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	08 95       	ret

00000f5e <TwoWire::flush()>:
flush():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:326
}

void TwoWire::flush(void)
{
  // XXX: to be implemented.
}
     f5e:	08 95       	ret

00000f60 <TwoWire::peek()>:
peek():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:316
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;

  if(rxBufferIndex < rxBufferLength){
     f60:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
     f64:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
     f68:	e8 17       	cp	r30, r24
     f6a:	30 f4       	brcc	.+12     	; 0xf78 <TwoWire::peek()+0x18>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:317
    value = rxBuffer[rxBufferIndex];
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	e4 5a       	subi	r30, 0xA4	; 164
     f70:	fd 4f       	sbci	r31, 0xFD	; 253
     f72:	80 81       	ld	r24, Z
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:314
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  int value = -1;
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	9f ef       	ldi	r25, 0xFF	; 255
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:321
  if(rxBufferIndex < rxBufferLength){
    value = rxBuffer[rxBufferIndex];
  }

  return value;
}
     f7c:	08 95       	ret

00000f7e <TwoWire::write(unsigned char const*, unsigned int)>:
write():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:271

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	7c 01       	movw	r14, r24
     f90:	cb 01       	movw	r24, r22
     f92:	8a 01       	movw	r16, r20
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:272
  if(transmitting){
     f94:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <TwoWire::transmitting>
     f98:	22 23       	and	r18, r18
     f9a:	89 f0       	breq	.+34     	; 0xfbe <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     f9c:	eb 01       	movw	r28, r22
     f9e:	6b 01       	movw	r12, r22
     fa0:	c4 0e       	add	r12, r20
     fa2:	d5 1e       	adc	r13, r21
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:274
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
     fa4:	cc 15       	cp	r28, r12
     fa6:	dd 05       	cpc	r29, r13
     fa8:	69 f0       	breq	.+26     	; 0xfc4 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:275
      write(data[i]);
     faa:	69 91       	ld	r22, Y+
     fac:	d7 01       	movw	r26, r14
     fae:	ed 91       	ld	r30, X+
     fb0:	fc 91       	ld	r31, X
     fb2:	01 90       	ld	r0, Z+
     fb4:	f0 81       	ld	r31, Z
     fb6:	e0 2d       	mov	r30, r0
     fb8:	c7 01       	movw	r24, r14
     fba:	09 95       	icall
     fbc:	f3 cf       	rjmp	.-26     	; 0xfa4 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:280
    }
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(data, quantity);
     fbe:	64 2f       	mov	r22, r20
     fc0:	0e 94 88 07 	call	0xf10	; 0xf10 <twi_transmit>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:283
  }
  return quantity;
}
     fc4:	c8 01       	movw	r24, r16
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	08 95       	ret

00000fd8 <TwoWire::write(unsigned char)>:
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:246

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	1f 92       	push	r1
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	69 83       	std	Y+1, r22	; 0x01
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:247
  if(transmitting){
     fe4:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <TwoWire::transmitting>
     fe8:	22 23       	and	r18, r18
     fea:	f9 f0       	breq	.+62     	; 0x102a <TwoWire::write(unsigned char)+0x52>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:250
  // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= TWI_BUFFER_SIZE){
     fec:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <TwoWire::txBufferLength>
     ff0:	20 32       	cpi	r18, 0x20	; 32
     ff2:	58 f0       	brcs	.+22     	; 0x100a <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
     ff4:	21 e0       	ldi	r18, 0x01	; 1
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	fc 01       	movw	r30, r24
     ffa:	33 83       	std	Z+3, r19	; 0x03
     ffc:	22 83       	std	Z+2, r18	; 0x02
write():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:252
      setWriteError();
      return 0;
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	80 e0       	ldi	r24, 0x00	; 0
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:265
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
}
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:255
    if(txBufferLength >= TWI_BUFFER_SIZE){
      setWriteError();
      return 0;
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
    100a:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <TwoWire::txBufferIndex>
    100e:	e8 2f       	mov	r30, r24
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	ef 5c       	subi	r30, 0xCF	; 207
    1014:	fd 4f       	sbci	r31, 0xFD	; 253
    1016:	99 81       	ldd	r25, Y+1	; 0x01
    1018:	90 83       	st	Z, r25
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:256
    ++txBufferIndex;
    101a:	8f 5f       	subi	r24, 0xFF	; 255
    101c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:258
    // update amount in buffer
    txBufferLength = txBufferIndex;
    1020:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <TwoWire::txBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:264
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
  }
  return 1;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	ec cf       	rjmp	.-40     	; 0x1002 <TwoWire::write(unsigned char)+0x2a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:262
    // update amount in buffer
    txBufferLength = txBufferIndex;
  }else{
  // in slave send mode
    // reply to master
    twi_transmit(&data, 1);
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	0e 94 88 07 	call	0xf10	; 0xf10 <twi_transmit>
    1034:	f7 cf       	rjmp	.-18     	; 0x1024 <TwoWire::write(unsigned char)+0x4c>

00001036 <TwoWire::write(int) [clone .constprop.54]>:
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.h:87
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1036:	68 2f       	mov	r22, r24
    1038:	8b e1       	ldi	r24, 0x1B	; 27
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <TwoWire::write(unsigned char)>

00001040 <Print::availableForWrite()>:
availableForWrite():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:63
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	08 95       	ret

00001046 <execute_CMD(unsigned char, unsigned char, unsigned char)>:
execute_CMD():
/home/whisper/Arduino/Azangoo/functions.ino:140
}


void execute_CMD(byte CMD, byte Par1, byte Par2)
// Excecute the command and parameters
{
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	2a 97       	sbiw	r28, 0x0a	; 10
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
/home/whisper/Arduino/Azangoo/functions.ino:144
  // Calculate the checksum (2 bytes)
  word checksum = -(Version_Byte + Command_Length + CMD + Acknowledge + Par1 + Par2);
  // Build the command line
  byte Command_line[10] = { Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge,
    1062:	1e 82       	std	Y+6, r1	; 0x06
    1064:	1d 82       	std	Y+5, r1	; 0x05
    1066:	9e e7       	ldi	r25, 0x7E	; 126
    1068:	99 83       	std	Y+1, r25	; 0x01
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	96 e0       	ldi	r25, 0x06	; 6
    1070:	9b 83       	std	Y+3, r25	; 0x03
    1072:	9f ee       	ldi	r25, 0xEF	; 239
    1074:	9a 87       	std	Y+10, r25	; 0x0a
/home/whisper/Arduino/Azangoo/functions.ino:146
                            Par1, Par2, highByte(checksum), lowByte(checksum), End_Byte
                          };
    1076:	8c 83       	std	Y+4, r24	; 0x04
    1078:	6e 83       	std	Y+6, r22	; 0x06
    107a:	4f 83       	std	Y+7, r20	; 0x07
    107c:	9e ef       	ldi	r25, 0xFE	; 254
    107e:	98 87       	std	Y+8, r25	; 0x08
/home/whisper/Arduino/Azangoo/functions.ino:142

void execute_CMD(byte CMD, byte Par1, byte Par2)
// Excecute the command and parameters
{
  // Calculate the checksum (2 bytes)
  word checksum = -(Version_Byte + Command_Length + CMD + Acknowledge + Par1 + Par2);
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	8b 5f       	subi	r24, 0xFB	; 251
    1084:	9e 4f       	sbci	r25, 0xFE	; 254
    1086:	86 0f       	add	r24, r22
    1088:	91 1d       	adc	r25, r1
    108a:	48 0f       	add	r20, r24
    108c:	59 2f       	mov	r21, r25
    108e:	51 1d       	adc	r21, r1
    1090:	51 95       	neg	r21
    1092:	41 95       	neg	r20
    1094:	51 09       	sbc	r21, r1
/home/whisper/Arduino/Azangoo/functions.ino:146
  // Build the command line
  byte Command_line[10] = { Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge,
                            Par1, Par2, highByte(checksum), lowByte(checksum), End_Byte
                          };
    1096:	49 87       	std	Y+9, r20	; 0x09
    1098:	8e 01       	movw	r16, r28
    109a:	0f 5f       	subi	r16, 0xFF	; 255
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	7e 01       	movw	r14, r28
    10a0:	8b e0       	ldi	r24, 0x0B	; 11
    10a2:	e8 0e       	add	r14, r24
    10a4:	f1 1c       	adc	r15, r1
/home/whisper/Arduino/Azangoo/functions.ino:150
  //Send the command line to the module
  for (byte k = 0; k < 10; k++)
  {
    Serial.write( Command_line[k]);
    10a6:	f8 01       	movw	r30, r16
    10a8:	61 91       	ld	r22, Z+
    10aa:	8f 01       	movw	r16, r30
    10ac:	8e e7       	ldi	r24, 0x7E	; 126
    10ae:	92 e0       	ldi	r25, 0x02	; 2
    10b0:	0e 94 16 02 	call	0x42c	; 0x42c <HardwareSerial::write(unsigned char)>
/home/whisper/Arduino/Azangoo/functions.ino:148
  // Build the command line
  byte Command_line[10] = { Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge,
                            Par1, Par2, highByte(checksum), lowByte(checksum), End_Byte
                          };
  //Send the command line to the module
  for (byte k = 0; k < 10; k++)
    10b4:	e0 16       	cp	r14, r16
    10b6:	f1 06       	cpc	r15, r17
    10b8:	b1 f7       	brne	.-20     	; 0x10a6 <execute_CMD(unsigned char, unsigned char, unsigned char)+0x60>
/home/whisper/Arduino/Azangoo/functions.ino:152
  {
    Serial.write( Command_line[k]);
  }
}
    10ba:	2a 96       	adiw	r28, 0x0a	; 10
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	08 95       	ret

000010d4 <TwoWire::requestFrom(int, int) [clone .constprop.56]>:
twi_readFrom():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:177
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_READY != twi_state){
    10d4:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <twi_state>
    10d8:	91 11       	cpse	r25, r1
    10da:	fc cf       	rjmp	.-8      	; 0x10d4 <TwoWire::requestFrom(int, int) [clone .constprop.56]>
    10dc:	61 32       	cpi	r22, 0x21	; 33
    10de:	08 f0       	brcs	.+2      	; 0x10e2 <TwoWire::requestFrom(int, int) [clone .constprop.56]+0xe>
    10e0:	60 e2       	ldi	r22, 0x20	; 32
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:181
      continue;
    }
  #endif
  twi_state = TWI_MRX;
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <twi_state>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:182
  twi_sendStop = sendStop;
    10e8:	90 93 5a 02 	sts	0x025A, r25	; 0x80025a <twi_sendStop>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:184
  // reset error state (0xFF.. no error occurred)
  twi_error = 0xFF;
    10ec:	2f ef       	ldi	r18, 0xFF	; 255
    10ee:	20 93 59 02 	sts	0x0259, r18	; 0x800259 <twi_error>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:187

  // initialize buffer iteration vars
  twi_masterBuffer = data;
    10f2:	2c e5       	ldi	r18, 0x5C	; 92
    10f4:	32 e0       	ldi	r19, 0x02	; 2
    10f6:	30 93 58 02 	sts	0x0258, r19	; 0x800258 <twi_masterBuffer+0x1>
    10fa:	20 93 57 02 	sts	0x0257, r18	; 0x800257 <twi_masterBuffer>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:188
  twi_masterBufferIndex = 0;
    10fe:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <twi_masterBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:189
  twi_masterBufferLength = length-1;  // This is not intuitive, read on...
    1102:	2f ef       	ldi	r18, 0xFF	; 255
    1104:	26 0f       	add	r18, r22
    1106:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <twi_masterBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:197
  // Therefore we must actually set NACK when the _next_ to last byte is
  // received, causing that NACK to be sent in response to receiving the last
  // expected byte of data.

  // build sla+w, slave device address + w bit
  twi_slarw = TW_READ;
    110a:	90 93 54 02 	sts	0x0254, r25	; 0x800254 <twi_slarw>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:198
  twi_slarw |= address << 1;
    110e:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <twi_slarw>
    1112:	88 0f       	add	r24, r24
    1114:	89 2b       	or	r24, r25
    1116:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <twi_slarw>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:200

  if (true == twi_inRepStart) {
    111a:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <twi_inRepStart>
    111e:	81 30       	cpi	r24, 0x01	; 1
    1120:	e9 f4       	brne	.+58     	; 0x115c <TwoWire::requestFrom(int, int) [clone .constprop.56]+0x88>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:207
    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.
    // We need to remove ourselves from the repeated start state before we enable interrupts,
    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning
    // up. Also, don't enable the START interrupt. There may be one pending from the
    // repeated start that we sent ourselves, and that would really confuse things.
    twi_inRepStart = false; // Remember, we're dealing with an ASYNC ISR
    1122:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <twi_inRepStart>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:219
          return 0;
        }
      } while(TWCR & _BV(TWWC));
    #else
      do {
        TWDR = twi_slarw;
    1126:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <twi_slarw>
    112a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:220
      } while(TWCR & _BV(TWWC));
    112e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    1132:	83 fd       	sbrc	r24, 3
    1134:	f8 cf       	rjmp	.-16     	; 0x1126 <TwoWire::requestFrom(int, int) [clone .constprop.56]+0x52>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:222
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
    1136:	85 ec       	ldi	r24, 0xC5	; 197
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:226
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    1138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:238
        twi_handleTimeout(twi_do_reset_on_timeout);
        return 0;
      }
    }
  #else
    while(TWI_MRX == twi_state){
    113c:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi_state>
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	e1 f3       	breq	.-8      	; 0x113c <TwoWire::requestFrom(int, int) [clone .constprop.56]+0x68>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:243
      continue;
    }
  #endif

  if (twi_masterBufferIndex < length)
    1144:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi_masterBufferIndex>
    1148:	86 17       	cp	r24, r22
    114a:	10 f4       	brcc	.+4      	; 0x1150 <TwoWire::requestFrom(int, int) [clone .constprop.56]+0x7c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:244
    length = twi_masterBufferIndex;
    114c:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <twi_masterBufferIndex>
requestFrom():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:120
    quantity = TWI_BUFFER_SIZE;
  }
  // perform blocking read into buffer
  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);
  // set rx buffer iterator vars
  rxBufferIndex = 0;
    1150:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <TwoWire::rxBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:121
  rxBufferLength = read;
    1154:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <TwoWire::rxBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:186
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}
    1158:	86 2f       	mov	r24, r22
    115a:	08 95       	ret
twi_readFrom():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:226
    #endif
    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);  // enable INTs, but not START
  }
  else
    // send start condition
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);
    115c:	85 ee       	ldi	r24, 0xE5	; 229
    115e:	ec cf       	rjmp	.-40     	; 0x1138 <TwoWire::requestFrom(int, int) [clone .constprop.56]+0x64>

00001160 <uRTCLib::refresh() [clone .constprop.52]>:
refresh():
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:73
}

/**
 * \brief Refresh data from HW RTC
 */
void uRTCLib::refresh() {
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
beginTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1164:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <rtc>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <TwoWire::transmitting>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    116e:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <TwoWire::txAddress>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1172:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    1176:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <TwoWire::txBufferLength>
refresh():
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:76
	uRTCLIB_YIELD
	URTCLIB_WIRE.beginTransmission(_rtc_address);
	URTCLIB_WIRE.write(0); // set DS3231 register pointer to 00h
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:77
	URTCLIB_WIRE.endTransmission();
    1182:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TwoWire::endTransmission() [clone .constprop.55]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:81
	uRTCLIB_YIELD

	// Adjust requested bytes to selected model:
	switch (_model) {
    1186:	20 91 b9 03 	lds	r18, 0x03B9	; 0x8003b9 <rtc+0xb>
    118a:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <rtc>
    118e:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <rtc+0x1>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:83
		case URTCLIB_MODEL_DS1307:
			URTCLIB_WIRE.requestFrom(_rtc_address, 8);
    1192:	68 e0       	ldi	r22, 0x08	; 8
    1194:	70 e0       	ldi	r23, 0x00	; 0
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:81
	URTCLIB_WIRE.write(0); // set DS3231 register pointer to 00h
	URTCLIB_WIRE.endTransmission();
	uRTCLIB_YIELD

	// Adjust requested bytes to selected model:
	switch (_model) {
    1196:	21 30       	cpi	r18, 0x01	; 1
    1198:	11 f0       	breq	.+4      	; 0x119e <uRTCLib::refresh() [clone .constprop.52]+0x3e>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:89
			break;

		// case URTCLIB_MODEL_DS3231: // Commented out because it's default mode
		// case URTCLIB_MODEL_DS3232: // Commented out because it's default mode
		default:
			URTCLIB_WIRE.requestFrom(_rtc_address, 19);
    119a:	63 e1       	ldi	r22, 0x13	; 19
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TwoWire::requestFrom(int, int) [clone .constprop.56]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:93
			break;
	}
	// 0x00h
	_second = URTCLIB_WIRE.read() & 0b01111111;
    11a2:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:95
	uRTCLIB_YIELD
	_second = uRTCLIB_bcdToDec(_second);
    11a6:	98 2f       	mov	r25, r24
    11a8:	92 95       	swap	r25
    11aa:	97 70       	andi	r25, 0x07	; 7
    11ac:	ca e0       	ldi	r28, 0x0A	; 10
    11ae:	8f 70       	andi	r24, 0x0F	; 15
    11b0:	9c 9f       	mul	r25, r28
    11b2:	80 0d       	add	r24, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <rtc+0x2>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:98

	// 0x01h
	_minute = URTCLIB_WIRE.read() & 0b01111111;
    11ba:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:100
	uRTCLIB_YIELD
	_minute = uRTCLIB_bcdToDec(_minute);
    11be:	98 2f       	mov	r25, r24
    11c0:	92 95       	swap	r25
    11c2:	97 70       	andi	r25, 0x07	; 7
    11c4:	8f 70       	andi	r24, 0x0F	; 15
    11c6:	9c 9f       	mul	r25, r28
    11c8:	80 0d       	add	r24, r0
    11ca:	11 24       	eor	r1, r1
    11cc:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <rtc+0x3>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:103

	// 0x02h
	_hour = URTCLIB_WIRE.read() & 0b00111111;
    11d0:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:105
	uRTCLIB_YIELD
	_hour = uRTCLIB_bcdToDec(_hour);
    11d4:	98 2f       	mov	r25, r24
    11d6:	92 95       	swap	r25
    11d8:	93 70       	andi	r25, 0x03	; 3
    11da:	8f 70       	andi	r24, 0x0F	; 15
    11dc:	9c 9f       	mul	r25, r28
    11de:	80 0d       	add	r24, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <rtc+0x4>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:108

	// 0x03h
	_dayOfWeek = URTCLIB_WIRE.read();
    11e6:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:110
	uRTCLIB_YIELD
	_dayOfWeek = uRTCLIB_bcdToDec(_dayOfWeek);
    11ea:	98 2f       	mov	r25, r24
    11ec:	92 95       	swap	r25
    11ee:	9f 70       	andi	r25, 0x0F	; 15
    11f0:	8f 70       	andi	r24, 0x0F	; 15
    11f2:	9c 9f       	mul	r25, r28
    11f4:	80 0d       	add	r24, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <rtc+0x8>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:113

	// 0x04h
	_day = URTCLIB_WIRE.read();
    11fc:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:115
	uRTCLIB_YIELD
	_day = uRTCLIB_bcdToDec(_day);
    1200:	98 2f       	mov	r25, r24
    1202:	92 95       	swap	r25
    1204:	9f 70       	andi	r25, 0x0F	; 15
    1206:	8f 70       	andi	r24, 0x0F	; 15
    1208:	9c 9f       	mul	r25, r28
    120a:	80 0d       	add	r24, r0
    120c:	11 24       	eor	r1, r1
    120e:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <rtc+0x5>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:118

	// 0x05h
	_month = URTCLIB_WIRE.read() & 0b00011111;
    1212:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:120
	uRTCLIB_YIELD
	_month = uRTCLIB_bcdToDec(_month);
    1216:	84 fb       	bst	r24, 4
    1218:	99 27       	eor	r25, r25
    121a:	90 f9       	bld	r25, 0
    121c:	8f 70       	andi	r24, 0x0F	; 15
    121e:	9c 9f       	mul	r25, r28
    1220:	80 0d       	add	r24, r0
    1222:	11 24       	eor	r1, r1
    1224:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <rtc+0x6>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:123

	// 0x06h
	_year = URTCLIB_WIRE.read();
    1228:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:125
	uRTCLIB_YIELD
	_year = uRTCLIB_bcdToDec(_year);
    122c:	98 2f       	mov	r25, r24
    122e:	92 95       	swap	r25
    1230:	9f 70       	andi	r25, 0x0F	; 15
    1232:	8f 70       	andi	r24, 0x0F	; 15
    1234:	9c 9f       	mul	r25, r28
    1236:	80 0d       	add	r24, r0
    1238:	11 24       	eor	r1, r1
    123a:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <rtc+0x7>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:127

	_temp = URTCLIB_TEMP_ERROR; // Some obvious error value
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	9f e7       	ldi	r25, 0x7F	; 127
    1242:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <rtc+0xa>
    1246:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <rtc+0x9>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:130

	// Now we need to read extra requested bytes depending on the RTC model again:
	switch (_model) {
    124a:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <rtc+0xb>
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	b9 f4       	brne	.+46     	; 0x1280 <uRTCLib::refresh() [clone .constprop.52]+0x120>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:134
		case URTCLIB_MODEL_DS1307:
			uint8_t status;
			// 0x07h
			status = URTCLIB_WIRE.read();
    1252:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:135
			if (status & 0b00010000) {
    1256:	84 ff       	sbrs	r24, 4
    1258:	0a c0       	rjmp	.+20     	; 0x126e <uRTCLib::refresh() [clone .constprop.52]+0x10e>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:136
				_sqwg_mode = status & 0b10000000 ? URTCLIB_SQWG_OFF_1 : URTCLIB_SQWG_OFF_0;
    125a:	87 fd       	sbrc	r24, 7
    125c:	06 c0       	rjmp	.+12     	; 0x126a <uRTCLib::refresh() [clone .constprop.52]+0x10a>
    125e:	8f ef       	ldi	r24, 0xFF	; 255
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:148
					case 0x00000010:
						_sqwg_mode = URTCLIB_SQWG_8192H;
						break;

					case 0x00000001:
						_sqwg_mode = URTCLIB_SQWG_4096H;
    1260:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <rtc+0x18>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:281
				_temp--;
			}
			_temp = _temp * 25; // *25 is the same as number + 2bit (decimals) * 100 in base 10
			break;
	}
}
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:136
		case URTCLIB_MODEL_DS1307:
			uint8_t status;
			// 0x07h
			status = URTCLIB_WIRE.read();
			if (status & 0b00010000) {
				_sqwg_mode = status & 0b10000000 ? URTCLIB_SQWG_OFF_1 : URTCLIB_SQWG_OFF_0;
    126a:	8e ef       	ldi	r24, 0xFE	; 254
    126c:	f9 cf       	rjmp	.-14     	; 0x1260 <uRTCLib::refresh() [clone .constprop.52]+0x100>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:138
			} else {
				switch (status & 0b00000011) {
    126e:	83 70       	andi	r24, 0x03	; 3
    1270:	99 27       	eor	r25, r25
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	11 f4       	brne	.+4      	; 0x127a <uRTCLib::refresh() [clone .constprop.52]+0x11a>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:148
					case 0x00000010:
						_sqwg_mode = URTCLIB_SQWG_8192H;
						break;

					case 0x00000001:
						_sqwg_mode = URTCLIB_SQWG_4096H;
    1276:	80 e1       	ldi	r24, 0x10	; 16
    1278:	f3 cf       	rjmp	.-26     	; 0x1260 <uRTCLib::refresh() [clone .constprop.52]+0x100>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:153
						break;

					// case 0x00000000:
					default:
						_sqwg_mode = URTCLIB_SQWG_1H;
    127a:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <rtc+0x18>
    127e:	f2 cf       	rjmp	.-28     	; 0x1264 <uRTCLib::refresh() [clone .constprop.52]+0x104>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:164
		// case URTCLIB_MODEL_DS3231: // Commented out because it's default mode
		// case URTCLIB_MODEL_DS3232: // Commented out because it's default mode
		default:
			uint8_t MSB, LSB; // LSB is also used as tmp  variable

			_a1_mode = URTCLIB_ALARM_TYPE_1_NONE;
    1280:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <rtc+0xc>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:165
			_a2_mode = URTCLIB_ALARM_TYPE_2_NONE;
    1284:	80 e8       	ldi	r24, 0x80	; 128
    1286:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <rtc+0x12>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:168

			// 0x07h
			_a1_second = URTCLIB_WIRE.read();
    128a:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:170
			uRTCLIB_YIELD
			_a1_mode = _a1_mode | ((_a1_second & 0b10000000) >> 7);
    128e:	28 2f       	mov	r18, r24
    1290:	22 1f       	adc	r18, r18
    1292:	22 27       	eor	r18, r18
    1294:	22 1f       	adc	r18, r18
    1296:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <rtc+0xc>
    129a:	92 2b       	or	r25, r18
    129c:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <rtc+0xc>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:171
			_a1_second = uRTCLIB_bcdToDec((_a1_second & 0b01111111));   //parentheses for bitwise operation as argument for uRTCLIB_bcdToDec is required
    12a0:	98 2f       	mov	r25, r24
    12a2:	92 95       	swap	r25
    12a4:	97 70       	andi	r25, 0x07	; 7
    12a6:	8f 70       	andi	r24, 0x0F	; 15
    12a8:	9c 9f       	mul	r25, r28
    12aa:	80 0d       	add	r24, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <rtc+0xd>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:175
																		//otherwise wrong result will be returned by function

			// 0x08h
			_a1_minute = URTCLIB_WIRE.read();
    12b2:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:177
			uRTCLIB_YIELD
			_a1_mode = _a1_mode | ((_a1_minute & 0b10000000) >> 6);
    12b6:	9c 01       	movw	r18, r24
    12b8:	b6 e0       	ldi	r27, 0x06	; 6
    12ba:	35 95       	asr	r19
    12bc:	27 95       	ror	r18
    12be:	ba 95       	dec	r27
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <uRTCLib::refresh() [clone .constprop.52]+0x15a>
    12c2:	22 70       	andi	r18, 0x02	; 2
    12c4:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <rtc+0xc>
    12c8:	29 2b       	or	r18, r25
    12ca:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <rtc+0xc>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:178
			_a1_minute = uRTCLIB_bcdToDec((_a1_minute & 0b01111111));
    12ce:	98 2f       	mov	r25, r24
    12d0:	92 95       	swap	r25
    12d2:	97 70       	andi	r25, 0x07	; 7
    12d4:	8f 70       	andi	r24, 0x0F	; 15
    12d6:	9c 9f       	mul	r25, r28
    12d8:	80 0d       	add	r24, r0
    12da:	11 24       	eor	r1, r1
    12dc:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <rtc+0xe>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:181

			// 0x09h
			_a1_hour = URTCLIB_WIRE.read();
    12e0:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:183
			uRTCLIB_YIELD
			_a1_mode = _a1_mode | ((_a1_hour & 0b10000000) >> 5);
    12e4:	9c 01       	movw	r18, r24
    12e6:	d5 e0       	ldi	r29, 0x05	; 5
    12e8:	35 95       	asr	r19
    12ea:	27 95       	ror	r18
    12ec:	da 95       	dec	r29
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <uRTCLib::refresh() [clone .constprop.52]+0x188>
    12f0:	24 70       	andi	r18, 0x04	; 4
    12f2:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <rtc+0xc>
    12f6:	29 2b       	or	r18, r25
    12f8:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <rtc+0xc>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:184
			_a1_hour = uRTCLIB_bcdToDec((_a1_hour & 0b00111111));
    12fc:	98 2f       	mov	r25, r24
    12fe:	92 95       	swap	r25
    1300:	93 70       	andi	r25, 0x03	; 3
    1302:	8f 70       	andi	r24, 0x0F	; 15
    1304:	9c 9f       	mul	r25, r28
    1306:	80 0d       	add	r24, r0
    1308:	11 24       	eor	r1, r1
    130a:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <rtc+0xf>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:187

			// 0x0Ah
			_a1_day_dow = URTCLIB_WIRE.read();
    130e:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:189
			uRTCLIB_YIELD
			_a1_mode = _a1_mode | ((_a1_day_dow & 0b10000000) >> 4);
    1312:	9c 01       	movw	r18, r24
    1314:	44 e0       	ldi	r20, 0x04	; 4
    1316:	35 95       	asr	r19
    1318:	27 95       	ror	r18
    131a:	4a 95       	dec	r20
    131c:	e1 f7       	brne	.-8      	; 0x1316 <uRTCLib::refresh() [clone .constprop.52]+0x1b6>
    131e:	28 70       	andi	r18, 0x08	; 8
    1320:	30 91 ba 03 	lds	r19, 0x03BA	; 0x8003ba <rtc+0xc>
    1324:	23 2b       	or	r18, r19
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:190
			if (!(_a1_mode & 0b00001111)) {
    1326:	32 2f       	mov	r19, r18
    1328:	3f 70       	andi	r19, 0x0F	; 15
    132a:	09 f4       	brne	.+2      	; 0x132e <uRTCLib::refresh() [clone .constprop.52]+0x1ce>
    132c:	c3 c0       	rjmp	.+390    	; 0x14b4 <uRTCLib::refresh() [clone .constprop.52]+0x354>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:191
				_a1_mode = _a1_mode | ((_a1_day_dow & 0b01000000) >> 2);
    132e:	20 93 ba 03 	sts	0x03BA, r18	; 0x8003ba <rtc+0xc>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:194
			}
			_a1_day_dow = _a1_day_dow & 0b00111111;
			_a1_day_dow = uRTCLIB_bcdToDec(_a1_day_dow);
    1332:	98 2f       	mov	r25, r24
    1334:	92 95       	swap	r25
    1336:	93 70       	andi	r25, 0x03	; 3
    1338:	ca e0       	ldi	r28, 0x0A	; 10
    133a:	8f 70       	andi	r24, 0x0F	; 15
    133c:	9c 9f       	mul	r25, r28
    133e:	80 0d       	add	r24, r0
    1340:	11 24       	eor	r1, r1
    1342:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <rtc+0x10>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:197

			// 0x0Bh
			_a2_minute = URTCLIB_WIRE.read();
    1346:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:199
			uRTCLIB_YIELD
			_a2_mode = _a2_mode | ((_a2_minute & 0b10000000) >> 6);
    134a:	9c 01       	movw	r18, r24
    134c:	76 e0       	ldi	r23, 0x06	; 6
    134e:	35 95       	asr	r19
    1350:	27 95       	ror	r18
    1352:	7a 95       	dec	r23
    1354:	e1 f7       	brne	.-8      	; 0x134e <uRTCLib::refresh() [clone .constprop.52]+0x1ee>
    1356:	22 70       	andi	r18, 0x02	; 2
    1358:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <rtc+0x12>
    135c:	29 2b       	or	r18, r25
    135e:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <rtc+0x12>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:201
			_a2_minute = _a2_minute & 0b01111111;
			_a2_minute = uRTCLIB_bcdToDec(_a2_minute);
    1362:	98 2f       	mov	r25, r24
    1364:	92 95       	swap	r25
    1366:	97 70       	andi	r25, 0x07	; 7
    1368:	8f 70       	andi	r24, 0x0F	; 15
    136a:	9c 9f       	mul	r25, r28
    136c:	80 0d       	add	r24, r0
    136e:	11 24       	eor	r1, r1
    1370:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <rtc+0x13>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:204

			// 0x0Ch
			_a2_hour = URTCLIB_WIRE.read();
    1374:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:206
			uRTCLIB_YIELD
			_a2_mode = _a2_mode | ((_a2_hour & 0b10000000) >> 5);
    1378:	9c 01       	movw	r18, r24
    137a:	e5 e0       	ldi	r30, 0x05	; 5
    137c:	35 95       	asr	r19
    137e:	27 95       	ror	r18
    1380:	ea 95       	dec	r30
    1382:	e1 f7       	brne	.-8      	; 0x137c <uRTCLib::refresh() [clone .constprop.52]+0x21c>
    1384:	24 70       	andi	r18, 0x04	; 4
    1386:	90 91 c0 03 	lds	r25, 0x03C0	; 0x8003c0 <rtc+0x12>
    138a:	29 2b       	or	r18, r25
    138c:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <rtc+0x12>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:208
			_a2_hour = _a2_hour & 0b00111111;
			_a2_hour = uRTCLIB_bcdToDec(_a2_hour);
    1390:	98 2f       	mov	r25, r24
    1392:	92 95       	swap	r25
    1394:	93 70       	andi	r25, 0x03	; 3
    1396:	8f 70       	andi	r24, 0x0F	; 15
    1398:	9c 9f       	mul	r25, r28
    139a:	80 0d       	add	r24, r0
    139c:	11 24       	eor	r1, r1
    139e:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <rtc+0x14>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:211

			// 0x0Dh
			_a2_day_dow = URTCLIB_WIRE.read();
    13a2:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:213
			uRTCLIB_YIELD
			_a2_mode = _a2_mode | ((_a2_day_dow & 0b10000000) >> 4);
    13a6:	9c 01       	movw	r18, r24
    13a8:	f4 e0       	ldi	r31, 0x04	; 4
    13aa:	35 95       	asr	r19
    13ac:	27 95       	ror	r18
    13ae:	fa 95       	dec	r31
    13b0:	e1 f7       	brne	.-8      	; 0x13aa <uRTCLib::refresh() [clone .constprop.52]+0x24a>
    13b2:	28 70       	andi	r18, 0x08	; 8
    13b4:	30 91 c0 03 	lds	r19, 0x03C0	; 0x8003c0 <rtc+0x12>
    13b8:	23 2b       	or	r18, r19
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:214
			if (!(_a2_mode & 0b00001110)) { // M4-M2 is 0, check DT/DY
    13ba:	32 2f       	mov	r19, r18
    13bc:	3e 70       	andi	r19, 0x0E	; 14
    13be:	09 f4       	brne	.+2      	; 0x13c2 <uRTCLib::refresh() [clone .constprop.52]+0x262>
    13c0:	81 c0       	rjmp	.+258    	; 0x14c4 <uRTCLib::refresh() [clone .constprop.52]+0x364>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:215
				_a2_mode = _a2_mode | ((_a2_day_dow & 0b01000000) >> 2);
    13c2:	20 93 c0 03 	sts	0x03C0, r18	; 0x8003c0 <rtc+0x12>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:217
			}
			_a2_day_dow = uRTCLIB_bcdToDec(_a2_day_dow & 0b00111111);
    13c6:	98 2f       	mov	r25, r24
    13c8:	9e 71       	andi	r25, 0x1E	; 30
    13ca:	8f 70       	andi	r24, 0x0F	; 15
    13cc:	89 0f       	add	r24, r25
    13ce:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <rtc+0x15>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:222


			// Control registers
			// 0x0Eh
			LSB = URTCLIB_WIRE.read();
    13d2:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:225
			uRTCLIB_YIELD

			if (LSB & 0b00000100) {
    13d6:	82 ff       	sbrs	r24, 2
    13d8:	80 c0       	rjmp	.+256    	; 0x14da <uRTCLib::refresh() [clone .constprop.52]+0x37a>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:226
				_sqwg_mode = URTCLIB_SQWG_OFF_1;
    13da:	9e ef       	ldi	r25, 0xFE	; 254
    13dc:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <rtc+0x18>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:228
				// Alarms disabled?
				if (LSB & 0b00000001) {
    13e0:	80 ff       	sbrs	r24, 0
    13e2:	78 c0       	rjmp	.+240    	; 0x14d4 <uRTCLib::refresh() [clone .constprop.52]+0x374>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:229
					_a1_mode |= 0b00100000;
    13e4:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <rtc+0xc>
    13e8:	90 62       	ori	r25, 0x20	; 32
    13ea:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <rtc+0xc>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:233
				} else {
					_a1_mode = URTCLIB_ALARM_TYPE_1_NONE;
				}
				if (LSB & 0b00000010) {
    13ee:	81 ff       	sbrs	r24, 1
    13f0:	79 c0       	rjmp	.+242    	; 0x14e4 <uRTCLib::refresh() [clone .constprop.52]+0x384>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:234
					_a2_mode |= 0b00100000;
    13f2:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <rtc+0x12>
    13f6:	80 62       	ori	r24, 0x20	; 32
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:242
				}
			} else {
				_sqwg_mode = LSB & 0b00011000;
				// Mark alarms as disabled because the SQWG:
				_a1_mode = URTCLIB_ALARM_TYPE_1_NONE;
				_a2_mode = URTCLIB_ALARM_TYPE_2_NONE;
    13f8:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <rtc+0x12>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:248
			}



			// 0x0Fh
			LSB = URTCLIB_WIRE.read(); //Control
    13fc:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
    1400:	fc 01       	movw	r30, r24
    1402:	b8 2f       	mov	r27, r24
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:251
			uRTCLIB_YIELD

			_lost_power = (bool) (LSB & 0x10000000b);
    1404:	28 2f       	mov	r18, r24
    1406:	2b 70       	andi	r18, 0x0B	; 11
    1408:	c1 e0       	ldi	r28, 0x01	; 1
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	0e 94 92 1d 	call	0x3b24	; 0x3b24 <__cmpdi2_s8>
    141e:	09 f4       	brne	.+2      	; 0x1422 <uRTCLib::refresh() [clone .constprop.52]+0x2c2>
    1420:	c0 e0       	ldi	r28, 0x00	; 0
    1422:	c0 93 c7 03 	sts	0x03C7, r28	; 0x8003c7 <rtc+0x19>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:252
			_32k = (bool) (LSB & 0x00001000b);
    1426:	bb 70       	andi	r27, 0x0B	; 11
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	09 f4       	brne	.+2      	; 0x142e <uRTCLib::refresh() [clone .constprop.52]+0x2ce>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <rtc+0x1a>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:253
			_a2_triggered_flag = (bool) (LSB & 0x00000010b);
    1432:	21 e0       	ldi	r18, 0x01	; 1
    1434:	cf 01       	movw	r24, r30
    1436:	8b 70       	andi	r24, 0x0B	; 11
    1438:	99 27       	eor	r25, r25
    143a:	89 2b       	or	r24, r25
    143c:	09 f4       	brne	.+2      	; 0x1440 <uRTCLib::refresh() [clone .constprop.52]+0x2e0>
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	20 93 c4 03 	sts	0x03C4, r18	; 0x8003c4 <rtc+0x16>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:254
			_a1_triggered_flag = (bool) (LSB & 0x00000001b);
    1444:	eb 71       	andi	r30, 0x1B	; 27
    1446:	ff 27       	eor	r31, r31
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	ef 2b       	or	r30, r31
    144c:	09 f4       	brne	.+2      	; 0x1450 <uRTCLib::refresh() [clone .constprop.52]+0x2f0>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <rtc+0x11>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:258


			// 0x10h
			_aging = URTCLIB_WIRE.read(); //Aging
    1454:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:260
			uRTCLIB_YIELD
			if (_aging & 0b10000000) {
    1458:	87 fd       	sbrc	r24, 7
    145a:	46 c0       	rjmp	.+140    	; 0x14e8 <uRTCLib::refresh() [clone .constprop.52]+0x388>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:261
				_aging--;
    145c:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <rtc+0x17>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:268


			// Temperature registers (11h-12h) get updated automatically every 64s

			// 0x11h
			MSB = URTCLIB_WIRE.read(); //2's complement int portion
    1460:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
    1464:	ec 01       	movw	r28, r24
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:271
			uRTCLIB_YIELD
			// 0x12h
			LSB = URTCLIB_WIRE.read(); //fraction portion
    1466:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:273
			uRTCLIB_YIELD
			_temp = 0b0000000000000000 | (MSB  << 2) | (LSB >> 6); // 8+2 bits, *25 is the same as number + 2bitdecimals * 100 in base 10
    146a:	9e 01       	movw	r18, r28
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	2c 7f       	andi	r18, 0xFC	; 252
    1476:	33 70       	andi	r19, 0x03	; 3
    1478:	56 e0       	ldi	r21, 0x06	; 6
    147a:	95 95       	asr	r25
    147c:	87 95       	ror	r24
    147e:	5a 95       	dec	r21
    1480:	e1 f7       	brne	.-8      	; 0x147a <uRTCLib::refresh() [clone .constprop.52]+0x31a>
    1482:	83 70       	andi	r24, 0x03	; 3
    1484:	99 27       	eor	r25, r25
    1486:	82 2b       	or	r24, r18
    1488:	93 2b       	or	r25, r19
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:274
			if (MSB & 0b10000000) {
    148a:	c7 fd       	sbrc	r28, 7
    148c:	2f c0       	rjmp	.+94     	; 0x14ec <uRTCLib::refresh() [clone .constprop.52]+0x38c>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:276
				_temp = (_temp | 0b1111110000000000);
				_temp--;
    148e:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <rtc+0xa>
    1492:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <rtc+0x9>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:278
			}
			_temp = _temp * 25; // *25 is the same as number + 2bit (decimals) * 100 in base 10
    1496:	20 91 b7 03 	lds	r18, 0x03B7	; 0x8003b7 <rtc+0x9>
    149a:	30 91 b8 03 	lds	r19, 0x03B8	; 0x8003b8 <rtc+0xa>
    149e:	49 e1       	ldi	r20, 0x19	; 25
    14a0:	42 9f       	mul	r20, r18
    14a2:	c0 01       	movw	r24, r0
    14a4:	43 9f       	mul	r20, r19
    14a6:	90 0d       	add	r25, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <rtc+0xa>
    14ae:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <rtc+0x9>
    14b2:	d8 ce       	rjmp	.-592    	; 0x1264 <uRTCLib::refresh() [clone .constprop.52]+0x104>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:191
			// 0x0Ah
			_a1_day_dow = URTCLIB_WIRE.read();
			uRTCLIB_YIELD
			_a1_mode = _a1_mode | ((_a1_day_dow & 0b10000000) >> 4);
			if (!(_a1_mode & 0b00001111)) {
				_a1_mode = _a1_mode | ((_a1_day_dow & 0b01000000) >> 2);
    14b4:	ac 01       	movw	r20, r24
    14b6:	55 95       	asr	r21
    14b8:	47 95       	ror	r20
    14ba:	55 95       	asr	r21
    14bc:	47 95       	ror	r20
    14be:	40 71       	andi	r20, 0x10	; 16
    14c0:	24 2b       	or	r18, r20
    14c2:	35 cf       	rjmp	.-406    	; 0x132e <uRTCLib::refresh() [clone .constprop.52]+0x1ce>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:215
			// 0x0Dh
			_a2_day_dow = URTCLIB_WIRE.read();
			uRTCLIB_YIELD
			_a2_mode = _a2_mode | ((_a2_day_dow & 0b10000000) >> 4);
			if (!(_a2_mode & 0b00001110)) { // M4-M2 is 0, check DT/DY
				_a2_mode = _a2_mode | ((_a2_day_dow & 0b01000000) >> 2);
    14c4:	ac 01       	movw	r20, r24
    14c6:	55 95       	asr	r21
    14c8:	47 95       	ror	r20
    14ca:	55 95       	asr	r21
    14cc:	47 95       	ror	r20
    14ce:	40 71       	andi	r20, 0x10	; 16
    14d0:	24 2b       	or	r18, r20
    14d2:	77 cf       	rjmp	.-274    	; 0x13c2 <uRTCLib::refresh() [clone .constprop.52]+0x262>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:231
				_sqwg_mode = URTCLIB_SQWG_OFF_1;
				// Alarms disabled?
				if (LSB & 0b00000001) {
					_a1_mode |= 0b00100000;
				} else {
					_a1_mode = URTCLIB_ALARM_TYPE_1_NONE;
    14d4:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <rtc+0xc>
    14d8:	8a cf       	rjmp	.-236    	; 0x13ee <uRTCLib::refresh() [clone .constprop.52]+0x28e>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:239
					_a2_mode |= 0b00100000;
				} else {
					_a2_mode = URTCLIB_ALARM_TYPE_2_NONE;
				}
			} else {
				_sqwg_mode = LSB & 0b00011000;
    14da:	88 71       	andi	r24, 0x18	; 24
    14dc:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <rtc+0x18>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:241
				// Mark alarms as disabled because the SQWG:
				_a1_mode = URTCLIB_ALARM_TYPE_1_NONE;
    14e0:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <rtc+0xc>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:242
				_a2_mode = URTCLIB_ALARM_TYPE_2_NONE;
    14e4:	80 e8       	ldi	r24, 0x80	; 128
    14e6:	88 cf       	rjmp	.-240    	; 0x13f8 <uRTCLib::refresh() [clone .constprop.52]+0x298>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:261

			// 0x10h
			_aging = URTCLIB_WIRE.read(); //Aging
			uRTCLIB_YIELD
			if (_aging & 0b10000000) {
				_aging--;
    14e8:	81 50       	subi	r24, 0x01	; 1
    14ea:	b8 cf       	rjmp	.-144    	; 0x145c <uRTCLib::refresh() [clone .constprop.52]+0x2fc>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:275
			// 0x12h
			LSB = URTCLIB_WIRE.read(); //fraction portion
			uRTCLIB_YIELD
			_temp = 0b0000000000000000 | (MSB  << 2) | (LSB >> 6); // 8+2 bits, *25 is the same as number + 2bitdecimals * 100 in base 10
			if (MSB & 0b10000000) {
				_temp = (_temp | 0b1111110000000000);
    14ec:	9c 6f       	ori	r25, 0xFC	; 252
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:276
				_temp--;
    14ee:	01 97       	sbiw	r24, 0x01	; 1
    14f0:	ce cf       	rjmp	.-100    	; 0x148e <uRTCLib::refresh() [clone .constprop.52]+0x32e>

000014f2 <uEEPROMLib::_eeprom_read(unsigned int) [clone .constprop.17]>:
_eeprom_read():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:82
 * \brief Read one byte
 *
 * @param address Address inside EEPROM to read from
 * @return read byte
 */
byte uEEPROMLib::_eeprom_read(const unsigned int address) {
    14f2:	cf 93       	push	r28
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:83
	uEEPROMLIB_STM32_INIT_FIX()
    14f4:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <eeprom+0x3>
    14f8:	81 11       	cpse	r24, r1
    14fa:	0b c0       	rjmp	.+22     	; 0x1512 <uEEPROMLib::_eeprom_read(unsigned int) [clone .constprop.17]+0x20>
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <eeprom+0x3>
    1502:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <uEEPROMLib::_eeprom_read(unsigned int) [clone .constprop.17]>
    1506:	6a e0       	ldi	r22, 0x0A	; 10
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
beginTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:206
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    1512:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <eeprom+0x1>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <TwoWire::transmitting>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    151c:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <TwoWire::txAddress>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    1520:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    1524:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <TwoWire::txBufferLength>
_eeprom_read():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:87
	uEEPROMLIB_YIELD
	byte rdata = 0xFF;
	UEEPROMLIB_WIRE.beginTransmission(_ee_address);
	UEEPROMLIB_WIRE.write((int)(address >> 8)); // MSB
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:88
	UEEPROMLIB_WIRE.write((int)(address & 0xFF)); // LSB
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:89
    delay(uEEPROMLIB_WIRE_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside a for loop meses some values
    1538:	66 e0       	ldi	r22, 0x06	; 6
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:90
	if (UEEPROMLIB_WIRE.endTransmission() == 0) {
    1544:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TwoWire::endTransmission() [clone .constprop.55]>
    1548:	88 23       	and	r24, r24
    154a:	21 f0       	breq	.+8      	; 0x1554 <uEEPROMLib::_eeprom_read(unsigned int) [clone .constprop.17]+0x62>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:85
 * @return read byte
 */
byte uEEPROMLib::_eeprom_read(const unsigned int address) {
	uEEPROMLIB_STM32_INIT_FIX()
	uEEPROMLIB_YIELD
	byte rdata = 0xFF;
    154c:	cf ef       	ldi	r28, 0xFF	; 255
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:100
            delay(uEEPROMLIB_WIRE_SHORT_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside a for loop meses some values
		}
	}
	uEEPROMLIB_YIELD
	return rdata;
}
    154e:	8c 2f       	mov	r24, r28
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:91
	UEEPROMLIB_WIRE.beginTransmission(_ee_address);
	UEEPROMLIB_WIRE.write((int)(address >> 8)); // MSB
	UEEPROMLIB_WIRE.write((int)(address & 0xFF)); // LSB
    delay(uEEPROMLIB_WIRE_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside a for loop meses some values
	if (UEEPROMLIB_WIRE.endTransmission() == 0) {
		UEEPROMLIB_WIRE.requestFrom(_ee_address, 1);
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <eeprom+0x1>
    155c:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <eeprom+0x2>
    1560:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TwoWire::requestFrom(int, int) [clone .constprop.56]>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:92
        delay(uEEPROMLIB_WIRE_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside a for loop meses some values
    1564:	66 e0       	ldi	r22, 0x06	; 6
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:93
		if(UEEPROMLIB_WIRE.available()) {
    1570:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
    1574:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
    1578:	98 17       	cp	r25, r24
    157a:	41 f3       	breq	.-48     	; 0x154c <uEEPROMLib::_eeprom_read(unsigned int) [clone .constprop.17]+0x5a>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:94
			rdata = (byte) UEEPROMLIB_WIRE.read();
    157c:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
    1580:	c8 2f       	mov	r28, r24
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:95
            delay(uEEPROMLIB_WIRE_SHORT_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside a for loop meses some values
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
    158e:	df cf       	rjmp	.-66     	; 0x154e <uEEPROMLib::_eeprom_read(unsigned int) [clone .constprop.17]+0x5c>

00001590 <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]>:
_eeprom_read_sub():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:143
 * @param address Address inside EEPROM to read from
 * @param data Pointer to where read data to
 * @param number of bytes to read
 * @return true if bytes read are the same as requested
 */
bool uEEPROMLib::_eeprom_read_sub(const unsigned int address, byte *data, uint8_t n) {
    1590:	df 92       	push	r13
    1592:	ef 92       	push	r14
    1594:	ff 92       	push	r15
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	8c 01       	movw	r16, r24
    15a0:	d6 2e       	mov	r13, r22
    15a2:	e7 2e       	mov	r14, r23
    15a4:	d4 2f       	mov	r29, r20
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:146
    bool ret = false;
	byte temp = 0;
	uEEPROMLIB_STM32_INIT_FIX()
    15a6:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <eeprom+0x3>
    15aa:	81 11       	cpse	r24, r1
    15ac:	0b c0       	rjmp	.+22     	; 0x15c4 <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]+0x34>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <eeprom+0x3>
    15b4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <uEEPROMLib::_eeprom_read(unsigned int) [clone .constprop.17]>
    15b8:	6a e0       	ldi	r22, 0x0A	; 10
    15ba:	70 e0       	ldi	r23, 0x00	; 0
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
beginTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:206
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    15c4:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <eeprom+0x1>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <TwoWire::transmitting>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    15ce:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <TwoWire::txAddress>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    15d2:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    15d6:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <TwoWire::txBufferLength>
_eeprom_read_sub():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:149
	uEEPROMLIB_YIELD
	UEEPROMLIB_WIRE.beginTransmission(_ee_address);
	UEEPROMLIB_WIRE.write((int)(address >> 8)); // MSB
    15da:	81 2f       	mov	r24, r17
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:150
	UEEPROMLIB_WIRE.write((int)(address & 0xFF)); // LSB
    15e2:	c8 01       	movw	r24, r16
    15e4:	99 27       	eor	r25, r25
    15e6:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:151
    delay(uEEPROMLIB_WIRE_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside for look meses some values
    15ea:	66 e0       	ldi	r22, 0x06	; 6
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:152
	if (UEEPROMLIB_WIRE.endTransmission() == 0) {
    15f6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TwoWire::endTransmission() [clone .constprop.55]>
    15fa:	c8 2f       	mov	r28, r24
    15fc:	81 11       	cpse	r24, r1
    15fe:	2b c0       	rjmp	.+86     	; 0x1656 <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]+0xc6>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:153
		UEEPROMLIB_WIRE.requestFrom(_ee_address, (int) n);
    1600:	6d 2f       	mov	r22, r29
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <eeprom+0x1>
    1608:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <eeprom+0x2>
    160c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TwoWire::requestFrom(int, int) [clone .constprop.56]>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:154
        delay(uEEPROMLIB_WIRE_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside for look meses some values
    1610:	66 e0       	ldi	r22, 0x06	; 6
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
available():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:290
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return rxBufferLength - rxBufferIndex;
    161c:	f0 90 7c 02 	lds	r15, 0x027C	; 0x80027c <TwoWire::rxBufferLength>
_eeprom_read_sub():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:155
		if(UEEPROMLIB_WIRE.available()) {
    1620:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
    1624:	f8 16       	cp	r15, r24
    1626:	b9 f0       	breq	.+46     	; 0x1656 <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]+0xc6>
    1628:	0d 2d       	mov	r16, r13
    162a:	1e 2d       	mov	r17, r14
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:157
			uint8_t i = 0, j;
            while (i < n && UEEPROMLIB_WIRE.available()) {
    162c:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
    1630:	f8 16       	cp	r15, r24
    1632:	79 f0       	breq	.+30     	; 0x1652 <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]+0xc2>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:158
				temp = (byte) UEEPROMLIB_WIRE.read();
    1634:	0e 94 df 00 	call	0x1be	; 0x1be <TwoWire::read() [clone .constprop.64]>
    1638:	f8 01       	movw	r30, r16
    163a:	81 93       	st	Z+, r24
    163c:	8f 01       	movw	r16, r30
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:160
                *(data + i) = temp;
 		        delay(uEEPROMLIB_WIRE_SHORT_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside for look meses some values
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:162
            	uEEPROMLIB_YIELD
            	i++;
    164a:	cf 5f       	subi	r28, 0xFF	; 255
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:164
				// Added to wait if needed but cut after a failure (timeout)
				if (i < n) {
    164c:	dc 13       	cpse	r29, r28
    164e:	0c c0       	rjmp	.+24     	; 0x1668 <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]+0xd8>
    1650:	cd 2f       	mov	r28, r29
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:171
		 		        delay(uEEPROMLIB_WIRE_SHORT_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside for loop meses some values
			        	uEEPROMLIB_YIELD
					}
				}
            }
            ret = (i == n);
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	dc 13       	cpse	r29, r28
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:144
 * @param data Pointer to where read data to
 * @param number of bytes to read
 * @return true if bytes read are the same as requested
 */
bool uEEPROMLib::_eeprom_read_sub(const unsigned int address, byte *data, uint8_t n) {
    bool ret = false;
    1656:	80 e0       	ldi	r24, 0x00	; 0
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:176
            ret = (i == n);
		}
	}
	uEEPROMLIB_YIELD
	return ret;
}
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	df 90       	pop	r13
    1666:	08 95       	ret
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:164
                *(data + i) = temp;
 		        delay(uEEPROMLIB_WIRE_SHORT_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside for look meses some values
            	uEEPROMLIB_YIELD
            	i++;
				// Added to wait if needed but cut after a failure (timeout)
				if (i < n) {
    1668:	ee 24       	eor	r14, r14
    166a:	ea 94       	dec	r14
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:165
	            	for (j = 0; j < 255 && !UEEPROMLIB_WIRE.available(); j++) {
    166c:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <TwoWire::rxBufferIndex>
    1670:	f8 12       	cpse	r15, r24
    1672:	dc cf       	rjmp	.-72     	; 0x162c <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]+0x9c>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:166
		 		        delay(uEEPROMLIB_WIRE_SHORT_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside for loop meses some values
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
    1680:	ea 94       	dec	r14
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:165
 		        delay(uEEPROMLIB_WIRE_SHORT_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside for look meses some values
            	uEEPROMLIB_YIELD
            	i++;
				// Added to wait if needed but cut after a failure (timeout)
				if (i < n) {
	            	for (j = 0; j < 255 && !UEEPROMLIB_WIRE.available(); j++) {
    1682:	e1 10       	cpse	r14, r1
    1684:	f3 cf       	rjmp	.-26     	; 0x166c <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]+0xdc>
    1686:	d2 cf       	rjmp	.-92     	; 0x162c <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]+0x9c>

00001688 <uEEPROMLib::eeprom_read(unsigned int, unsigned char*, unsigned int) [clone .constprop.15]>:
eeprom_read():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:119
	byte * _data = data;
	unsigned int remaining = n;
	bool ret = true;
	while (remaining > 0 && ret) {
		if (remaining <= UEEPROMLIB_WIRE_MAX_RBUFFER) {
			ret = _eeprom_read_sub(_address, (data + n - remaining), remaining);
    1688:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <uEEPROMLib::_eeprom_read_sub(unsigned int, unsigned char*, unsigned char) [clone .constprop.16]>

0000168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>:
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.h:156
	 *
	 * @param address Address inside EEPROM to read from
	 * @return read data (any type)
	 */
	template <typename TR> void uEEPROMLib::eeprom_read(const unsigned int address, TR *data) {
		eeprom_read(address, (byte *) data, sizeof(TR));
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <uEEPROMLib::eeprom_read(unsigned int, unsigned char*, unsigned int) [clone .constprop.15]>

00001694 <gregorian_jd0(int)>:
gregorian_jd0():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:36
            return (rval);
        }
}

long gregorian_jd0(int gregorian_year)
{
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
    16b0:	ec 01       	movw	r28, r24
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:40
    long rval;
    int y;

    long l = gregorian_year;
    16b2:	2c 01       	movw	r4, r24
    16b4:	09 2e       	mov	r0, r25
    16b6:	00 0c       	add	r0, r0
    16b8:	66 08       	sbc	r6, r6
    16ba:	77 08       	sbc	r7, r7
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:41
    rval = l * 365 + l / 4;
    16bc:	2d e6       	ldi	r18, 0x6D	; 109
    16be:	31 e0       	ldi	r19, 0x01	; 1
    16c0:	dc 01       	movw	r26, r24
    16c2:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <__usmulhisi3>
    16c6:	4b 01       	movw	r8, r22
    16c8:	5c 01       	movw	r10, r24
    16ca:	c3 01       	movw	r24, r6
    16cc:	b2 01       	movw	r22, r4
    16ce:	24 e0       	ldi	r18, 0x04	; 4
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__divmodsi4>
    16da:	82 0e       	add	r8, r18
    16dc:	93 1e       	adc	r9, r19
    16de:	a4 1e       	adc	r10, r20
    16e0:	b5 1e       	adc	r11, r21
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:42
    rval += -l / 100 + l / 400;
    16e2:	c3 01       	movw	r24, r6
    16e4:	b2 01       	movw	r22, r4
    16e6:	2c e9       	ldi	r18, 0x9C	; 156
    16e8:	3f ef       	ldi	r19, 0xFF	; 255
    16ea:	4f ef       	ldi	r20, 0xFF	; 255
    16ec:	5f ef       	ldi	r21, 0xFF	; 255
    16ee:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__divmodsi4>
    16f2:	69 01       	movw	r12, r18
    16f4:	7a 01       	movw	r14, r20
    16f6:	c3 01       	movw	r24, r6
    16f8:	b2 01       	movw	r22, r4
    16fa:	20 e9       	ldi	r18, 0x90	; 144
    16fc:	31 e0       	ldi	r19, 0x01	; 1
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__divmodsi4>
    1706:	c2 0e       	add	r12, r18
    1708:	d3 1e       	adc	r13, r19
    170a:	e4 1e       	adc	r14, r20
    170c:	f5 1e       	adc	r15, r21
    170e:	c8 0c       	add	r12, r8
    1710:	d9 1c       	adc	r13, r9
    1712:	ea 1c       	adc	r14, r10
    1714:	fb 1c       	adc	r15, r11
is_year_leap():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:140
        jmonths[11] = 29;
        return false;
    }
    else
    {
        if (year > UPPER_GREGORIAN_YEAR || year < LOWER_GREGORIAN_YEAR)
    1716:	ce 01       	movw	r24, r28
    1718:	8f 56       	subi	r24, 0x6F	; 111
    171a:	92 40       	sbci	r25, 0x02	; 2
    171c:	83 31       	cpi	r24, 0x13	; 19
    171e:	99 40       	sbci	r25, 0x09	; 9
    1720:	f0 f4       	brcc	.+60     	; 0x175e <gregorian_jd0(int)+0xca>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:142
            return false;
        if ((year % 4) == 0)
    1722:	ce 01       	movw	r24, r28
    1724:	83 70       	andi	r24, 0x03	; 3
    1726:	99 27       	eor	r25, r25
    1728:	89 2b       	or	r24, r25
    172a:	71 f5       	brne	.+92     	; 0x1788 <gregorian_jd0(int)+0xf4>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:143
            if ((year % 100) != 0 || (year % 400) == 0)
    172c:	ce 01       	movw	r24, r28
    172e:	64 e6       	ldi	r22, 0x64	; 100
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1736:	89 2b       	or	r24, r25
    1738:	39 f4       	brne	.+14     	; 0x1748 <gregorian_jd0(int)+0xb4>
    173a:	ce 01       	movw	r24, r28
    173c:	60 e9       	ldi	r22, 0x90	; 144
    173e:	71 e0       	ldi	r23, 0x01	; 1
    1740:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1744:	89 2b       	or	r24, r25
    1746:	01 f5       	brne	.+64     	; 0x1788 <gregorian_jd0(int)+0xf4>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:145
            {
                gmonths[1] = 29;
    1748:	8d e1       	ldi	r24, 0x1D	; 29
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <gmonths+0x3>
    1750:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <gmonths+0x2>
gregorian_jd0():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:45
    long l = gregorian_year;
    rval = l * 365 + l / 4;
    rval += -l / 100 + l / 400;

    if (Jalali::is_year_leap(gregorian_year, GREGORIAN))
        rval--;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	c8 1a       	sub	r12, r24
    1758:	d1 08       	sbc	r13, r1
    175a:	e1 08       	sbc	r14, r1
    175c:	f1 08       	sbc	r15, r1
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:47

    rval += gregorian_CALENDAR_EPOCH + 1;
    175e:	c7 01       	movw	r24, r14
    1760:	b6 01       	movw	r22, r12
    1762:	6b 51       	subi	r22, 0x1B	; 27
    1764:	7d 4b       	sbci	r23, 0xBD	; 189
    1766:	85 4e       	sbci	r24, 0xE5	; 229
    1768:	9f 4f       	sbci	r25, 0xFF	; 255
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:49
    return rval;
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	bf 90       	pop	r11
    1778:	af 90       	pop	r10
    177a:	9f 90       	pop	r9
    177c:	8f 90       	pop	r8
    177e:	7f 90       	pop	r7
    1780:	6f 90       	pop	r6
    1782:	5f 90       	pop	r5
    1784:	4f 90       	pop	r4
    1786:	08 95       	ret
is_year_leap():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:148
            if ((year % 100) != 0 || (year % 400) == 0)
            {
                gmonths[1] = 29;
                return true;
            }
        gmonths[1] = 28;
    1788:	8c e1       	ldi	r24, 0x1C	; 28
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <gmonths+0x3>
    1790:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <gmonths+0x2>
    1794:	e4 cf       	rjmp	.-56     	; 0x175e <gregorian_jd0(int)+0xca>

00001796 <days_to_date(long, int&, int&, int&, int)>:
days_to_date():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:71
    days += day - 1;
    return days;
}

void days_to_date(long jd, int &year, int &month, int &day, int calendar)
{
    1796:	2f 92       	push	r2
    1798:	3f 92       	push	r3
    179a:	4f 92       	push	r4
    179c:	5f 92       	push	r5
    179e:	6f 92       	push	r6
    17a0:	7f 92       	push	r7
    17a2:	8f 92       	push	r8
    17a4:	9f 92       	push	r9
    17a6:	af 92       	push	r10
    17a8:	bf 92       	push	r11
    17aa:	cf 92       	push	r12
    17ac:	df 92       	push	r13
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	4b 01       	movw	r8, r22
    17bc:	5c 01       	movw	r10, r24
    17be:	ea 01       	movw	r28, r20
    17c0:	19 01       	movw	r2, r18
    17c2:	68 01       	movw	r12, r16
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:76
    long days0;
    long days1;
    int m;

    if (calendar == JALALI)
    17c4:	e1 14       	cp	r14, r1
    17c6:	f1 04       	cpc	r15, r1
    17c8:	09 f0       	breq	.+2      	; 0x17cc <days_to_date(long, int&, int&, int&, int)+0x36>
    17ca:	43 c0       	rjmp	.+134    	; 0x1852 <days_to_date(long, int&, int&, int&, int)+0xbc>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:77
        year = (jd - JALALI_ZERO) / 365;
    17cc:	62 53       	subi	r22, 0x32	; 50
    17ce:	79 4b       	sbci	r23, 0xB9	; 185
    17d0:	8d 41       	sbci	r24, 0x1D	; 29
    17d2:	91 09       	sbc	r25, r1
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:79
    else
        year = (jd - gregorian_CALENDAR_EPOCH) / 365;
    17d4:	2d e6       	ldi	r18, 0x6D	; 109
    17d6:	31 e0       	ldi	r19, 0x01	; 1
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	0e 94 6c 1d 	call	0x3ad8	; 0x3ad8 <__divmodsi4>
    17e0:	39 83       	std	Y+1, r19	; 0x01
    17e2:	28 83       	st	Y, r18
    17e4:	08 81       	ld	r16, Y
    17e6:	19 81       	ldd	r17, Y+1	; 0x01
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:85

    do
    {
        if (calendar == JALALI)
        {
            days0 = jalali_jd0(year) + 1;
    17e8:	c8 01       	movw	r24, r16
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:83
    else
        year = (jd - gregorian_CALENDAR_EPOCH) / 365;

    do
    {
        if (calendar == JALALI)
    17ea:	e1 14       	cp	r14, r1
    17ec:	f1 04       	cpc	r15, r1
    17ee:	b1 f5       	brne	.+108    	; 0x185c <days_to_date(long, int&, int&, int&, int)+0xc6>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:85
        {
            days0 = jalali_jd0(year) + 1;
    17f0:	0e 94 11 07 	call	0xe22	; 0xe22 <jalali_jd0(int)>
    17f4:	2b 01       	movw	r4, r22
    17f6:	3c 01       	movw	r6, r24
    17f8:	2f ef       	ldi	r18, 0xFF	; 255
    17fa:	42 1a       	sub	r4, r18
    17fc:	52 0a       	sbc	r5, r18
    17fe:	62 0a       	sbc	r6, r18
    1800:	72 0a       	sbc	r7, r18
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:86
            days1 = jalali_jd0(year + 1) + 1;
    1802:	c8 01       	movw	r24, r16
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	0e 94 11 07 	call	0xe22	; 0xe22 <jalali_jd0(int)>
    180a:	ab 01       	movw	r20, r22
    180c:	bc 01       	movw	r22, r24
    180e:	4f 5f       	subi	r20, 0xFF	; 255
    1810:	5f 4f       	sbci	r21, 0xFF	; 255
    1812:	6f 4f       	sbci	r22, 0xFF	; 255
    1814:	7f 4f       	sbci	r23, 0xFF	; 255
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:87
            jmonths[11] = days1 - days0 - 336;
    1816:	ca 01       	movw	r24, r20
    1818:	80 55       	subi	r24, 0x50	; 80
    181a:	91 40       	sbci	r25, 0x01	; 1
    181c:	84 19       	sub	r24, r4
    181e:	95 09       	sbc	r25, r5
    1820:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <jmonths+0x17>
    1824:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <jmonths+0x16>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:97
            days1 = days0;
            for (int i = 0; i < 12; i++)
                days1 += gmonths[i];
        }

        if (days0 > jd)
    1828:	84 14       	cp	r8, r4
    182a:	95 04       	cpc	r9, r5
    182c:	a6 04       	cpc	r10, r6
    182e:	b7 04       	cpc	r11, r7
    1830:	6c f5       	brge	.+90     	; 0x188c <days_to_date(long, int&, int&, int&, int)+0xf6>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:98
            year--;
    1832:	88 81       	ld	r24, Y
    1834:	99 81       	ldd	r25, Y+1	; 0x01
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	99 83       	std	Y+1, r25	; 0x01
    183a:	88 83       	st	Y, r24
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:99
        if (days1 <= jd)
    183c:	84 16       	cp	r8, r20
    183e:	95 06       	cpc	r9, r21
    1840:	a6 06       	cpc	r10, r22
    1842:	b7 06       	cpc	r11, r23
    1844:	7c f2       	brlt	.-98     	; 0x17e4 <days_to_date(long, int&, int&, int&, int)+0x4e>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:100
            year++;
    1846:	88 81       	ld	r24, Y
    1848:	99 81       	ldd	r25, Y+1	; 0x01
    184a:	01 96       	adiw	r24, 0x01	; 1
    184c:	99 83       	std	Y+1, r25	; 0x01
    184e:	88 83       	st	Y, r24
    1850:	c9 cf       	rjmp	.-110    	; 0x17e4 <days_to_date(long, int&, int&, int&, int)+0x4e>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:79
    int m;

    if (calendar == JALALI)
        year = (jd - JALALI_ZERO) / 365;
    else
        year = (jd - gregorian_CALENDAR_EPOCH) / 365;
    1852:	64 5e       	subi	r22, 0xE4	; 228
    1854:	72 44       	sbci	r23, 0x42	; 66
    1856:	8a 41       	sbci	r24, 0x1A	; 26
    1858:	91 09       	sbc	r25, r1
    185a:	bc cf       	rjmp	.-136    	; 0x17d4 <days_to_date(long, int&, int&, int&, int)+0x3e>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:91
            days1 = jalali_jd0(year + 1) + 1;
            jmonths[11] = days1 - days0 - 336;
        }
        else
        {
            days0 = gregorian_jd0(year);
    185c:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gregorian_jd0(int)>
    1860:	2b 01       	movw	r4, r22
    1862:	3c 01       	movw	r6, r24
    1864:	e1 e0       	ldi	r30, 0x01	; 1
    1866:	f1 e0       	ldi	r31, 0x01	; 1
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:92
            days1 = days0;
    1868:	bc 01       	movw	r22, r24
    186a:	a2 01       	movw	r20, r4
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:94
            for (int i = 0; i < 12; i++)
                days1 += gmonths[i];
    186c:	81 91       	ld	r24, Z+
    186e:	91 91       	ld	r25, Z+
    1870:	09 2e       	mov	r0, r25
    1872:	00 0c       	add	r0, r0
    1874:	aa 0b       	sbc	r26, r26
    1876:	bb 0b       	sbc	r27, r27
    1878:	48 0f       	add	r20, r24
    187a:	59 1f       	adc	r21, r25
    187c:	6a 1f       	adc	r22, r26
    187e:	7b 1f       	adc	r23, r27
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:93
        }
        else
        {
            days0 = gregorian_jd0(year);
            days1 = days0;
            for (int i = 0; i < 12; i++)
    1880:	89 e1       	ldi	r24, 0x19	; 25
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	8e 17       	cp	r24, r30
    1886:	9f 07       	cpc	r25, r31
    1888:	89 f7       	brne	.-30     	; 0x186c <days_to_date(long, int&, int&, int&, int)+0xd6>
    188a:	ce cf       	rjmp	.-100    	; 0x1828 <days_to_date(long, int&, int&, int&, int)+0x92>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:99
                days1 += gmonths[i];
        }

        if (days0 > jd)
            year--;
        if (days1 <= jd)
    188c:	84 16       	cp	r8, r20
    188e:	95 06       	cpc	r9, r21
    1890:	a6 06       	cpc	r10, r22
    1892:	b7 06       	cpc	r11, r23
    1894:	c4 f6       	brge	.-80     	; 0x1846 <days_to_date(long, int&, int&, int&, int)+0xb0>
    1896:	e9 e1       	ldi	r30, 0x19	; 25
    1898:	f1 e0       	ldi	r31, 0x01	; 1
    189a:	c1 e0       	ldi	r28, 0x01	; 1
    189c:	d1 e0       	ldi	r29, 0x01	; 1
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:103
            year++;
    } while (days0 > jd || days1 <= jd);

    for (int i = 0; i < 12; i++)
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	20 e0       	ldi	r18, 0x00	; 0
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:105
    {
        day = jd - days0;
    18a2:	a4 01       	movw	r20, r8
    18a4:	44 19       	sub	r20, r4
    18a6:	55 09       	sbc	r21, r5
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:106
        if (calendar == JALALI)
    18a8:	e1 14       	cp	r14, r1
    18aa:	f1 04       	cpc	r15, r1
    18ac:	31 f5       	brne	.+76     	; 0x18fa <days_to_date(long, int&, int&, int&, int)+0x164>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:107
            m = jmonths[i];
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	2f 5f       	subi	r18, 0xFF	; 255
    18b4:	3f 4f       	sbci	r19, 0xFF	; 255
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:110
        else
            m = gmonths[i];
        if (day < m)
    18b6:	48 17       	cp	r20, r24
    18b8:	59 07       	cpc	r21, r25
    18ba:	14 f5       	brge	.+68     	; 0x1900 <days_to_date(long, int&, int&, int&, int)+0x16a>
    18bc:	f6 01       	movw	r30, r12
    18be:	51 83       	std	Z+1, r21	; 0x01
    18c0:	40 83       	st	Z, r20
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:112
        {
            month = i + 1;
    18c2:	f1 01       	movw	r30, r2
    18c4:	31 83       	std	Z+1, r19	; 0x01
    18c6:	20 83       	st	Z, r18
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:113
            day++;
    18c8:	f6 01       	movw	r30, r12
    18ca:	80 81       	ld	r24, Z
    18cc:	91 81       	ldd	r25, Z+1	; 0x01
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:118
            return;
        }
        days0 += m;
    }
}
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	bf 90       	pop	r11
    18e6:	af 90       	pop	r10
    18e8:	9f 90       	pop	r9
    18ea:	8f 90       	pop	r8
    18ec:	7f 90       	pop	r7
    18ee:	6f 90       	pop	r6
    18f0:	5f 90       	pop	r5
    18f2:	4f 90       	pop	r4
    18f4:	3f 90       	pop	r3
    18f6:	2f 90       	pop	r2
    18f8:	08 95       	ret
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:109
    {
        day = jd - days0;
        if (calendar == JALALI)
            m = jmonths[i];
        else
            m = gmonths[i];
    18fa:	88 81       	ld	r24, Y
    18fc:	99 81       	ldd	r25, Y+1	; 0x01
    18fe:	d9 cf       	rjmp	.-78     	; 0x18b2 <days_to_date(long, int&, int&, int&, int)+0x11c>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:116
        {
            month = i + 1;
            day++;
            return;
        }
        days0 += m;
    1900:	09 2e       	mov	r0, r25
    1902:	00 0c       	add	r0, r0
    1904:	aa 0b       	sbc	r26, r26
    1906:	bb 0b       	sbc	r27, r27
    1908:	48 0e       	add	r4, r24
    190a:	59 1e       	adc	r5, r25
    190c:	6a 1e       	adc	r6, r26
    190e:	7b 1e       	adc	r7, r27
    1910:	32 96       	adiw	r30, 0x02	; 2
    1912:	22 96       	adiw	r28, 0x02	; 2
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:103
            year--;
        if (days1 <= jd)
            year++;
    } while (days0 > jd || days1 <= jd);

    for (int i = 0; i < 12; i++)
    1914:	2c 30       	cpi	r18, 0x0C	; 12
    1916:	31 05       	cpc	r19, r1
    1918:	21 f6       	brne	.-120    	; 0x18a2 <days_to_date(long, int&, int&, int&, int)+0x10c>
    191a:	f6 01       	movw	r30, r12
    191c:	51 83       	std	Z+1, r21	; 0x01
    191e:	40 83       	st	Z, r20
    1920:	d9 cf       	rjmp	.-78     	; 0x18d4 <days_to_date(long, int&, int&, int&, int)+0x13e>

00001922 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]>:
printNumber():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:232
  return vfprintf_P(&f, (const char *)format, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
    1922:	8f 92       	push	r8
    1924:	9f 92       	push	r9
    1926:	af 92       	push	r10
    1928:	bf 92       	push	r11
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	a1 97       	sbiw	r28, 0x21	; 33
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:237
{
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1942:	19 a2       	std	Y+33, r1	; 0x21
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:240

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1944:	42 30       	cpi	r20, 0x02	; 2
    1946:	08 f4       	brcc	.+2      	; 0x194a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]+0x28>
    1948:	4a e0       	ldi	r20, 0x0A	; 10
    194a:	8e 01       	movw	r16, r28
    194c:	0f 5d       	subi	r16, 0xDF	; 223
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:243

  do {
    char c = n % base;
    1950:	84 2e       	mov	r8, r20
    1952:	91 2c       	mov	r9, r1
    1954:	b1 2c       	mov	r11, r1
    1956:	a1 2c       	mov	r10, r1
    1958:	a5 01       	movw	r20, r10
    195a:	94 01       	movw	r18, r8
    195c:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__udivmodsi4>
    1960:	e6 2f       	mov	r30, r22
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:244
    n /= base;
    1962:	b9 01       	movw	r22, r18
    1964:	ca 01       	movw	r24, r20
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:246

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1966:	ea 30       	cpi	r30, 0x0A	; 10
    1968:	44 f5       	brge	.+80     	; 0x19ba <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]+0x98>
    196a:	e0 5d       	subi	r30, 0xD0	; 208
    196c:	d8 01       	movw	r26, r16
    196e:	ee 93       	st	-X, r30
    1970:	8d 01       	movw	r16, r26
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:247
  } while(n);
    1972:	23 2b       	or	r18, r19
    1974:	24 2b       	or	r18, r20
    1976:	25 2b       	or	r18, r21
    1978:	79 f7       	brne	.-34     	; 0x1958 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]+0x36>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	80 e0       	ldi	r24, 0x00	; 0
write():
    197e:	10 97       	sbiw	r26, 0x00	; 0
    1980:	69 f0       	breq	.+26     	; 0x199c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]+0x7a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.h:54
      return write((const uint8_t *)str, strlen(str));
    1982:	fd 01       	movw	r30, r26
    1984:	01 90       	ld	r0, Z+
    1986:	00 20       	and	r0, r0
    1988:	e9 f7       	brne	.-6      	; 0x1984 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]+0x62>
    198a:	31 97       	sbiw	r30, 0x01	; 1
    198c:	af 01       	movw	r20, r30
    198e:	4a 1b       	sub	r20, r26
    1990:	5b 0b       	sbc	r21, r27
    1992:	bd 01       	movw	r22, r26
    1994:	86 e9       	ldi	r24, 0x96	; 150
    1996:	93 e0       	ldi	r25, 0x03	; 3
    1998:	0e 94 76 01 	call	0x2ec	; 0x2ec <Print::write(unsigned char const*, unsigned int)>
printNumber():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:250

  return write(str);
}
    199c:	a1 96       	adiw	r28, 0x21	; 33
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	bf 90       	pop	r11
    19b2:	af 90       	pop	r10
    19b4:	9f 90       	pop	r9
    19b6:	8f 90       	pop	r8
    19b8:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:246

  do {
    char c = n % base;
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    19ba:	e9 5c       	subi	r30, 0xC9	; 201
    19bc:	d7 cf       	rjmp	.-82     	; 0x196c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]+0x4a>

000019be <Print::print(unsigned char, int) [clone .constprop.36]>:
print():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:74
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    19be:	68 2f       	mov	r22, r24
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	80 e0       	ldi	r24, 0x00	; 0
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    19c6:	4a e0       	ldi	r20, 0x0A	; 10
    19c8:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]>

000019cc <Print::print(int, int) [clone .constprop.32]>:
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:77
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:79
{
  return print((long) n, base);
    19d4:	6c 01       	movw	r12, r24
    19d6:	99 0f       	add	r25, r25
    19d8:	ee 08       	sbc	r14, r14
    19da:	ff 08       	sbc	r15, r15
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:92
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
    19dc:	f7 fe       	sbrs	r15, 7
    19de:	16 c0       	rjmp	.+44     	; 0x1a0c <Print::print(int, int) [clone .constprop.32]+0x40>
write():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:280
    19e0:	41 e0       	ldi	r20, 0x01	; 1
    19e2:	6d e2       	ldi	r22, 0x2D	; 45
    19e4:	86 e9       	ldi	r24, 0x96	; 150
    19e6:	93 e0       	ldi	r25, 0x03	; 3
    19e8:	0e 94 d7 05 	call	0xbae	; 0xbae <LiquidCrystal::send(unsigned char, unsigned char)>
print():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:94
      int t = print('-');
      n = -n;
    19ec:	66 27       	eor	r22, r22
    19ee:	77 27       	eor	r23, r23
    19f0:	cb 01       	movw	r24, r22
    19f2:	6c 19       	sub	r22, r12
    19f4:	7d 09       	sbc	r23, r13
    19f6:	8e 09       	sbc	r24, r14
    19f8:	9f 09       	sbc	r25, r15
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:95
      return printNumber(n, 10) + t;
    19fa:	4a e0       	ldi	r20, 0x0A	; 10
    19fc:	0e 94 91 0c 	call	0x1922	; 0x1922 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]>
    1a00:	01 96       	adiw	r24, 0x01	; 1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1a02:	ff 90       	pop	r15
    1a04:	ef 90       	pop	r14
    1a06:	df 90       	pop	r13
    1a08:	cf 90       	pop	r12
    1a0a:	08 95       	ret
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1a0c:	4a e0       	ldi	r20, 0x0A	; 10
    1a0e:	c7 01       	movw	r24, r14
    1a10:	b6 01       	movw	r22, r12
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:80
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
}
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	df 90       	pop	r13
    1a18:	cf 90       	pop	r12
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/Print.cpp:97
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1a1a:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.39]>

00001a1e <set_clock()>:
set_clock():
/home/whisper/Arduino/Azangoo/set_clock.ino:1
void set_clock() {
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	9f 92       	push	r9
    1a28:	af 92       	push	r10
    1a2a:	bf 92       	push	r11
    1a2c:	cf 92       	push	r12
    1a2e:	df 92       	push	r13
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
/home/whisper/Arduino/Azangoo/set_clock.ino:2
  lcd.clear();
    1a3c:	0e 94 30 06 	call	0xc60	; 0xc60 <LiquidCrystal::clear() [clone .constprop.73]>
/home/whisper/Arduino/Azangoo/set_clock.ino:3
  lcd.print(F("Set Date:"));
    1a40:	84 e8       	ldi	r24, 0x84	; 132
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:4
  lcd.setCursor(0, 1);
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:5
  lcd.print(per_year);
    1a50:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <per_year>
    1a54:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <per_year+0x1>
    1a58:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:6
  lcd.print(F("/"));
    1a5c:	82 e8       	ldi	r24, 0x82	; 130
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:7
  if ( per_month < 10 ) {
    1a64:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <per_month>
    1a68:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <per_month+0x1>
    1a6c:	0a 97       	sbiw	r24, 0x0a	; 10
    1a6e:	24 f4       	brge	.+8      	; 0x1a78 <set_clock()+0x5a>
/home/whisper/Arduino/Azangoo/set_clock.ino:8
    lcd.print(F("0"));
    1a70:	80 e8       	ldi	r24, 0x80	; 128
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:10
  }
  lcd.print(per_month);
    1a78:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <per_month>
    1a7c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <per_month+0x1>
    1a80:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:11
  lcd.print(F("/"));
    1a84:	8e e7       	ldi	r24, 0x7E	; 126
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:12
  if ( per_day < 10 ) {
    1a8c:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <per_day>
    1a90:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <per_day+0x1>
    1a94:	0a 97       	sbiw	r24, 0x0a	; 10
    1a96:	24 f4       	brge	.+8      	; 0x1aa0 <set_clock()+0x82>
/home/whisper/Arduino/Azangoo/set_clock.ino:13
    lcd.print(F("0"));
    1a98:	8c e7       	ldi	r24, 0x7C	; 124
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:15
  }
  lcd.print(per_day);
    1aa0:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <per_day>
    1aa4:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <per_day+0x1>
    1aa8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
blink():
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:227
void LiquidCrystal::noBlink() {
  _displaycontrol &= ~LCD_BLINKON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal::blink() {
  _displaycontrol |= LCD_BLINKON;
    1aac:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <lcd+0x10>
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	91 60       	ori	r25, 0x01	; 1
    1ab4:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <lcd+0x10>
/home/whisper/Arduino/libraries/LiquidCrystal/src/LiquidCrystal.cpp:228
  command(LCD_DISPLAYCONTROL | _displaycontrol);
    1ab8:	89 60       	ori	r24, 0x09	; 9
    1aba:	0e 94 2a 06 	call	0xc54	; 0xc54 <LiquidCrystal::command(unsigned char) [clone .constprop.74]>
set_clock():
/home/whisper/Arduino/Azangoo/set_clock.ino:17
  lcd.blink();
  time_set_status = true;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
/home/whisper/Arduino/Azangoo/set_clock.ino:18
  h_year = per_year / 1000;
    1ac4:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <per_year>
    1ac8:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <per_year+0x1>
    1acc:	cf 01       	movw	r24, r30
    1ace:	68 ee       	ldi	r22, 0xE8	; 232
    1ad0:	73 e0       	ldi	r23, 0x03	; 3
    1ad2:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1ad6:	60 93 ba 01 	sts	0x01BA, r22	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:19
  s_year = (per_year % 1000) / 100;
    1ada:	24 e6       	ldi	r18, 0x64	; 100
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	b9 01       	movw	r22, r18
    1ae0:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1ae4:	60 93 b9 01 	sts	0x01B9, r22	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:20
  d_year = (per_year % 100) / 10;
    1ae8:	cf 01       	movw	r24, r30
    1aea:	b9 01       	movw	r22, r18
    1aec:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1af0:	2a e0       	ldi	r18, 0x0A	; 10
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	b9 01       	movw	r22, r18
    1af6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1afa:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:21
  y_year = per_year % 10;
    1afe:	cf 01       	movw	r24, r30
    1b00:	b9 01       	movw	r22, r18
    1b02:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1b06:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:22
  d_month = per_month / 10;
    1b0a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <per_month>
    1b0e:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <per_month+0x1>
    1b12:	b9 01       	movw	r22, r18
    1b14:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1b18:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <d_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:23
  y_month = per_month % 10;
    1b1c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:24
  d_day = per_day / 10;
    1b20:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <per_day>
    1b24:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <per_day+0x1>
    1b28:	b9 01       	movw	r22, r18
    1b2a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    1b2e:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <d_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:25
  y_day = per_day % 10;
    1b32:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:26
  d_hour = Hour / 10;
    1b36:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Hour>
    1b3a:	62 2f       	mov	r22, r18
    1b3c:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    1b40:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <d_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:27
  y_hour = Hour % 10;
    1b44:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:28
  d_minute = Minute / 10;
    1b48:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <Minute>
    1b4c:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    1b50:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <d_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:29
  y_minute = Minute % 10;
    1b54:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:30
  d_second = Second / 10;
    1b58:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <Second>
    1b5c:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    1b60:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <d_second>
/home/whisper/Arduino/Azangoo/set_clock.ino:654
      } else if (key == '5') {
        d_second = 5;
        lcd.print(5);
        status++;
      } else if (key == 'A') {
        status++;
    1b64:	4d e0       	ldi	r20, 0x0D	; 13
    1b66:	b4 2e       	mov	r11, r20
/home/whisper/Arduino/Azangoo/set_clock.ino:650
      } else if (key == '4') {
        d_second = 4;
        lcd.print(4);
        status++;
      } else if (key == '5') {
        d_second = 5;
    1b68:	05 e0       	ldi	r16, 0x05	; 5
/home/whisper/Arduino/Azangoo/set_clock.ino:646
      } else if (key == '3') {
        d_second = 3;
        lcd.print(3);
        status++;
      } else if (key == '4') {
        d_second = 4;
    1b6a:	54 e0       	ldi	r21, 0x04	; 4
    1b6c:	f5 2e       	mov	r15, r21
/home/whisper/Arduino/Azangoo/set_clock.ino:642
      } else if (key == '2') {
        d_second = 2;
        lcd.print(2);
        status++;
      } else if (key == '3') {
        d_second = 3;
    1b6e:	63 e0       	ldi	r22, 0x03	; 3
    1b70:	e6 2e       	mov	r14, r22
/home/whisper/Arduino/Azangoo/set_clock.ino:638
      } else if (key == '1') {
        d_second = 1;
        lcd.print(1);
        status++;
      } else if (key == '2') {
        d_second = 2;
    1b72:	12 e0       	ldi	r17, 0x02	; 2
/home/whisper/Arduino/Azangoo/set_clock.ino:618
      } else if (key == '9') {
        y_minute = 9;
        lcd.print(9);
        status++;
      } else if (key == 'A') {
        status++;
    1b74:	7c e0       	ldi	r23, 0x0C	; 12
    1b76:	a7 2e       	mov	r10, r23
/home/whisper/Arduino/Azangoo/set_clock.ino:614
      } else if (key == '8') {
        y_minute = 8;
        lcd.print(8);
        status++;
      } else if (key == '9') {
        y_minute = 9;
    1b78:	e9 e0       	ldi	r30, 0x09	; 9
    1b7a:	de 2e       	mov	r13, r30
/home/whisper/Arduino/Azangoo/set_clock.ino:610
      } else if (key == '7') {
        y_minute = 7;
        lcd.print(7);
        status++;
      } else if (key == '8') {
        y_minute = 8;
    1b7c:	f8 e0       	ldi	r31, 0x08	; 8
    1b7e:	cf 2e       	mov	r12, r31
/home/whisper/Arduino/Azangoo/set_clock.ino:566
      } else if (key == '5') {
        d_minute = 5;
        lcd.print(5);
        status++;
      } else if (key == 'A') {
        status++;
    1b80:	ab e0       	ldi	r26, 0x0B	; 11
    1b82:	9a 2e       	mov	r9, r26
/home/whisper/Arduino/Azangoo/set_clock.ino:530
          y_hour = 9;
          lcd.print(9);
          status++;
        }
      } else if (key == 'A') {
        status++;
    1b84:	ba e0       	ldi	r27, 0x0A	; 10
    1b86:	7b 2e       	mov	r7, r27
/home/whisper/Arduino/Azangoo/set_clock.ino:86
        break;
      } else if (key == 'C') {
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
    1b88:	ce e0       	ldi	r28, 0x0E	; 14
    1b8a:	6c 2e       	mov	r6, r28
/home/whisper/Arduino/Azangoo/set_clock.ino:33
  d_minute = Minute / 10;
  y_minute = Minute % 10;
  d_second = Second / 10;
  y_second = Second % 10;
  while (true) {
    char key = keypad.getKey();
    1b8c:	0e 94 46 04 	call	0x88c	; 0x88c <Keypad::getKey() [clone .constprop.21]>
    1b90:	c8 2f       	mov	r28, r24
/home/whisper/Arduino/Azangoo/set_clock.ino:34
    if (status == 0 ) {
    1b92:	d0 91 2a 02 	lds	r29, 0x022A	; 0x80022a <status>
    1b96:	d1 11       	cpse	r29, r1
    1b98:	b0 c0       	rjmp	.+352    	; 0x1cfa <set_clock()+0x2dc>
/home/whisper/Arduino/Azangoo/set_clock.ino:35
      lcd.setCursor(0, 1);
    1b9a:	61 e0       	ldi	r22, 0x01	; 1
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:36
      if (key == '0') {
    1ba2:	c0 33       	cpi	r28, 0x30	; 48
    1ba4:	61 f4       	brne	.+24     	; 0x1bbe <set_clock()+0x1a0>
/home/whisper/Arduino/Azangoo/set_clock.ino:37
        h_year = 0;
    1ba6:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:38
        lcd.print(0);
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:39
        status++;
    1bb2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1bb6:	8f 5f       	subi	r24, 0xFF	; 255
    1bb8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1bbc:	e7 cf       	rjmp	.-50     	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:40
      } else if (key == '1') {
    1bbe:	c1 33       	cpi	r28, 0x31	; 49
    1bc0:	69 f4       	brne	.+26     	; 0x1bdc <set_clock()+0x1be>
/home/whisper/Arduino/Azangoo/set_clock.ino:41
        h_year = 1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:42
        lcd.print(1);
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:43
        status++;
    1bd0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1bda:	d8 cf       	rjmp	.-80     	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:44
      } else if (key == '2') {
    1bdc:	c2 33       	cpi	r28, 0x32	; 50
    1bde:	61 f4       	brne	.+24     	; 0x1bf8 <set_clock()+0x1da>
/home/whisper/Arduino/Azangoo/set_clock.ino:45
        h_year = 2;
    1be0:	10 93 ba 01 	sts	0x01BA, r17	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:46
        lcd.print(2);
    1be4:	82 e0       	ldi	r24, 0x02	; 2
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:47
        status++;
    1bec:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1bf6:	ca cf       	rjmp	.-108    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:48
      } else if (key == '3') {
    1bf8:	c3 33       	cpi	r28, 0x33	; 51
    1bfa:	61 f4       	brne	.+24     	; 0x1c14 <set_clock()+0x1f6>
/home/whisper/Arduino/Azangoo/set_clock.ino:49
        h_year = 3;
    1bfc:	e0 92 ba 01 	sts	0x01BA, r14	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:50
        lcd.print(3);
    1c00:	83 e0       	ldi	r24, 0x03	; 3
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:51
        status++;
    1c08:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1c0c:	8f 5f       	subi	r24, 0xFF	; 255
    1c0e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1c12:	bc cf       	rjmp	.-136    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:52
      } else if (key == '4') {
    1c14:	c4 33       	cpi	r28, 0x34	; 52
    1c16:	61 f4       	brne	.+24     	; 0x1c30 <set_clock()+0x212>
/home/whisper/Arduino/Azangoo/set_clock.ino:53
        h_year = 4;
    1c18:	f0 92 ba 01 	sts	0x01BA, r15	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:54
        lcd.print(4);
    1c1c:	84 e0       	ldi	r24, 0x04	; 4
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:55
        status++;
    1c24:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1c2e:	ae cf       	rjmp	.-164    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:56
      } else if (key == '5') {
    1c30:	c5 33       	cpi	r28, 0x35	; 53
    1c32:	61 f4       	brne	.+24     	; 0x1c4c <set_clock()+0x22e>
/home/whisper/Arduino/Azangoo/set_clock.ino:57
        h_year = 5;
    1c34:	00 93 ba 01 	sts	0x01BA, r16	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:58
        lcd.print(5);
    1c38:	85 e0       	ldi	r24, 0x05	; 5
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:59
        status++;
    1c40:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1c44:	8f 5f       	subi	r24, 0xFF	; 255
    1c46:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1c4a:	a0 cf       	rjmp	.-192    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:60
      } else if (key == '6') {
    1c4c:	c6 33       	cpi	r28, 0x36	; 54
    1c4e:	69 f4       	brne	.+26     	; 0x1c6a <set_clock()+0x24c>
/home/whisper/Arduino/Azangoo/set_clock.ino:61
        h_year = 6;
    1c50:	86 e0       	ldi	r24, 0x06	; 6
    1c52:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:62
        lcd.print(6);
    1c56:	86 e0       	ldi	r24, 0x06	; 6
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:63
        status++;
    1c5e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1c68:	91 cf       	rjmp	.-222    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:64
      } else if (key == '7') {
    1c6a:	c7 33       	cpi	r28, 0x37	; 55
    1c6c:	69 f4       	brne	.+26     	; 0x1c88 <set_clock()+0x26a>
/home/whisper/Arduino/Azangoo/set_clock.ino:65
        h_year = 7;
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:66
        lcd.print(7);
    1c74:	87 e0       	ldi	r24, 0x07	; 7
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:67
        status++;
    1c7c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1c80:	8f 5f       	subi	r24, 0xFF	; 255
    1c82:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1c86:	82 cf       	rjmp	.-252    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:68
      } else if (key == '8') {
    1c88:	c8 33       	cpi	r28, 0x38	; 56
    1c8a:	61 f4       	brne	.+24     	; 0x1ca4 <set_clock()+0x286>
/home/whisper/Arduino/Azangoo/set_clock.ino:69
        h_year = 8;
    1c8c:	c0 92 ba 01 	sts	0x01BA, r12	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:70
        lcd.print(8);
    1c90:	88 e0       	ldi	r24, 0x08	; 8
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:71
        status++;
    1c98:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1c9c:	8f 5f       	subi	r24, 0xFF	; 255
    1c9e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1ca2:	74 cf       	rjmp	.-280    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:72
      } else if (key == '9') {
    1ca4:	c9 33       	cpi	r28, 0x39	; 57
    1ca6:	61 f4       	brne	.+24     	; 0x1cc0 <set_clock()+0x2a2>
/home/whisper/Arduino/Azangoo/set_clock.ino:73
        h_year = 9;
    1ca8:	d0 92 ba 01 	sts	0x01BA, r13	; 0x8001ba <h_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:74
        lcd.print(9);
    1cac:	89 e0       	ldi	r24, 0x09	; 9
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:75
        status++;
    1cb4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1cb8:	8f 5f       	subi	r24, 0xFF	; 255
    1cba:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1cbe:	66 cf       	rjmp	.-308    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:76
      } else if (key == 'A') {
    1cc0:	c1 34       	cpi	r28, 0x41	; 65
    1cc2:	21 f4       	brne	.+8      	; 0x1ccc <set_clock()+0x2ae>
/home/whisper/Arduino/Azangoo/set_clock.ino:77
        status++;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1cca:	60 cf       	rjmp	.-320    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:78
      } else if (key == 'B') {
    1ccc:	c2 34       	cpi	r28, 0x42	; 66
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <set_clock()+0x2b4>
    1cd0:	52 c1       	rjmp	.+676    	; 0x1f76 <set_clock()+0x558>
/home/whisper/Arduino/Azangoo/set_clock.ino:79
        status--;
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
/home/whisper/Arduino/Azangoo/set_clock.ino:741
      jal.convert_date(per_year, per_month, per_day, rtc_year, rtc_month, rtc_day, JALALI);
      set_rtc();
      break;
    }
  }
}
    1cd8:	df 91       	pop	r29
    1cda:	cf 91       	pop	r28
    1cdc:	1f 91       	pop	r17
    1cde:	0f 91       	pop	r16
    1ce0:	ff 90       	pop	r15
    1ce2:	ef 90       	pop	r14
    1ce4:	df 90       	pop	r13
    1ce6:	cf 90       	pop	r12
    1ce8:	bf 90       	pop	r11
    1cea:	af 90       	pop	r10
    1cec:	9f 90       	pop	r9
    1cee:	7f 90       	pop	r7
    1cf0:	6f 90       	pop	r6
    1cf2:	5f 90       	pop	r5
    1cf4:	4f 90       	pop	r4
/home/whisper/Arduino/Azangoo/set_clock.ino:466
        status++;
      } else if (key == 'B') {
        status--;
        if (set_clock_only) {
          set_clock_only = false;
          lcd.noBlink();
    1cf6:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <LiquidCrystal::noBlink() [clone .constprop.31]>
/home/whisper/Arduino/Azangoo/set_clock.ino:88
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 1 ) {
    1cfa:	d1 30       	cpi	r29, 0x01	; 1
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <set_clock()+0x2e2>
    1cfe:	9d c0       	rjmp	.+314    	; 0x1e3a <set_clock()+0x41c>
/home/whisper/Arduino/Azangoo/set_clock.ino:89
      lcd.setCursor(1, 1);
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:90
      if (key == '0') {
    1d08:	c0 33       	cpi	r28, 0x30	; 48
    1d0a:	61 f4       	brne	.+24     	; 0x1d24 <set_clock()+0x306>
/home/whisper/Arduino/Azangoo/set_clock.ino:91
        s_year = 0;
    1d0c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:92
        lcd.print(0);
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:93
        status++;
    1d18:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1d1c:	8f 5f       	subi	r24, 0xFF	; 255
    1d1e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1d22:	34 cf       	rjmp	.-408    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:94
      } else if (key == '1') {
    1d24:	c1 33       	cpi	r28, 0x31	; 49
    1d26:	61 f4       	brne	.+24     	; 0x1d40 <set_clock()+0x322>
/home/whisper/Arduino/Azangoo/set_clock.ino:95
        s_year = 1;
    1d28:	d0 93 b9 01 	sts	0x01B9, r29	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:96
        lcd.print(1);
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:97
        status++;
    1d34:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
    1d3a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1d3e:	26 cf       	rjmp	.-436    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:98
      } else if (key == '2') {
    1d40:	c2 33       	cpi	r28, 0x32	; 50
    1d42:	61 f4       	brne	.+24     	; 0x1d5c <set_clock()+0x33e>
/home/whisper/Arduino/Azangoo/set_clock.ino:99
        s_year = 2;
    1d44:	10 93 b9 01 	sts	0x01B9, r17	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:100
        lcd.print(2);
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:101
        status++;
    1d50:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1d5a:	18 cf       	rjmp	.-464    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:102
      } else if (key == '3') {
    1d5c:	c3 33       	cpi	r28, 0x33	; 51
    1d5e:	61 f4       	brne	.+24     	; 0x1d78 <set_clock()+0x35a>
/home/whisper/Arduino/Azangoo/set_clock.ino:103
        s_year = 3;
    1d60:	e0 92 b9 01 	sts	0x01B9, r14	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:104
        lcd.print(3);
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:105
        status++;
    1d6c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1d70:	8f 5f       	subi	r24, 0xFF	; 255
    1d72:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1d76:	0a cf       	rjmp	.-492    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:106
      } else if (key == '4') {
    1d78:	c4 33       	cpi	r28, 0x34	; 52
    1d7a:	61 f4       	brne	.+24     	; 0x1d94 <set_clock()+0x376>
/home/whisper/Arduino/Azangoo/set_clock.ino:107
        s_year = 4;
    1d7c:	f0 92 b9 01 	sts	0x01B9, r15	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:108
        lcd.print(4);
    1d80:	84 e0       	ldi	r24, 0x04	; 4
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:109
        status++;
    1d88:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1d92:	fc ce       	rjmp	.-520    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:110
      } else if (key == '5') {
    1d94:	c5 33       	cpi	r28, 0x35	; 53
    1d96:	61 f4       	brne	.+24     	; 0x1db0 <set_clock()+0x392>
/home/whisper/Arduino/Azangoo/set_clock.ino:111
        s_year = 5;
    1d98:	00 93 b9 01 	sts	0x01B9, r16	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:112
        lcd.print(5);
    1d9c:	85 e0       	ldi	r24, 0x05	; 5
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:113
        status++;
    1da4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1da8:	8f 5f       	subi	r24, 0xFF	; 255
    1daa:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1dae:	ee ce       	rjmp	.-548    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:114
      } else if (key == '6') {
    1db0:	c6 33       	cpi	r28, 0x36	; 54
    1db2:	69 f4       	brne	.+26     	; 0x1dce <set_clock()+0x3b0>
/home/whisper/Arduino/Azangoo/set_clock.ino:115
        s_year = 6;
    1db4:	86 e0       	ldi	r24, 0x06	; 6
    1db6:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:116
        lcd.print(6);
    1dba:	86 e0       	ldi	r24, 0x06	; 6
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:117
        status++;
    1dc2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1dc6:	8f 5f       	subi	r24, 0xFF	; 255
    1dc8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1dcc:	df ce       	rjmp	.-578    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:118
      } else if (key == '7') {
    1dce:	c7 33       	cpi	r28, 0x37	; 55
    1dd0:	69 f4       	brne	.+26     	; 0x1dec <set_clock()+0x3ce>
/home/whisper/Arduino/Azangoo/set_clock.ino:119
        s_year = 7;
    1dd2:	87 e0       	ldi	r24, 0x07	; 7
    1dd4:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:120
        lcd.print(7);
    1dd8:	87 e0       	ldi	r24, 0x07	; 7
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:121
        status++;
    1de0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1dea:	d0 ce       	rjmp	.-608    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:122
      } else if (key == '8') {
    1dec:	c8 33       	cpi	r28, 0x38	; 56
    1dee:	61 f4       	brne	.+24     	; 0x1e08 <set_clock()+0x3ea>
/home/whisper/Arduino/Azangoo/set_clock.ino:123
        s_year = 8;
    1df0:	c0 92 b9 01 	sts	0x01B9, r12	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:124
        lcd.print(8);
    1df4:	88 e0       	ldi	r24, 0x08	; 8
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:125
        status++;
    1dfc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1e00:	8f 5f       	subi	r24, 0xFF	; 255
    1e02:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1e06:	c2 ce       	rjmp	.-636    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:126
      } else if (key == '9') {
    1e08:	c9 33       	cpi	r28, 0x39	; 57
    1e0a:	61 f4       	brne	.+24     	; 0x1e24 <set_clock()+0x406>
/home/whisper/Arduino/Azangoo/set_clock.ino:127
        s_year = 9;
    1e0c:	d0 92 b9 01 	sts	0x01B9, r13	; 0x8001b9 <s_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:128
        lcd.print(9);
    1e10:	89 e0       	ldi	r24, 0x09	; 9
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:129
        status++;
    1e18:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1e22:	b4 ce       	rjmp	.-664    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:130
      } else if (key == 'A') {
    1e24:	c1 34       	cpi	r28, 0x41	; 65
    1e26:	19 f4       	brne	.+6      	; 0x1e2e <set_clock()+0x410>
/home/whisper/Arduino/Azangoo/set_clock.ino:131
        status++;
    1e28:	10 93 2a 02 	sts	0x022A, r17	; 0x80022a <status>
    1e2c:	af ce       	rjmp	.-674    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:132
      } else if (key == 'B') {
    1e2e:	c2 34       	cpi	r28, 0x42	; 66
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <set_clock()+0x416>
    1e32:	a1 c0       	rjmp	.+322    	; 0x1f76 <set_clock()+0x558>
/home/whisper/Arduino/Azangoo/set_clock.ino:133
        status--;
    1e34:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <status>
    1e38:	a9 ce       	rjmp	.-686    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:140
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 2 ) {
    1e3a:	d2 30       	cpi	r29, 0x02	; 2
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <set_clock()+0x422>
    1e3e:	a4 c0       	rjmp	.+328    	; 0x1f88 <set_clock()+0x56a>
/home/whisper/Arduino/Azangoo/set_clock.ino:141
      lcd.setCursor(2, 1);
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	82 e0       	ldi	r24, 0x02	; 2
    1e44:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:142
      if (key == '0') {
    1e48:	c0 33       	cpi	r28, 0x30	; 48
    1e4a:	61 f4       	brne	.+24     	; 0x1e64 <set_clock()+0x446>
/home/whisper/Arduino/Azangoo/set_clock.ino:143
        d_year = 0;
    1e4c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:144
        lcd.print(0);
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:145
        status++;
    1e58:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1e5c:	8f 5f       	subi	r24, 0xFF	; 255
    1e5e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1e62:	94 ce       	rjmp	.-728    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:146
      } else if (key == '1') {
    1e64:	c1 33       	cpi	r28, 0x31	; 49
    1e66:	69 f4       	brne	.+26     	; 0x1e82 <set_clock()+0x464>
/home/whisper/Arduino/Azangoo/set_clock.ino:147
        d_year = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:148
        lcd.print(1);
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:149
        status++;
    1e76:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1e80:	85 ce       	rjmp	.-758    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:150
      } else if (key == '2') {
    1e82:	c2 33       	cpi	r28, 0x32	; 50
    1e84:	61 f4       	brne	.+24     	; 0x1e9e <set_clock()+0x480>
/home/whisper/Arduino/Azangoo/set_clock.ino:151
        d_year = 2;
    1e86:	d0 93 b8 01 	sts	0x01B8, r29	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:152
        lcd.print(2);
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:153
        status++;
    1e92:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1e9c:	77 ce       	rjmp	.-786    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:154
      } else if (key == '3') {
    1e9e:	c3 33       	cpi	r28, 0x33	; 51
    1ea0:	61 f4       	brne	.+24     	; 0x1eba <set_clock()+0x49c>
/home/whisper/Arduino/Azangoo/set_clock.ino:155
        d_year = 3;
    1ea2:	e0 92 b8 01 	sts	0x01B8, r14	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:156
        lcd.print(3);
    1ea6:	83 e0       	ldi	r24, 0x03	; 3
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:157
        status++;
    1eae:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1eb8:	69 ce       	rjmp	.-814    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:158
      } else if (key == '4') {
    1eba:	c4 33       	cpi	r28, 0x34	; 52
    1ebc:	61 f4       	brne	.+24     	; 0x1ed6 <set_clock()+0x4b8>
/home/whisper/Arduino/Azangoo/set_clock.ino:159
        d_year = 4;
    1ebe:	f0 92 b8 01 	sts	0x01B8, r15	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:160
        lcd.print(4);
    1ec2:	84 e0       	ldi	r24, 0x04	; 4
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:161
        status++;
    1eca:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1ece:	8f 5f       	subi	r24, 0xFF	; 255
    1ed0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1ed4:	5b ce       	rjmp	.-842    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:162
      } else if (key == '5') {
    1ed6:	c5 33       	cpi	r28, 0x35	; 53
    1ed8:	61 f4       	brne	.+24     	; 0x1ef2 <set_clock()+0x4d4>
/home/whisper/Arduino/Azangoo/set_clock.ino:163
        d_year = 5;
    1eda:	00 93 b8 01 	sts	0x01B8, r16	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:164
        lcd.print(5);
    1ede:	85 e0       	ldi	r24, 0x05	; 5
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:165
        status++;
    1ee6:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1ef0:	4d ce       	rjmp	.-870    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:166
      } else if (key == '6') {
    1ef2:	c6 33       	cpi	r28, 0x36	; 54
    1ef4:	69 f4       	brne	.+26     	; 0x1f10 <set_clock()+0x4f2>
/home/whisper/Arduino/Azangoo/set_clock.ino:167
        d_year = 6;
    1ef6:	86 e0       	ldi	r24, 0x06	; 6
    1ef8:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:168
        lcd.print(6);
    1efc:	86 e0       	ldi	r24, 0x06	; 6
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:169
        status++;
    1f04:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1f08:	8f 5f       	subi	r24, 0xFF	; 255
    1f0a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1f0e:	3e ce       	rjmp	.-900    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:170
      } else if (key == '7') {
    1f10:	c7 33       	cpi	r28, 0x37	; 55
    1f12:	69 f4       	brne	.+26     	; 0x1f2e <set_clock()+0x510>
/home/whisper/Arduino/Azangoo/set_clock.ino:171
        d_year = 7;
    1f14:	87 e0       	ldi	r24, 0x07	; 7
    1f16:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:172
        lcd.print(7);
    1f1a:	87 e0       	ldi	r24, 0x07	; 7
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:173
        status++;
    1f22:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1f2c:	2f ce       	rjmp	.-930    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:174
      } else if (key == '8') {
    1f2e:	c8 33       	cpi	r28, 0x38	; 56
    1f30:	61 f4       	brne	.+24     	; 0x1f4a <set_clock()+0x52c>
/home/whisper/Arduino/Azangoo/set_clock.ino:175
        d_year = 8;
    1f32:	c0 92 b8 01 	sts	0x01B8, r12	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:176
        lcd.print(8);
    1f36:	88 e0       	ldi	r24, 0x08	; 8
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:177
        status++;
    1f3e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1f42:	8f 5f       	subi	r24, 0xFF	; 255
    1f44:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1f48:	21 ce       	rjmp	.-958    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:178
      } else if (key == '9') {
    1f4a:	c9 33       	cpi	r28, 0x39	; 57
    1f4c:	61 f4       	brne	.+24     	; 0x1f66 <set_clock()+0x548>
/home/whisper/Arduino/Azangoo/set_clock.ino:179
        d_year = 9;
    1f4e:	d0 92 b8 01 	sts	0x01B8, r13	; 0x8001b8 <d_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:180
        lcd.print(9);
    1f52:	89 e0       	ldi	r24, 0x09	; 9
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:181
        status++;
    1f5a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1f5e:	8f 5f       	subi	r24, 0xFF	; 255
    1f60:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1f64:	13 ce       	rjmp	.-986    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:182
      } else if (key == 'A') {
    1f66:	c1 34       	cpi	r28, 0x41	; 65
    1f68:	19 f4       	brne	.+6      	; 0x1f70 <set_clock()+0x552>
/home/whisper/Arduino/Azangoo/set_clock.ino:183
        status++;
    1f6a:	e0 92 2a 02 	sts	0x022A, r14	; 0x80022a <status>
    1f6e:	0e ce       	rjmp	.-996    	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:184
      } else if (key == 'B') {
    1f70:	c2 34       	cpi	r28, 0x42	; 66
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <set_clock()+0x558>
    1f74:	a7 ce       	rjmp	.-690    	; 0x1cc4 <set_clock()+0x2a6>
/home/whisper/Arduino/Azangoo/set_clock.ino:709
        status++;
      } else if (key == 'A') {
        status++;
      } else if (key == 'B') {
        status--;
      } else if (key == 'C') {
    1f76:	c3 34       	cpi	r28, 0x43	; 67
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <set_clock()+0x55e>
    1f7a:	ae ce       	rjmp	.-676    	; 0x1cd8 <set_clock()+0x2ba>
/home/whisper/Arduino/Azangoo/set_clock.ino:85
        lcd.noBlink();
        break;
      } else if (key == 'C') {
        lcd.noBlink();
        break;
      } else if (key == 'D') {
    1f7c:	c4 34       	cpi	r28, 0x44	; 68
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <set_clock()+0x564>
    1f80:	05 ce       	rjmp	.-1014   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:86
        status = 14;
    1f82:	60 92 2a 02 	sts	0x022A, r6	; 0x80022a <status>
    1f86:	02 ce       	rjmp	.-1020   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:192
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 3 ) {
    1f88:	d3 30       	cpi	r29, 0x03	; 3
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <set_clock()+0x570>
    1f8c:	9c c0       	rjmp	.+312    	; 0x20c6 <set_clock()+0x6a8>
/home/whisper/Arduino/Azangoo/set_clock.ino:193
      lcd.setCursor(3, 1);
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:194
      if (key == '0') {
    1f96:	c0 33       	cpi	r28, 0x30	; 48
    1f98:	61 f4       	brne	.+24     	; 0x1fb2 <set_clock()+0x594>
/home/whisper/Arduino/Azangoo/set_clock.ino:195
        y_year = 0;
    1f9a:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:196
        lcd.print(0);
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:197
        status++;
    1fa6:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1faa:	8f 5f       	subi	r24, 0xFF	; 255
    1fac:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1fb0:	ed cd       	rjmp	.-1062   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:198
      } else if (key == '1') {
    1fb2:	c1 33       	cpi	r28, 0x31	; 49
    1fb4:	69 f4       	brne	.+26     	; 0x1fd0 <set_clock()+0x5b2>
/home/whisper/Arduino/Azangoo/set_clock.ino:199
        y_year = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:200
        lcd.print(1);
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:201
        status++;
    1fc4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
    1fca:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1fce:	de cd       	rjmp	.-1092   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:202
      } else if (key == '2') {
    1fd0:	c2 33       	cpi	r28, 0x32	; 50
    1fd2:	61 f4       	brne	.+24     	; 0x1fec <set_clock()+0x5ce>
/home/whisper/Arduino/Azangoo/set_clock.ino:203
        y_year = 2;
    1fd4:	10 93 b7 01 	sts	0x01B7, r17	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:204
        lcd.print(2);
    1fd8:	82 e0       	ldi	r24, 0x02	; 2
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:205
        status++;
    1fe0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    1fea:	d0 cd       	rjmp	.-1120   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:206
      } else if (key == '3') {
    1fec:	c3 33       	cpi	r28, 0x33	; 51
    1fee:	61 f4       	brne	.+24     	; 0x2008 <set_clock()+0x5ea>
/home/whisper/Arduino/Azangoo/set_clock.ino:207
        y_year = 3;
    1ff0:	d0 93 b7 01 	sts	0x01B7, r29	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:208
        lcd.print(3);
    1ff4:	83 e0       	ldi	r24, 0x03	; 3
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:209
        status++;
    1ffc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2006:	c2 cd       	rjmp	.-1148   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:210
      } else if (key == '4') {
    2008:	c4 33       	cpi	r28, 0x34	; 52
    200a:	61 f4       	brne	.+24     	; 0x2024 <set_clock()+0x606>
/home/whisper/Arduino/Azangoo/set_clock.ino:211
        y_year = 4;
    200c:	f0 92 b7 01 	sts	0x01B7, r15	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:212
        lcd.print(4);
    2010:	84 e0       	ldi	r24, 0x04	; 4
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:213
        status++;
    2018:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    201c:	8f 5f       	subi	r24, 0xFF	; 255
    201e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2022:	b4 cd       	rjmp	.-1176   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:214
      } else if (key == '5') {
    2024:	c5 33       	cpi	r28, 0x35	; 53
    2026:	61 f4       	brne	.+24     	; 0x2040 <set_clock()+0x622>
/home/whisper/Arduino/Azangoo/set_clock.ino:215
        y_year = 5;
    2028:	00 93 b7 01 	sts	0x01B7, r16	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:216
        lcd.print(5);
    202c:	85 e0       	ldi	r24, 0x05	; 5
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:217
        status++;
    2034:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2038:	8f 5f       	subi	r24, 0xFF	; 255
    203a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    203e:	a6 cd       	rjmp	.-1204   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:218
      } else if (key == '6') {
    2040:	c6 33       	cpi	r28, 0x36	; 54
    2042:	69 f4       	brne	.+26     	; 0x205e <set_clock()+0x640>
/home/whisper/Arduino/Azangoo/set_clock.ino:219
        y_year = 6;
    2044:	86 e0       	ldi	r24, 0x06	; 6
    2046:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:220
        lcd.print(6);
    204a:	86 e0       	ldi	r24, 0x06	; 6
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:221
        status++;
    2052:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    205c:	97 cd       	rjmp	.-1234   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:222
      } else if (key == '7') {
    205e:	c7 33       	cpi	r28, 0x37	; 55
    2060:	69 f4       	brne	.+26     	; 0x207c <set_clock()+0x65e>
/home/whisper/Arduino/Azangoo/set_clock.ino:223
        y_year = 7;
    2062:	87 e0       	ldi	r24, 0x07	; 7
    2064:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:224
        lcd.print(7);
    2068:	87 e0       	ldi	r24, 0x07	; 7
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:225
        status++;
    2070:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2074:	8f 5f       	subi	r24, 0xFF	; 255
    2076:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    207a:	88 cd       	rjmp	.-1264   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:226
      } else if (key == '8') {
    207c:	c8 33       	cpi	r28, 0x38	; 56
    207e:	61 f4       	brne	.+24     	; 0x2098 <set_clock()+0x67a>
/home/whisper/Arduino/Azangoo/set_clock.ino:227
        y_year = 8;
    2080:	c0 92 b7 01 	sts	0x01B7, r12	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:228
        lcd.print(8);
    2084:	88 e0       	ldi	r24, 0x08	; 8
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:229
        status++;
    208c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2090:	8f 5f       	subi	r24, 0xFF	; 255
    2092:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2096:	7a cd       	rjmp	.-1292   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:230
      } else if (key == '9') {
    2098:	c9 33       	cpi	r28, 0x39	; 57
    209a:	61 f4       	brne	.+24     	; 0x20b4 <set_clock()+0x696>
/home/whisper/Arduino/Azangoo/set_clock.ino:231
        y_year = 9;
    209c:	d0 92 b7 01 	sts	0x01B7, r13	; 0x8001b7 <y_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:232
        lcd.print(9);
    20a0:	89 e0       	ldi	r24, 0x09	; 9
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:233
        status++;
    20a8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    20ac:	8f 5f       	subi	r24, 0xFF	; 255
    20ae:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    20b2:	6c cd       	rjmp	.-1320   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:234
      } else if (key == 'A') {
    20b4:	c1 34       	cpi	r28, 0x41	; 65
    20b6:	19 f4       	brne	.+6      	; 0x20be <set_clock()+0x6a0>
/home/whisper/Arduino/Azangoo/set_clock.ino:235
        status++;
    20b8:	f0 92 2a 02 	sts	0x022A, r15	; 0x80022a <status>
    20bc:	67 cd       	rjmp	.-1330   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:236
      } else if (key == 'B') {
    20be:	c2 34       	cpi	r28, 0x42	; 66
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <set_clock()+0x6a6>
    20c2:	59 cf       	rjmp	.-334    	; 0x1f76 <set_clock()+0x558>
    20c4:	b1 ce       	rjmp	.-670    	; 0x1e28 <set_clock()+0x40a>
/home/whisper/Arduino/Azangoo/set_clock.ino:244
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 4 ) {
    20c6:	d4 30       	cpi	r29, 0x04	; 4
    20c8:	51 f5       	brne	.+84     	; 0x211e <set_clock()+0x700>
/home/whisper/Arduino/Azangoo/set_clock.ino:245
      lcd.setCursor(5, 1);
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	85 e0       	ldi	r24, 0x05	; 5
    20ce:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:246
      if (key == '0') {
    20d2:	c0 33       	cpi	r28, 0x30	; 48
    20d4:	61 f4       	brne	.+24     	; 0x20ee <set_clock()+0x6d0>
/home/whisper/Arduino/Azangoo/set_clock.ino:247
        d_month = 0;
    20d6:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <d_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:248
        lcd.print(0);
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:249
        status++;
    20e2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    20e6:	8f 5f       	subi	r24, 0xFF	; 255
    20e8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    20ec:	4f cd       	rjmp	.-1378   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:250
      } else if (key == '1') {
    20ee:	c1 33       	cpi	r28, 0x31	; 49
    20f0:	69 f4       	brne	.+26     	; 0x210c <set_clock()+0x6ee>
/home/whisper/Arduino/Azangoo/set_clock.ino:251
        d_month = 1;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <d_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:252
        lcd.print(1);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:253
        status++;
    2100:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2104:	8f 5f       	subi	r24, 0xFF	; 255
    2106:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    210a:	40 cd       	rjmp	.-1408   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:254
      } else if (key == 'A') {
    210c:	c1 34       	cpi	r28, 0x41	; 65
    210e:	19 f4       	brne	.+6      	; 0x2116 <set_clock()+0x6f8>
/home/whisper/Arduino/Azangoo/set_clock.ino:255
        status++;
    2110:	00 93 2a 02 	sts	0x022A, r16	; 0x80022a <status>
    2114:	3b cd       	rjmp	.-1418   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:256
      } else if (key == 'B') {
    2116:	c2 34       	cpi	r28, 0x42	; 66
    2118:	09 f0       	breq	.+2      	; 0x211c <set_clock()+0x6fe>
    211a:	2d cf       	rjmp	.-422    	; 0x1f76 <set_clock()+0x558>
    211c:	26 cf       	rjmp	.-436    	; 0x1f6a <set_clock()+0x54c>
/home/whisper/Arduino/Azangoo/set_clock.ino:264
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 5 ) {
    211e:	d5 30       	cpi	r29, 0x05	; 5
    2120:	09 f0       	breq	.+2      	; 0x2124 <set_clock()+0x706>
    2122:	b9 c0       	rjmp	.+370    	; 0x2296 <set_clock()+0x878>
/home/whisper/Arduino/Azangoo/set_clock.ino:265
      lcd.setCursor(6, 1);
    2124:	61 e0       	ldi	r22, 0x01	; 1
    2126:	86 e0       	ldi	r24, 0x06	; 6
    2128:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:266
      if (key == '0') {
    212c:	c0 33       	cpi	r28, 0x30	; 48
    212e:	61 f4       	brne	.+24     	; 0x2148 <set_clock()+0x72a>
/home/whisper/Arduino/Azangoo/set_clock.ino:267
        y_month = 0;
    2130:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:268
        lcd.print(0);
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:269
        status++;
    213c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2140:	8f 5f       	subi	r24, 0xFF	; 255
    2142:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2146:	22 cd       	rjmp	.-1468   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:270
      } else if (key == '1') {
    2148:	c1 33       	cpi	r28, 0x31	; 49
    214a:	69 f4       	brne	.+26     	; 0x2166 <set_clock()+0x748>
/home/whisper/Arduino/Azangoo/set_clock.ino:271
        y_month = 1;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:272
        lcd.print(1);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:273
        status++;
    215a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2164:	13 cd       	rjmp	.-1498   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:274
      } else if (key == '2') {
    2166:	c2 33       	cpi	r28, 0x32	; 50
    2168:	61 f4       	brne	.+24     	; 0x2182 <set_clock()+0x764>
/home/whisper/Arduino/Azangoo/set_clock.ino:275
        y_month = 2;
    216a:	10 93 b5 01 	sts	0x01B5, r17	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:276
        lcd.print(2);
    216e:	82 e0       	ldi	r24, 0x02	; 2
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:277
        status++;
    2176:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2180:	05 cd       	rjmp	.-1526   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:278
      } else if (key == '3') {
    2182:	c3 33       	cpi	r28, 0x33	; 51
    2184:	81 f4       	brne	.+32     	; 0x21a6 <set_clock()+0x788>
/home/whisper/Arduino/Azangoo/set_clock.ino:279
        if ( d_month == 0 ) {
    2186:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <d_month>
    218a:	81 11       	cpse	r24, r1
    218c:	ff cc       	rjmp	.-1538   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:280
          y_month = 3;
    218e:	e0 92 b5 01 	sts	0x01B5, r14	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:281
          lcd.print(3);
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:282
          status++;
    219a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    219e:	8f 5f       	subi	r24, 0xFF	; 255
    21a0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    21a4:	f3 cc       	rjmp	.-1562   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:284
        }
      } else if (key == '4') {
    21a6:	c4 33       	cpi	r28, 0x34	; 52
    21a8:	81 f4       	brne	.+32     	; 0x21ca <set_clock()+0x7ac>
/home/whisper/Arduino/Azangoo/set_clock.ino:285
        if ( d_month == 0 ) {
    21aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <d_month>
    21ae:	81 11       	cpse	r24, r1
    21b0:	ed cc       	rjmp	.-1574   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:286
          y_month = 4;
    21b2:	f0 92 b5 01 	sts	0x01B5, r15	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:287
          lcd.print(4);
    21b6:	84 e0       	ldi	r24, 0x04	; 4
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:288
          status++;
    21be:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    21c2:	8f 5f       	subi	r24, 0xFF	; 255
    21c4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    21c8:	e1 cc       	rjmp	.-1598   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:290
        }
      } else if (key == '5') {
    21ca:	c5 33       	cpi	r28, 0x35	; 53
    21cc:	81 f4       	brne	.+32     	; 0x21ee <set_clock()+0x7d0>
/home/whisper/Arduino/Azangoo/set_clock.ino:291
        if ( d_month == 0 ) {
    21ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <d_month>
    21d2:	81 11       	cpse	r24, r1
    21d4:	db cc       	rjmp	.-1610   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:292
          y_month = 5;
    21d6:	00 93 b5 01 	sts	0x01B5, r16	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:293
          lcd.print(5);
    21da:	85 e0       	ldi	r24, 0x05	; 5
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:294
          status++;
    21e2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    21e6:	8f 5f       	subi	r24, 0xFF	; 255
    21e8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    21ec:	cf cc       	rjmp	.-1634   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:296
        }
      } else if (key == '6') {
    21ee:	c6 33       	cpi	r28, 0x36	; 54
    21f0:	89 f4       	brne	.+34     	; 0x2214 <set_clock()+0x7f6>
/home/whisper/Arduino/Azangoo/set_clock.ino:297
        if ( d_month == 0 ) {
    21f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <d_month>
    21f6:	81 11       	cpse	r24, r1
    21f8:	c9 cc       	rjmp	.-1646   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:298
          y_month = 6;
    21fa:	86 e0       	ldi	r24, 0x06	; 6
    21fc:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:299
          lcd.print(6);
    2200:	86 e0       	ldi	r24, 0x06	; 6
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:300
          status++;
    2208:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    220c:	8f 5f       	subi	r24, 0xFF	; 255
    220e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2212:	bc cc       	rjmp	.-1672   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:302
        }
      } else if (key == '7') {
    2214:	c7 33       	cpi	r28, 0x37	; 55
    2216:	89 f4       	brne	.+34     	; 0x223a <set_clock()+0x81c>
/home/whisper/Arduino/Azangoo/set_clock.ino:303
        if ( d_month == 0 ) {
    2218:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <d_month>
    221c:	81 11       	cpse	r24, r1
    221e:	b6 cc       	rjmp	.-1684   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:304
          y_month = 7;
    2220:	87 e0       	ldi	r24, 0x07	; 7
    2222:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:305
          lcd.print(7);
    2226:	87 e0       	ldi	r24, 0x07	; 7
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:306
          status++;
    222e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2238:	a9 cc       	rjmp	.-1710   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:308
        }
      } else if (key == '8') {
    223a:	c8 33       	cpi	r28, 0x38	; 56
    223c:	81 f4       	brne	.+32     	; 0x225e <set_clock()+0x840>
/home/whisper/Arduino/Azangoo/set_clock.ino:309
        if ( d_month == 0 ) {
    223e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <d_month>
    2242:	81 11       	cpse	r24, r1
    2244:	a3 cc       	rjmp	.-1722   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:310
          y_month = 8;
    2246:	c0 92 b5 01 	sts	0x01B5, r12	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:311
          lcd.print(8);
    224a:	88 e0       	ldi	r24, 0x08	; 8
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:312
          status++;
    2252:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    225c:	97 cc       	rjmp	.-1746   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:314
        }
      } else if (key == '9') {
    225e:	c9 33       	cpi	r28, 0x39	; 57
    2260:	81 f4       	brne	.+32     	; 0x2282 <set_clock()+0x864>
/home/whisper/Arduino/Azangoo/set_clock.ino:315
        if ( d_month == 0 ) {
    2262:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <d_month>
    2266:	81 11       	cpse	r24, r1
    2268:	91 cc       	rjmp	.-1758   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:316
          y_month = 9;
    226a:	d0 92 b5 01 	sts	0x01B5, r13	; 0x8001b5 <y_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:317
          lcd.print(9);
    226e:	89 e0       	ldi	r24, 0x09	; 9
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:318
          status++;
    2276:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    227a:	8f 5f       	subi	r24, 0xFF	; 255
    227c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2280:	85 cc       	rjmp	.-1782   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:320
        }
      } else if (key == 'A') {
    2282:	c1 34       	cpi	r28, 0x41	; 65
    2284:	21 f4       	brne	.+8      	; 0x228e <set_clock()+0x870>
/home/whisper/Arduino/Azangoo/set_clock.ino:321
        status++;
    2286:	86 e0       	ldi	r24, 0x06	; 6
    2288:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    228c:	7f cc       	rjmp	.-1794   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:322
      } else if (key == 'B') {
    228e:	c2 34       	cpi	r28, 0x42	; 66
    2290:	09 f0       	breq	.+2      	; 0x2294 <set_clock()+0x876>
    2292:	71 ce       	rjmp	.-798    	; 0x1f76 <set_clock()+0x558>
    2294:	11 cf       	rjmp	.-478    	; 0x20b8 <set_clock()+0x69a>
/home/whisper/Arduino/Azangoo/set_clock.ino:330
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 6 ) {
    2296:	d6 30       	cpi	r29, 0x06	; 6
    2298:	09 f0       	breq	.+2      	; 0x229c <set_clock()+0x87e>
    229a:	47 c0       	rjmp	.+142    	; 0x232a <set_clock()+0x90c>
/home/whisper/Arduino/Azangoo/set_clock.ino:331
      lcd.setCursor(8, 1);
    229c:	61 e0       	ldi	r22, 0x01	; 1
    229e:	88 e0       	ldi	r24, 0x08	; 8
    22a0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:332
      if (key == '0') {
    22a4:	c0 33       	cpi	r28, 0x30	; 48
    22a6:	61 f4       	brne	.+24     	; 0x22c0 <set_clock()+0x8a2>
/home/whisper/Arduino/Azangoo/set_clock.ino:333
        d_day = 0;
    22a8:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <d_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:334
        lcd.print(0);
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:335
        status++;
    22b4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    22be:	66 cc       	rjmp	.-1844   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:336
      } else if (key == '1') {
    22c0:	c1 33       	cpi	r28, 0x31	; 49
    22c2:	69 f4       	brne	.+26     	; 0x22de <set_clock()+0x8c0>
/home/whisper/Arduino/Azangoo/set_clock.ino:337
        d_day = 1;
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <d_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:338
        lcd.print(1);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:339
        status++;
    22d2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    22dc:	57 cc       	rjmp	.-1874   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:340
      } else if (key == '2') {
    22de:	c2 33       	cpi	r28, 0x32	; 50
    22e0:	61 f4       	brne	.+24     	; 0x22fa <set_clock()+0x8dc>
/home/whisper/Arduino/Azangoo/set_clock.ino:341
        d_day = 2;
    22e2:	10 93 b4 01 	sts	0x01B4, r17	; 0x8001b4 <d_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:342
        lcd.print(2);
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:343
        status++;
    22ee:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    22f2:	8f 5f       	subi	r24, 0xFF	; 255
    22f4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    22f8:	49 cc       	rjmp	.-1902   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:344
      } else if (key == '3') {
    22fa:	c3 33       	cpi	r28, 0x33	; 51
    22fc:	61 f4       	brne	.+24     	; 0x2316 <set_clock()+0x8f8>
/home/whisper/Arduino/Azangoo/set_clock.ino:345
        d_day = 3;
    22fe:	e0 92 b4 01 	sts	0x01B4, r14	; 0x8001b4 <d_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:346
        lcd.print(3);
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:347
        status++;
    230a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2314:	3b cc       	rjmp	.-1930   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:348
      } else if (key == 'A') {
    2316:	c1 34       	cpi	r28, 0x41	; 65
    2318:	21 f4       	brne	.+8      	; 0x2322 <set_clock()+0x904>
/home/whisper/Arduino/Azangoo/set_clock.ino:349
        status++;
    231a:	87 e0       	ldi	r24, 0x07	; 7
    231c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2320:	35 cc       	rjmp	.-1942   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:350
      } else if (key == 'B') {
    2322:	c2 34       	cpi	r28, 0x42	; 66
    2324:	09 f0       	breq	.+2      	; 0x2328 <set_clock()+0x90a>
    2326:	27 ce       	rjmp	.-946    	; 0x1f76 <set_clock()+0x558>
    2328:	f3 ce       	rjmp	.-538    	; 0x2110 <set_clock()+0x6f2>
/home/whisper/Arduino/Azangoo/set_clock.ino:358
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 7 ) {
    232a:	d7 30       	cpi	r29, 0x07	; 7
    232c:	09 f0       	breq	.+2      	; 0x2330 <set_clock()+0x912>
    232e:	c4 c0       	rjmp	.+392    	; 0x24b8 <set_clock()+0xa9a>
/home/whisper/Arduino/Azangoo/set_clock.ino:359
      lcd.setCursor(9, 1);
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	89 e0       	ldi	r24, 0x09	; 9
    2334:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:360
      if (key == '0') {
    2338:	c0 33       	cpi	r28, 0x30	; 48
    233a:	61 f4       	brne	.+24     	; 0x2354 <set_clock()+0x936>
/home/whisper/Arduino/Azangoo/set_clock.ino:361
        y_day = 0;
    233c:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:362
        lcd.print(0);
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:363
        status++;
    2348:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2352:	1c cc       	rjmp	.-1992   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:364
      } else if (key == '1') {
    2354:	c1 33       	cpi	r28, 0x31	; 49
    2356:	69 f4       	brne	.+26     	; 0x2372 <set_clock()+0x954>
/home/whisper/Arduino/Azangoo/set_clock.ino:365
        y_day = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:366
        lcd.print(1);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:367
        status++;
    2366:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    236a:	8f 5f       	subi	r24, 0xFF	; 255
    236c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2370:	0d cc       	rjmp	.-2022   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:368
      } else if (key == '2') {
    2372:	c2 33       	cpi	r28, 0x32	; 50
    2374:	89 f4       	brne	.+34     	; 0x2398 <set_clock()+0x97a>
/home/whisper/Arduino/Azangoo/set_clock.ino:369
        if ( d_day < 3 ) {
    2376:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d_day>
    237a:	83 30       	cpi	r24, 0x03	; 3
    237c:	08 f0       	brcs	.+2      	; 0x2380 <set_clock()+0x962>
    237e:	06 cc       	rjmp	.-2036   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:370
          y_day = 2;
    2380:	10 93 b3 01 	sts	0x01B3, r17	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:371
          lcd.print(2);
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:372
          status++;
    238c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2396:	fa cb       	rjmp	.-2060   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:374
        }
      } else if (key == '3') {
    2398:	c3 33       	cpi	r28, 0x33	; 51
    239a:	89 f4       	brne	.+34     	; 0x23be <set_clock()+0x9a0>
/home/whisper/Arduino/Azangoo/set_clock.ino:375
        if ( d_day < 3 ) {
    239c:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d_day>
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	08 f0       	brcs	.+2      	; 0x23a6 <set_clock()+0x988>
    23a4:	f3 cb       	rjmp	.-2074   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:376
          y_day = 3;
    23a6:	e0 92 b3 01 	sts	0x01B3, r14	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:377
          lcd.print(3);
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:378
          status++;
    23b2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    23b6:	8f 5f       	subi	r24, 0xFF	; 255
    23b8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    23bc:	e7 cb       	rjmp	.-2098   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:380
        }
      } else if (key == '4') {
    23be:	c4 33       	cpi	r28, 0x34	; 52
    23c0:	89 f4       	brne	.+34     	; 0x23e4 <set_clock()+0x9c6>
/home/whisper/Arduino/Azangoo/set_clock.ino:381
        if ( d_day < 3 ) {
    23c2:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d_day>
    23c6:	83 30       	cpi	r24, 0x03	; 3
    23c8:	08 f0       	brcs	.+2      	; 0x23cc <set_clock()+0x9ae>
    23ca:	e0 cb       	rjmp	.-2112   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:382
          y_day = 4;
    23cc:	f0 92 b3 01 	sts	0x01B3, r15	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:383
          lcd.print(4);
    23d0:	84 e0       	ldi	r24, 0x04	; 4
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:384
          status++;
    23d8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    23e2:	d4 cb       	rjmp	.-2136   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:386
        }
      } else if (key == '5') {
    23e4:	c5 33       	cpi	r28, 0x35	; 53
    23e6:	89 f4       	brne	.+34     	; 0x240a <set_clock()+0x9ec>
/home/whisper/Arduino/Azangoo/set_clock.ino:387
        if ( d_day < 3 ) {
    23e8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d_day>
    23ec:	83 30       	cpi	r24, 0x03	; 3
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <set_clock()+0x9d4>
    23f0:	cd cb       	rjmp	.-2150   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:388
          y_day = 5;
    23f2:	00 93 b3 01 	sts	0x01B3, r16	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:389
          lcd.print(5);
    23f6:	85 e0       	ldi	r24, 0x05	; 5
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:390
          status++;
    23fe:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2402:	8f 5f       	subi	r24, 0xFF	; 255
    2404:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2408:	c1 cb       	rjmp	.-2174   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:392
        }
      } else if (key == '6') {
    240a:	c6 33       	cpi	r28, 0x36	; 54
    240c:	91 f4       	brne	.+36     	; 0x2432 <set_clock()+0xa14>
/home/whisper/Arduino/Azangoo/set_clock.ino:393
        if ( d_day < 3 ) {
    240e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d_day>
    2412:	83 30       	cpi	r24, 0x03	; 3
    2414:	08 f0       	brcs	.+2      	; 0x2418 <set_clock()+0x9fa>
    2416:	ba cb       	rjmp	.-2188   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:394
          y_day = 6;
    2418:	86 e0       	ldi	r24, 0x06	; 6
    241a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:395
          lcd.print(6);
    241e:	86 e0       	ldi	r24, 0x06	; 6
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:396
          status++;
    2426:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    242a:	8f 5f       	subi	r24, 0xFF	; 255
    242c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2430:	ad cb       	rjmp	.-2214   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:398
        }
      } else if (key == '7') {
    2432:	c7 33       	cpi	r28, 0x37	; 55
    2434:	91 f4       	brne	.+36     	; 0x245a <set_clock()+0xa3c>
/home/whisper/Arduino/Azangoo/set_clock.ino:399
        if ( d_day < 3 ) {
    2436:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d_day>
    243a:	83 30       	cpi	r24, 0x03	; 3
    243c:	08 f0       	brcs	.+2      	; 0x2440 <set_clock()+0xa22>
    243e:	a6 cb       	rjmp	.-2228   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:400
          y_day = 7;
    2440:	87 e0       	ldi	r24, 0x07	; 7
    2442:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:401
          lcd.print(7);
    2446:	87 e0       	ldi	r24, 0x07	; 7
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:402
          status++;
    244e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2452:	8f 5f       	subi	r24, 0xFF	; 255
    2454:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2458:	99 cb       	rjmp	.-2254   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:404
        }
      } else if (key == '8') {
    245a:	c8 33       	cpi	r28, 0x38	; 56
    245c:	89 f4       	brne	.+34     	; 0x2480 <set_clock()+0xa62>
/home/whisper/Arduino/Azangoo/set_clock.ino:405
        if ( d_day < 3 ) {
    245e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d_day>
    2462:	83 30       	cpi	r24, 0x03	; 3
    2464:	08 f0       	brcs	.+2      	; 0x2468 <set_clock()+0xa4a>
    2466:	92 cb       	rjmp	.-2268   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:406
          y_day = 8;
    2468:	c0 92 b3 01 	sts	0x01B3, r12	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:407
          lcd.print(8);
    246c:	88 e0       	ldi	r24, 0x08	; 8
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:408
          status++;
    2474:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2478:	8f 5f       	subi	r24, 0xFF	; 255
    247a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    247e:	86 cb       	rjmp	.-2292   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:410
        }
      } else if (key == '9') {
    2480:	c9 33       	cpi	r28, 0x39	; 57
    2482:	89 f4       	brne	.+34     	; 0x24a6 <set_clock()+0xa88>
/home/whisper/Arduino/Azangoo/set_clock.ino:411
        if ( d_day < 3 ) {
    2484:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d_day>
    2488:	83 30       	cpi	r24, 0x03	; 3
    248a:	08 f0       	brcs	.+2      	; 0x248e <set_clock()+0xa70>
    248c:	7f cb       	rjmp	.-2306   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:412
          y_day = 9;
    248e:	d0 92 b3 01 	sts	0x01B3, r13	; 0x8001b3 <y_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:413
          lcd.print(9);
    2492:	89 e0       	ldi	r24, 0x09	; 9
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:414
          status++;
    249a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    249e:	8f 5f       	subi	r24, 0xFF	; 255
    24a0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    24a4:	73 cb       	rjmp	.-2330   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:416
        }
      } else if (key == 'A') {
    24a6:	c1 34       	cpi	r28, 0x41	; 65
    24a8:	19 f4       	brne	.+6      	; 0x24b0 <set_clock()+0xa92>
/home/whisper/Arduino/Azangoo/set_clock.ino:417
        status++;
    24aa:	c0 92 2a 02 	sts	0x022A, r12	; 0x80022a <status>
    24ae:	6e cb       	rjmp	.-2340   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:418
      } else if (key == 'B') {
    24b0:	c2 34       	cpi	r28, 0x42	; 66
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <set_clock()+0xa98>
    24b4:	60 cd       	rjmp	.-1344   	; 0x1f76 <set_clock()+0x558>
    24b6:	e7 ce       	rjmp	.-562    	; 0x2286 <set_clock()+0x868>
/home/whisper/Arduino/Azangoo/set_clock.ino:426
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 8 ) {
    24b8:	d8 30       	cpi	r29, 0x08	; 8
    24ba:	09 f0       	breq	.+2      	; 0x24be <set_clock()+0xaa0>
    24bc:	80 c0       	rjmp	.+256    	; 0x25be <set_clock()+0xba0>
/home/whisper/Arduino/Azangoo/set_clock.ino:427
      if (time_set_status) {
    24be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    24c2:	88 23       	and	r24, r24
    24c4:	c9 f1       	breq	.+114    	; 0x2538 <set_clock()+0xb1a>
/home/whisper/Arduino/Azangoo/set_clock.ino:428
        lcd.clear();
    24c6:	0e 94 30 06 	call	0xc60	; 0xc60 <LiquidCrystal::clear() [clone .constprop.73]>
/home/whisper/Arduino/Azangoo/set_clock.ino:429
        lcd.print(F("Set Time:"));
    24ca:	82 e7       	ldi	r24, 0x72	; 114
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:430
        lcd.setCursor(0, 1);
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:431
        if (Hour < 10) {
    24da:	d0 91 1c 02 	lds	r29, 0x021C	; 0x80021c <Hour>
    24de:	da 30       	cpi	r29, 0x0A	; 10
    24e0:	20 f4       	brcc	.+8      	; 0x24ea <set_clock()+0xacc>
/home/whisper/Arduino/Azangoo/set_clock.ino:432
          lcd.print(F("0"));
    24e2:	80 e7       	ldi	r24, 0x70	; 112
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:434
        }
        lcd.print(Hour);
    24ea:	8d 2f       	mov	r24, r29
    24ec:	0e 94 df 0c 	call	0x19be	; 0x19be <Print::print(unsigned char, int) [clone .constprop.36]>
/home/whisper/Arduino/Azangoo/set_clock.ino:435
        lcd.print(F(":"));
    24f0:	8e e6       	ldi	r24, 0x6E	; 110
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:436
        if (Minute < 10) {
    24f8:	d0 91 1a 02 	lds	r29, 0x021A	; 0x80021a <Minute>
    24fc:	da 30       	cpi	r29, 0x0A	; 10
    24fe:	20 f4       	brcc	.+8      	; 0x2508 <set_clock()+0xaea>
/home/whisper/Arduino/Azangoo/set_clock.ino:437
          lcd.print(F("0"));
    2500:	8c e6       	ldi	r24, 0x6C	; 108
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:439
        }
        lcd.print(Minute);
    2508:	8d 2f       	mov	r24, r29
    250a:	0e 94 df 0c 	call	0x19be	; 0x19be <Print::print(unsigned char, int) [clone .constprop.36]>
/home/whisper/Arduino/Azangoo/set_clock.ino:440
        lcd.print(F(":"));
    250e:	8a e6       	ldi	r24, 0x6A	; 106
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:441
        if (Second < 10) {
    2516:	d0 91 18 02 	lds	r29, 0x0218	; 0x800218 <Second>
    251a:	da 30       	cpi	r29, 0x0A	; 10
    251c:	20 f4       	brcc	.+8      	; 0x2526 <set_clock()+0xb08>
/home/whisper/Arduino/Azangoo/set_clock.ino:442
          lcd.print(F("0"));
    251e:	88 e6       	ldi	r24, 0x68	; 104
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/set_clock.ino:444
        }
        lcd.print(Second);
    2526:	8d 2f       	mov	r24, r29
    2528:	0e 94 df 0c 	call	0x19be	; 0x19be <Print::print(unsigned char, int) [clone .constprop.36]>
/home/whisper/Arduino/Azangoo/set_clock.ino:445
        lcd.setCursor(0, 1);
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	80 e0       	ldi	r24, 0x00	; 0
    2530:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:446
        time_set_status = false;
    2534:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
/home/whisper/Arduino/Azangoo/set_clock.ino:448
      }
      if (key == '0') {
    2538:	c0 33       	cpi	r28, 0x30	; 48
    253a:	61 f4       	brne	.+24     	; 0x2554 <set_clock()+0xb36>
/home/whisper/Arduino/Azangoo/set_clock.ino:449
        d_hour = 0;
    253c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <d_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:450
        lcd.print(0);
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	80 e0       	ldi	r24, 0x00	; 0
    2544:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:451
        status++;
    2548:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    254c:	8f 5f       	subi	r24, 0xFF	; 255
    254e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2552:	1c cb       	rjmp	.-2504   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:452
      } else if (key == '1') {
    2554:	c1 33       	cpi	r28, 0x31	; 49
    2556:	69 f4       	brne	.+26     	; 0x2572 <set_clock()+0xb54>
/home/whisper/Arduino/Azangoo/set_clock.ino:453
        d_hour = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <d_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:454
        lcd.print(1);
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:455
        status++;
    2566:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    256a:	8f 5f       	subi	r24, 0xFF	; 255
    256c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2570:	0d cb       	rjmp	.-2534   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:456
      } else if (key == '2') {
    2572:	c2 33       	cpi	r28, 0x32	; 50
    2574:	61 f4       	brne	.+24     	; 0x258e <set_clock()+0xb70>
/home/whisper/Arduino/Azangoo/set_clock.ino:457
        d_hour = 2;
    2576:	10 93 b2 01 	sts	0x01B2, r17	; 0x8001b2 <d_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:458
        lcd.print(2);
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:459
        status++;
    2582:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2586:	8f 5f       	subi	r24, 0xFF	; 255
    2588:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    258c:	ff ca       	rjmp	.-2562   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:460
      } else if (key == 'A') {
    258e:	c1 34       	cpi	r28, 0x41	; 65
    2590:	31 f4       	brne	.+12     	; 0x259e <set_clock()+0xb80>
/home/whisper/Arduino/Azangoo/set_clock.ino:461
        status++;
    2592:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    259c:	f7 ca       	rjmp	.-2578   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:462
      } else if (key == 'B') {
    259e:	c2 34       	cpi	r28, 0x42	; 66
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <set_clock()+0xb86>
    25a2:	e9 cc       	rjmp	.-1582   	; 0x1f76 <set_clock()+0x558>
/home/whisper/Arduino/Azangoo/set_clock.ino:463
        status--;
    25a4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    25a8:	81 50       	subi	r24, 0x01	; 1
    25aa:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
/home/whisper/Arduino/Azangoo/set_clock.ino:464
        if (set_clock_only) {
    25ae:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <set_clock_only>
    25b2:	88 23       	and	r24, r24
    25b4:	09 f4       	brne	.+2      	; 0x25b8 <set_clock()+0xb9a>
    25b6:	ea ca       	rjmp	.-2604   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:465
          set_clock_only = false;
    25b8:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <set_clock_only>
    25bc:	8d cb       	rjmp	.-2278   	; 0x1cd8 <set_clock()+0x2ba>
/home/whisper/Arduino/Azangoo/set_clock.ino:475
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 9 ) {
    25be:	d9 30       	cpi	r29, 0x09	; 9
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <set_clock()+0xba6>
    25c2:	ba c0       	rjmp	.+372    	; 0x2738 <set_clock()+0xd1a>
/home/whisper/Arduino/Azangoo/set_clock.ino:476
      lcd.setCursor(1, 1);
    25c4:	61 e0       	ldi	r22, 0x01	; 1
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:477
      if (key == '0') {
    25cc:	c0 33       	cpi	r28, 0x30	; 48
    25ce:	61 f4       	brne	.+24     	; 0x25e8 <set_clock()+0xbca>
/home/whisper/Arduino/Azangoo/set_clock.ino:478
        y_hour = 0;
    25d0:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:479
        lcd.print(0);
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:480
        status++;
    25dc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    25e6:	d2 ca       	rjmp	.-2652   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:481
      } else if (key == '1') {
    25e8:	c1 33       	cpi	r28, 0x31	; 49
    25ea:	69 f4       	brne	.+26     	; 0x2606 <set_clock()+0xbe8>
/home/whisper/Arduino/Azangoo/set_clock.ino:482
        y_hour = 1;
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:483
        lcd.print(1);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:484
        status++;
    25fa:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2604:	c3 ca       	rjmp	.-2682   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:485
      } else if (key == '2') {
    2606:	c2 33       	cpi	r28, 0x32	; 50
    2608:	61 f4       	brne	.+24     	; 0x2622 <set_clock()+0xc04>
/home/whisper/Arduino/Azangoo/set_clock.ino:486
        y_hour = 2;
    260a:	10 93 b1 01 	sts	0x01B1, r17	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:487
        lcd.print(2);
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:488
        status++;
    2616:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    261a:	8f 5f       	subi	r24, 0xFF	; 255
    261c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2620:	b5 ca       	rjmp	.-2710   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:489
      } else if (key == '3') {
    2622:	c3 33       	cpi	r28, 0x33	; 51
    2624:	61 f4       	brne	.+24     	; 0x263e <set_clock()+0xc20>
/home/whisper/Arduino/Azangoo/set_clock.ino:490
        y_hour = 3;
    2626:	e0 92 b1 01 	sts	0x01B1, r14	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:491
        lcd.print(3);
    262a:	83 e0       	ldi	r24, 0x03	; 3
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:492
        status++;
    2632:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2636:	8f 5f       	subi	r24, 0xFF	; 255
    2638:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    263c:	a7 ca       	rjmp	.-2738   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:493
      } else if (key == '4') {
    263e:	c4 33       	cpi	r28, 0x34	; 52
    2640:	89 f4       	brne	.+34     	; 0x2664 <set_clock()+0xc46>
/home/whisper/Arduino/Azangoo/set_clock.ino:494
        if ( d_hour < 3) {
    2642:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <d_hour>
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	08 f0       	brcs	.+2      	; 0x264c <set_clock()+0xc2e>
    264a:	a0 ca       	rjmp	.-2752   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:495
          y_hour = 4;
    264c:	f0 92 b1 01 	sts	0x01B1, r15	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:496
          lcd.print(4);
    2650:	84 e0       	ldi	r24, 0x04	; 4
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:497
          status++;
    2658:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    265c:	8f 5f       	subi	r24, 0xFF	; 255
    265e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2662:	94 ca       	rjmp	.-2776   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:499
        }
      } else if (key == '5') {
    2664:	c5 33       	cpi	r28, 0x35	; 53
    2666:	89 f4       	brne	.+34     	; 0x268a <set_clock()+0xc6c>
/home/whisper/Arduino/Azangoo/set_clock.ino:500
        if ( d_hour < 2) {
    2668:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <d_hour>
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	08 f0       	brcs	.+2      	; 0x2672 <set_clock()+0xc54>
    2670:	8d ca       	rjmp	.-2790   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:501
          y_hour = 5;
    2672:	00 93 b1 01 	sts	0x01B1, r16	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:502
          lcd.print(5);
    2676:	85 e0       	ldi	r24, 0x05	; 5
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:503
          status++;
    267e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2682:	8f 5f       	subi	r24, 0xFF	; 255
    2684:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2688:	81 ca       	rjmp	.-2814   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:505
        }
      } else if (key == '6') {
    268a:	c6 33       	cpi	r28, 0x36	; 54
    268c:	91 f4       	brne	.+36     	; 0x26b2 <set_clock()+0xc94>
/home/whisper/Arduino/Azangoo/set_clock.ino:506
        if ( d_hour < 2) {
    268e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <d_hour>
    2692:	82 30       	cpi	r24, 0x02	; 2
    2694:	08 f0       	brcs	.+2      	; 0x2698 <set_clock()+0xc7a>
    2696:	7a ca       	rjmp	.-2828   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:507
          y_hour = 6;
    2698:	86 e0       	ldi	r24, 0x06	; 6
    269a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:508
          lcd.print(6);
    269e:	86 e0       	ldi	r24, 0x06	; 6
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:509
          status++;
    26a6:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    26aa:	8f 5f       	subi	r24, 0xFF	; 255
    26ac:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    26b0:	6d ca       	rjmp	.-2854   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:511
        }
      } else if (key == '7') {
    26b2:	c7 33       	cpi	r28, 0x37	; 55
    26b4:	91 f4       	brne	.+36     	; 0x26da <set_clock()+0xcbc>
/home/whisper/Arduino/Azangoo/set_clock.ino:512
        if ( d_hour < 2) {
    26b6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <d_hour>
    26ba:	82 30       	cpi	r24, 0x02	; 2
    26bc:	08 f0       	brcs	.+2      	; 0x26c0 <set_clock()+0xca2>
    26be:	66 ca       	rjmp	.-2868   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:513
          y_hour = 7;
    26c0:	87 e0       	ldi	r24, 0x07	; 7
    26c2:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:514
          lcd.print(7);
    26c6:	87 e0       	ldi	r24, 0x07	; 7
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:515
          status++;
    26ce:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    26d2:	8f 5f       	subi	r24, 0xFF	; 255
    26d4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    26d8:	59 ca       	rjmp	.-2894   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:517
        }
      } else if (key == '8') {
    26da:	c8 33       	cpi	r28, 0x38	; 56
    26dc:	89 f4       	brne	.+34     	; 0x2700 <set_clock()+0xce2>
/home/whisper/Arduino/Azangoo/set_clock.ino:518
        if ( d_hour < 2) {
    26de:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <d_hour>
    26e2:	82 30       	cpi	r24, 0x02	; 2
    26e4:	08 f0       	brcs	.+2      	; 0x26e8 <set_clock()+0xcca>
    26e6:	52 ca       	rjmp	.-2908   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:519
          y_hour = 8;
    26e8:	c0 92 b1 01 	sts	0x01B1, r12	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:520
          lcd.print(8);
    26ec:	88 e0       	ldi	r24, 0x08	; 8
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:521
          status++;
    26f4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    26f8:	8f 5f       	subi	r24, 0xFF	; 255
    26fa:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    26fe:	46 ca       	rjmp	.-2932   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:523
        }
      } else if (key == '9') {
    2700:	c9 33       	cpi	r28, 0x39	; 57
    2702:	89 f4       	brne	.+34     	; 0x2726 <set_clock()+0xd08>
/home/whisper/Arduino/Azangoo/set_clock.ino:524
        if ( d_hour < 2) {
    2704:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <d_hour>
    2708:	82 30       	cpi	r24, 0x02	; 2
    270a:	08 f0       	brcs	.+2      	; 0x270e <set_clock()+0xcf0>
    270c:	3f ca       	rjmp	.-2946   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:525
          y_hour = 9;
    270e:	d0 92 b1 01 	sts	0x01B1, r13	; 0x8001b1 <y_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:526
          lcd.print(9);
    2712:	89 e0       	ldi	r24, 0x09	; 9
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:527
          status++;
    271a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2724:	33 ca       	rjmp	.-2970   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:529
        }
      } else if (key == 'A') {
    2726:	c1 34       	cpi	r28, 0x41	; 65
    2728:	19 f4       	brne	.+6      	; 0x2730 <set_clock()+0xd12>
/home/whisper/Arduino/Azangoo/set_clock.ino:530
        status++;
    272a:	70 92 2a 02 	sts	0x022A, r7	; 0x80022a <status>
    272e:	2e ca       	rjmp	.-2980   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:531
      } else if (key == 'B') {
    2730:	c2 34       	cpi	r28, 0x42	; 66
    2732:	09 f0       	breq	.+2      	; 0x2736 <set_clock()+0xd18>
    2734:	20 cc       	rjmp	.-1984   	; 0x1f76 <set_clock()+0x558>
    2736:	b9 ce       	rjmp	.-654    	; 0x24aa <set_clock()+0xa8c>
/home/whisper/Arduino/Azangoo/set_clock.ino:539
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 10 ) {
    2738:	da 30       	cpi	r29, 0x0A	; 10
    273a:	09 f0       	breq	.+2      	; 0x273e <set_clock()+0xd20>
    273c:	64 c0       	rjmp	.+200    	; 0x2806 <set_clock()+0xde8>
/home/whisper/Arduino/Azangoo/set_clock.ino:540
      lcd.setCursor(3, 1);
    273e:	61 e0       	ldi	r22, 0x01	; 1
    2740:	83 e0       	ldi	r24, 0x03	; 3
    2742:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:541
      if (key == '0') {
    2746:	c0 33       	cpi	r28, 0x30	; 48
    2748:	61 f4       	brne	.+24     	; 0x2762 <set_clock()+0xd44>
/home/whisper/Arduino/Azangoo/set_clock.ino:542
        d_minute = 0;
    274a:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <d_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:543
        lcd.print(0);
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:544
        status++;
    2756:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2760:	15 ca       	rjmp	.-3030   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:545
      } else if (key == '1') {
    2762:	c1 33       	cpi	r28, 0x31	; 49
    2764:	69 f4       	brne	.+26     	; 0x2780 <set_clock()+0xd62>
/home/whisper/Arduino/Azangoo/set_clock.ino:546
        d_minute = 1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <d_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:547
        lcd.print(1);
    276c:	81 e0       	ldi	r24, 0x01	; 1
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:548
        status++;
    2774:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    277e:	06 ca       	rjmp	.-3060   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:549
      } else if (key == '2') {
    2780:	c2 33       	cpi	r28, 0x32	; 50
    2782:	61 f4       	brne	.+24     	; 0x279c <set_clock()+0xd7e>
/home/whisper/Arduino/Azangoo/set_clock.ino:550
        d_minute = 2;
    2784:	10 93 b0 01 	sts	0x01B0, r17	; 0x8001b0 <d_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:551
        lcd.print(2);
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:552
        status++;
    2790:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2794:	8f 5f       	subi	r24, 0xFF	; 255
    2796:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    279a:	f8 c9       	rjmp	.-3088   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:553
      } else if (key == '3') {
    279c:	c3 33       	cpi	r28, 0x33	; 51
    279e:	61 f4       	brne	.+24     	; 0x27b8 <set_clock()+0xd9a>
/home/whisper/Arduino/Azangoo/set_clock.ino:554
        d_minute = 3;
    27a0:	e0 92 b0 01 	sts	0x01B0, r14	; 0x8001b0 <d_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:555
        lcd.print(3);
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:556
        status++;
    27ac:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    27b0:	8f 5f       	subi	r24, 0xFF	; 255
    27b2:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    27b6:	ea c9       	rjmp	.-3116   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:557
      } else if (key == '4') {
    27b8:	c4 33       	cpi	r28, 0x34	; 52
    27ba:	61 f4       	brne	.+24     	; 0x27d4 <set_clock()+0xdb6>
/home/whisper/Arduino/Azangoo/set_clock.ino:558
        d_minute = 4;
    27bc:	f0 92 b0 01 	sts	0x01B0, r15	; 0x8001b0 <d_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:559
        lcd.print(4);
    27c0:	84 e0       	ldi	r24, 0x04	; 4
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:560
        status++;
    27c8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    27d2:	dc c9       	rjmp	.-3144   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:561
      } else if (key == '5') {
    27d4:	c5 33       	cpi	r28, 0x35	; 53
    27d6:	61 f4       	brne	.+24     	; 0x27f0 <set_clock()+0xdd2>
/home/whisper/Arduino/Azangoo/set_clock.ino:562
        d_minute = 5;
    27d8:	00 93 b0 01 	sts	0x01B0, r16	; 0x8001b0 <d_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:563
        lcd.print(5);
    27dc:	85 e0       	ldi	r24, 0x05	; 5
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:564
        status++;
    27e4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    27e8:	8f 5f       	subi	r24, 0xFF	; 255
    27ea:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    27ee:	ce c9       	rjmp	.-3172   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:565
      } else if (key == 'A') {
    27f0:	c1 34       	cpi	r28, 0x41	; 65
    27f2:	19 f4       	brne	.+6      	; 0x27fa <set_clock()+0xddc>
/home/whisper/Arduino/Azangoo/set_clock.ino:566
        status++;
    27f4:	90 92 2a 02 	sts	0x022A, r9	; 0x80022a <status>
    27f8:	c9 c9       	rjmp	.-3182   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:567
      } else if (key == 'B') {
    27fa:	c2 34       	cpi	r28, 0x42	; 66
    27fc:	09 f0       	breq	.+2      	; 0x2800 <set_clock()+0xde2>
    27fe:	bb cb       	rjmp	.-2186   	; 0x1f76 <set_clock()+0x558>
/home/whisper/Arduino/Azangoo/set_clock.ino:568
        status--;
    2800:	d0 92 2a 02 	sts	0x022A, r13	; 0x80022a <status>
    2804:	c3 c9       	rjmp	.-3194   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:575
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 11 ) {
    2806:	db 30       	cpi	r29, 0x0B	; 11
    2808:	09 f0       	breq	.+2      	; 0x280c <set_clock()+0xdee>
    280a:	9c c0       	rjmp	.+312    	; 0x2944 <set_clock()+0xf26>
/home/whisper/Arduino/Azangoo/set_clock.ino:576
      lcd.setCursor(4, 1);
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	84 e0       	ldi	r24, 0x04	; 4
    2810:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:577
      if (key == '0') {
    2814:	c0 33       	cpi	r28, 0x30	; 48
    2816:	61 f4       	brne	.+24     	; 0x2830 <set_clock()+0xe12>
/home/whisper/Arduino/Azangoo/set_clock.ino:578
        y_minute = 0;
    2818:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:579
        lcd.print(0);
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:580
        status++;
    2824:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2828:	8f 5f       	subi	r24, 0xFF	; 255
    282a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    282e:	ae c9       	rjmp	.-3236   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:581
      } else if (key == '1') {
    2830:	c1 33       	cpi	r28, 0x31	; 49
    2832:	69 f4       	brne	.+26     	; 0x284e <set_clock()+0xe30>
/home/whisper/Arduino/Azangoo/set_clock.ino:582
        y_minute = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:583
        lcd.print(1);
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:584
        status++;
    2842:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    284c:	9f c9       	rjmp	.-3266   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:585
      } else if (key == '2') {
    284e:	c2 33       	cpi	r28, 0x32	; 50
    2850:	61 f4       	brne	.+24     	; 0x286a <set_clock()+0xe4c>
/home/whisper/Arduino/Azangoo/set_clock.ino:586
        y_minute = 2;
    2852:	10 93 af 01 	sts	0x01AF, r17	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:587
        lcd.print(2);
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:588
        status++;
    285e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2862:	8f 5f       	subi	r24, 0xFF	; 255
    2864:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2868:	91 c9       	rjmp	.-3294   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:589
      } else if (key == '3') {
    286a:	c3 33       	cpi	r28, 0x33	; 51
    286c:	61 f4       	brne	.+24     	; 0x2886 <set_clock()+0xe68>
/home/whisper/Arduino/Azangoo/set_clock.ino:590
        y_minute = 3;
    286e:	e0 92 af 01 	sts	0x01AF, r14	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:591
        lcd.print(3);
    2872:	83 e0       	ldi	r24, 0x03	; 3
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:592
        status++;
    287a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2884:	83 c9       	rjmp	.-3322   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:593
      } else if (key == '4') {
    2886:	c4 33       	cpi	r28, 0x34	; 52
    2888:	61 f4       	brne	.+24     	; 0x28a2 <set_clock()+0xe84>
/home/whisper/Arduino/Azangoo/set_clock.ino:594
        y_minute = 4;
    288a:	f0 92 af 01 	sts	0x01AF, r15	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:595
        lcd.print(4);
    288e:	84 e0       	ldi	r24, 0x04	; 4
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:596
        status++;
    2896:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    289a:	8f 5f       	subi	r24, 0xFF	; 255
    289c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    28a0:	75 c9       	rjmp	.-3350   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:597
      } else if (key == '5') {
    28a2:	c5 33       	cpi	r28, 0x35	; 53
    28a4:	61 f4       	brne	.+24     	; 0x28be <set_clock()+0xea0>
/home/whisper/Arduino/Azangoo/set_clock.ino:598
        y_minute = 5;
    28a6:	00 93 af 01 	sts	0x01AF, r16	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:599
        lcd.print(5);
    28aa:	85 e0       	ldi	r24, 0x05	; 5
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:600
        status++;
    28b2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    28b6:	8f 5f       	subi	r24, 0xFF	; 255
    28b8:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    28bc:	67 c9       	rjmp	.-3378   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:601
      } else if (key == '6') {
    28be:	c6 33       	cpi	r28, 0x36	; 54
    28c0:	69 f4       	brne	.+26     	; 0x28dc <set_clock()+0xebe>
/home/whisper/Arduino/Azangoo/set_clock.ino:602
        y_minute = 6;
    28c2:	86 e0       	ldi	r24, 0x06	; 6
    28c4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:603
        lcd.print(6);
    28c8:	86 e0       	ldi	r24, 0x06	; 6
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:604
        status++;
    28d0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    28da:	58 c9       	rjmp	.-3408   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:605
      } else if (key == '7') {
    28dc:	c7 33       	cpi	r28, 0x37	; 55
    28de:	69 f4       	brne	.+26     	; 0x28fa <set_clock()+0xedc>
/home/whisper/Arduino/Azangoo/set_clock.ino:606
        y_minute = 7;
    28e0:	87 e0       	ldi	r24, 0x07	; 7
    28e2:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:607
        lcd.print(7);
    28e6:	87 e0       	ldi	r24, 0x07	; 7
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:608
        status++;
    28ee:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    28f2:	8f 5f       	subi	r24, 0xFF	; 255
    28f4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    28f8:	49 c9       	rjmp	.-3438   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:609
      } else if (key == '8') {
    28fa:	c8 33       	cpi	r28, 0x38	; 56
    28fc:	61 f4       	brne	.+24     	; 0x2916 <set_clock()+0xef8>
/home/whisper/Arduino/Azangoo/set_clock.ino:610
        y_minute = 8;
    28fe:	c0 92 af 01 	sts	0x01AF, r12	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:611
        lcd.print(8);
    2902:	88 e0       	ldi	r24, 0x08	; 8
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:612
        status++;
    290a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    290e:	8f 5f       	subi	r24, 0xFF	; 255
    2910:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2914:	3b c9       	rjmp	.-3466   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:613
      } else if (key == '9') {
    2916:	c9 33       	cpi	r28, 0x39	; 57
    2918:	61 f4       	brne	.+24     	; 0x2932 <set_clock()+0xf14>
/home/whisper/Arduino/Azangoo/set_clock.ino:614
        y_minute = 9;
    291a:	d0 92 af 01 	sts	0x01AF, r13	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:615
        lcd.print(9);
    291e:	89 e0       	ldi	r24, 0x09	; 9
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:616
        status++;
    2926:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2930:	2d c9       	rjmp	.-3494   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:617
      } else if (key == 'A') {
    2932:	c1 34       	cpi	r28, 0x41	; 65
    2934:	19 f4       	brne	.+6      	; 0x293c <set_clock()+0xf1e>
/home/whisper/Arduino/Azangoo/set_clock.ino:618
        status++;
    2936:	a0 92 2a 02 	sts	0x022A, r10	; 0x80022a <status>
    293a:	28 c9       	rjmp	.-3504   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:619
      } else if (key == 'B') {
    293c:	c2 34       	cpi	r28, 0x42	; 66
    293e:	09 f0       	breq	.+2      	; 0x2942 <set_clock()+0xf24>
    2940:	1a cb       	rjmp	.-2508   	; 0x1f76 <set_clock()+0x558>
    2942:	f3 ce       	rjmp	.-538    	; 0x272a <set_clock()+0xd0c>
/home/whisper/Arduino/Azangoo/set_clock.ino:627
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 12 ) {
    2944:	dc 30       	cpi	r29, 0x0C	; 12
    2946:	09 f0       	breq	.+2      	; 0x294a <set_clock()+0xf2c>
    2948:	62 c0       	rjmp	.+196    	; 0x2a0e <set_clock()+0xff0>
/home/whisper/Arduino/Azangoo/set_clock.ino:628
      lcd.setCursor(6, 1);
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	86 e0       	ldi	r24, 0x06	; 6
    294e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:629
      if (key == '0') {
    2952:	c0 33       	cpi	r28, 0x30	; 48
    2954:	61 f4       	brne	.+24     	; 0x296e <set_clock()+0xf50>
/home/whisper/Arduino/Azangoo/set_clock.ino:630
        d_second = 0;
    2956:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <d_second>
/home/whisper/Arduino/Azangoo/set_clock.ino:631
        lcd.print(0);
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:632
        status++;
    2962:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    296c:	0f c9       	rjmp	.-3554   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:633
      } else if (key == '1') {
    296e:	c1 33       	cpi	r28, 0x31	; 49
    2970:	69 f4       	brne	.+26     	; 0x298c <set_clock()+0xf6e>
/home/whisper/Arduino/Azangoo/set_clock.ino:634
        d_second = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <d_second>
/home/whisper/Arduino/Azangoo/set_clock.ino:635
        lcd.print(1);
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:636
        status++;
    2980:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2984:	8f 5f       	subi	r24, 0xFF	; 255
    2986:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    298a:	00 c9       	rjmp	.-3584   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:637
      } else if (key == '2') {
    298c:	c2 33       	cpi	r28, 0x32	; 50
    298e:	61 f4       	brne	.+24     	; 0x29a8 <set_clock()+0xf8a>
/home/whisper/Arduino/Azangoo/set_clock.ino:638
        d_second = 2;
    2990:	10 93 ae 01 	sts	0x01AE, r17	; 0x8001ae <d_second>
/home/whisper/Arduino/Azangoo/set_clock.ino:639
        lcd.print(2);
    2994:	82 e0       	ldi	r24, 0x02	; 2
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:640
        status++;
    299c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    29a0:	8f 5f       	subi	r24, 0xFF	; 255
    29a2:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    29a6:	f2 c8       	rjmp	.-3612   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:641
      } else if (key == '3') {
    29a8:	c3 33       	cpi	r28, 0x33	; 51
    29aa:	61 f4       	brne	.+24     	; 0x29c4 <set_clock()+0xfa6>
/home/whisper/Arduino/Azangoo/set_clock.ino:642
        d_second = 3;
    29ac:	e0 92 ae 01 	sts	0x01AE, r14	; 0x8001ae <d_second>
/home/whisper/Arduino/Azangoo/set_clock.ino:643
        lcd.print(3);
    29b0:	83 e0       	ldi	r24, 0x03	; 3
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:644
        status++;
    29b8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    29bc:	8f 5f       	subi	r24, 0xFF	; 255
    29be:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    29c2:	e4 c8       	rjmp	.-3640   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:645
      } else if (key == '4') {
    29c4:	c4 33       	cpi	r28, 0x34	; 52
    29c6:	61 f4       	brne	.+24     	; 0x29e0 <set_clock()+0xfc2>
/home/whisper/Arduino/Azangoo/set_clock.ino:646
        d_second = 4;
    29c8:	f0 92 ae 01 	sts	0x01AE, r15	; 0x8001ae <d_second>
/home/whisper/Arduino/Azangoo/set_clock.ino:647
        lcd.print(4);
    29cc:	84 e0       	ldi	r24, 0x04	; 4
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:648
        status++;
    29d4:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    29d8:	8f 5f       	subi	r24, 0xFF	; 255
    29da:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    29de:	d6 c8       	rjmp	.-3668   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:649
      } else if (key == '5') {
    29e0:	c5 33       	cpi	r28, 0x35	; 53
    29e2:	61 f4       	brne	.+24     	; 0x29fc <set_clock()+0xfde>
/home/whisper/Arduino/Azangoo/set_clock.ino:650
        d_second = 5;
    29e4:	00 93 ae 01 	sts	0x01AE, r16	; 0x8001ae <d_second>
/home/whisper/Arduino/Azangoo/set_clock.ino:651
        lcd.print(5);
    29e8:	85 e0       	ldi	r24, 0x05	; 5
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:652
        status++;
    29f0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    29f4:	8f 5f       	subi	r24, 0xFF	; 255
    29f6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    29fa:	c8 c8       	rjmp	.-3696   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:653
      } else if (key == 'A') {
    29fc:	c1 34       	cpi	r28, 0x41	; 65
    29fe:	19 f4       	brne	.+6      	; 0x2a06 <set_clock()+0xfe8>
/home/whisper/Arduino/Azangoo/set_clock.ino:654
        status++;
    2a00:	b0 92 2a 02 	sts	0x022A, r11	; 0x80022a <status>
    2a04:	c3 c8       	rjmp	.-3706   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:655
      } else if (key == 'B') {
    2a06:	c2 34       	cpi	r28, 0x42	; 66
    2a08:	09 f0       	breq	.+2      	; 0x2a0c <set_clock()+0xfee>
    2a0a:	b5 ca       	rjmp	.-2710   	; 0x1f76 <set_clock()+0x558>
    2a0c:	f3 ce       	rjmp	.-538    	; 0x27f4 <set_clock()+0xdd6>
/home/whisper/Arduino/Azangoo/set_clock.ino:663
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if (status == 13 ) {
    2a0e:	dd 30       	cpi	r29, 0x0D	; 13
    2a10:	09 f0       	breq	.+2      	; 0x2a14 <set_clock()+0xff6>
    2a12:	83 c0       	rjmp	.+262    	; 0x2b1a <set_clock()+0x10fc>
/home/whisper/Arduino/Azangoo/set_clock.ino:664
      lcd.setCursor(7, 1);
    2a14:	61 e0       	ldi	r22, 0x01	; 1
    2a16:	87 e0       	ldi	r24, 0x07	; 7
    2a18:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/set_clock.ino:665
      if (key == '0') {
    2a1c:	c0 33       	cpi	r28, 0x30	; 48
    2a1e:	51 f4       	brne	.+20     	; 0x2a34 <set_clock()+0x1016>
/home/whisper/Arduino/Azangoo/set_clock.ino:667
        y_second = 0;
        lcd.print(0);
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	80 e0       	ldi	r24, 0x00	; 0
    2a24:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:668
        status++;
    2a28:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2a2c:	8f 5f       	subi	r24, 0xFF	; 255
    2a2e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2a32:	ac c8       	rjmp	.-3752   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:669
      } else if (key == '1') {
    2a34:	c1 33       	cpi	r28, 0x31	; 49
    2a36:	51 f4       	brne	.+20     	; 0x2a4c <set_clock()+0x102e>
/home/whisper/Arduino/Azangoo/set_clock.ino:671
        y_second = 1;
        lcd.print(1);
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:672
        status++;
    2a40:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2a4a:	a0 c8       	rjmp	.-3776   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:673
      } else if (key == '2') {
    2a4c:	c2 33       	cpi	r28, 0x32	; 50
    2a4e:	51 f4       	brne	.+20     	; 0x2a64 <set_clock()+0x1046>
/home/whisper/Arduino/Azangoo/set_clock.ino:675
        y_second = 2;
        lcd.print(2);
    2a50:	82 e0       	ldi	r24, 0x02	; 2
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:676
        status++;
    2a58:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2a5c:	8f 5f       	subi	r24, 0xFF	; 255
    2a5e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2a62:	94 c8       	rjmp	.-3800   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:677
      } else if (key == '3') {
    2a64:	c3 33       	cpi	r28, 0x33	; 51
    2a66:	51 f4       	brne	.+20     	; 0x2a7c <set_clock()+0x105e>
/home/whisper/Arduino/Azangoo/set_clock.ino:679
        y_second = 3;
        lcd.print(3);
    2a68:	83 e0       	ldi	r24, 0x03	; 3
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:680
        status++;
    2a70:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2a74:	8f 5f       	subi	r24, 0xFF	; 255
    2a76:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2a7a:	88 c8       	rjmp	.-3824   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:681
      } else if (key == '4') {
    2a7c:	c4 33       	cpi	r28, 0x34	; 52
    2a7e:	51 f4       	brne	.+20     	; 0x2a94 <set_clock()+0x1076>
/home/whisper/Arduino/Azangoo/set_clock.ino:683
        y_second = 4;
        lcd.print(4);
    2a80:	84 e0       	ldi	r24, 0x04	; 4
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:684
        status++;
    2a88:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2a92:	7c c8       	rjmp	.-3848   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:685
      } else if (key == '5') {
    2a94:	c5 33       	cpi	r28, 0x35	; 53
    2a96:	51 f4       	brne	.+20     	; 0x2aac <set_clock()+0x108e>
/home/whisper/Arduino/Azangoo/set_clock.ino:687
        y_second = 5;
        lcd.print(5);
    2a98:	85 e0       	ldi	r24, 0x05	; 5
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:688
        status++;
    2aa0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2aaa:	70 c8       	rjmp	.-3872   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:689
      } else if (key == '6') {
    2aac:	c6 33       	cpi	r28, 0x36	; 54
    2aae:	51 f4       	brne	.+20     	; 0x2ac4 <set_clock()+0x10a6>
/home/whisper/Arduino/Azangoo/set_clock.ino:691
        y_second = 6;
        lcd.print(6);
    2ab0:	86 e0       	ldi	r24, 0x06	; 6
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:692
        status++;
    2ab8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2ac2:	64 c8       	rjmp	.-3896   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:693
      } else if (key == '7') {
    2ac4:	c7 33       	cpi	r28, 0x37	; 55
    2ac6:	51 f4       	brne	.+20     	; 0x2adc <set_clock()+0x10be>
/home/whisper/Arduino/Azangoo/set_clock.ino:695
        y_second = 7;
        lcd.print(7);
    2ac8:	87 e0       	ldi	r24, 0x07	; 7
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:696
        status++;
    2ad0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2ad4:	8f 5f       	subi	r24, 0xFF	; 255
    2ad6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2ada:	58 c8       	rjmp	.-3920   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:697
      } else if (key == '8') {
    2adc:	c8 33       	cpi	r28, 0x38	; 56
    2ade:	51 f4       	brne	.+20     	; 0x2af4 <set_clock()+0x10d6>
/home/whisper/Arduino/Azangoo/set_clock.ino:699
        y_second = 8;
        lcd.print(8);
    2ae0:	88 e0       	ldi	r24, 0x08	; 8
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:700
        status++;
    2ae8:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2aec:	8f 5f       	subi	r24, 0xFF	; 255
    2aee:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2af2:	4c c8       	rjmp	.-3944   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:701
      } else if (key == '9') {
    2af4:	c9 33       	cpi	r28, 0x39	; 57
    2af6:	51 f4       	brne	.+20     	; 0x2b0c <set_clock()+0x10ee>
/home/whisper/Arduino/Azangoo/set_clock.ino:703
        y_second = 9;
        lcd.print(9);
    2af8:	89 e0       	ldi	r24, 0x09	; 9
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/set_clock.ino:704
        status++;
    2b00:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <status>
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <status>
    2b0a:	40 c8       	rjmp	.-3968   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:705
      } else if (key == 'A') {
    2b0c:	c1 34       	cpi	r28, 0x41	; 65
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <set_clock()+0x10f4>
    2b10:	38 ca       	rjmp	.-2960   	; 0x1f82 <set_clock()+0x564>
/home/whisper/Arduino/Azangoo/set_clock.ino:707
        status++;
      } else if (key == 'B') {
    2b12:	c2 34       	cpi	r28, 0x42	; 66
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <set_clock()+0x10fa>
    2b16:	2f ca       	rjmp	.-2978   	; 0x1f76 <set_clock()+0x558>
    2b18:	0e cf       	rjmp	.-484    	; 0x2936 <set_clock()+0xf18>
/home/whisper/Arduino/Azangoo/set_clock.ino:715
        lcd.noBlink();
        break;
      } else if (key == 'D') {
        status = 14;
      }
    } else if ( status == 14 ) {
    2b1a:	de 30       	cpi	r29, 0x0E	; 14
    2b1c:	09 f0       	breq	.+2      	; 0x2b20 <set_clock()+0x1102>
    2b1e:	36 c8       	rjmp	.-3988   	; 0x1b8c <set_clock()+0x16e>
/home/whisper/Arduino/Azangoo/set_clock.ino:716
      lcd.noBlink();
    2b20:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LiquidCrystal::noBlink() [clone .constprop.31]>
/home/whisper/Arduino/Azangoo/set_clock.ino:717
      per_year = h_year * 1000;
    2b24:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <h_year>
    2b28:	88 ee       	ldi	r24, 0xE8	; 232
    2b2a:	93 e0       	ldi	r25, 0x03	; 3
    2b2c:	28 9f       	mul	r18, r24
    2b2e:	80 01       	movw	r16, r0
    2b30:	29 9f       	mul	r18, r25
    2b32:	10 0d       	add	r17, r0
    2b34:	11 24       	eor	r1, r1
/home/whisper/Arduino/Azangoo/set_clock.ino:718
      per_year += s_year * 100;
    2b36:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <s_year>
    2b3a:	24 e6       	ldi	r18, 0x64	; 100
    2b3c:	82 9f       	mul	r24, r18
    2b3e:	00 0d       	add	r16, r0
    2b40:	11 1d       	adc	r17, r1
    2b42:	11 24       	eor	r1, r1
/home/whisper/Arduino/Azangoo/set_clock.ino:719
      per_year += d_year * 10;
    2b44:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <d_year>
    2b48:	8a e0       	ldi	r24, 0x0A	; 10
    2b4a:	98 9f       	mul	r25, r24
    2b4c:	00 0d       	add	r16, r0
    2b4e:	11 1d       	adc	r17, r1
    2b50:	11 24       	eor	r1, r1
/home/whisper/Arduino/Azangoo/set_clock.ino:720
      per_year += y_year;
    2b52:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <y_year>
    2b56:	09 0f       	add	r16, r25
    2b58:	11 1d       	adc	r17, r1
    2b5a:	10 93 0a 02 	sts	0x020A, r17	; 0x80020a <per_year+0x1>
    2b5e:	00 93 09 02 	sts	0x0209, r16	; 0x800209 <per_year>
/home/whisper/Arduino/Azangoo/set_clock.ino:722

      per_month = d_month * 10;
    2b62:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <d_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:723
      per_month += y_month;
    2b66:	c0 91 b5 01 	lds	r28, 0x01B5	; 0x8001b5 <y_month>
    2b6a:	d0 e0       	ldi	r29, 0x00	; 0
    2b6c:	98 9f       	mul	r25, r24
    2b6e:	c0 0d       	add	r28, r0
    2b70:	d1 1d       	adc	r29, r1
    2b72:	11 24       	eor	r1, r1
    2b74:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <per_month+0x1>
    2b78:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <per_month>
/home/whisper/Arduino/Azangoo/set_clock.ino:725

      per_day = d_day * 10;
    2b7c:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <d_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:726
      per_day += y_day;
    2b80:	e0 90 b3 01 	lds	r14, 0x01B3	; 0x8001b3 <y_day>
    2b84:	f1 2c       	mov	r15, r1
    2b86:	98 9f       	mul	r25, r24
    2b88:	e0 0c       	add	r14, r0
    2b8a:	f1 1c       	adc	r15, r1
    2b8c:	11 24       	eor	r1, r1
    2b8e:	f0 92 24 02 	sts	0x0224, r15	; 0x800224 <per_day+0x1>
    2b92:	e0 92 23 02 	sts	0x0223, r14	; 0x800223 <per_day>
/home/whisper/Arduino/Azangoo/set_clock.ino:728

      Hour = d_hour * 10;
    2b96:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <d_hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:729
      Hour += y_hour;
    2b9a:	90 90 b1 01 	lds	r9, 0x01B1	; 0x8001b1 <y_hour>
    2b9e:	98 9f       	mul	r25, r24
    2ba0:	90 0c       	add	r9, r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	90 92 1c 02 	sts	0x021C, r9	; 0x80021c <Hour>
/home/whisper/Arduino/Azangoo/set_clock.ino:732

      Minute = d_minute * 10;
      Minute += y_minute;
    2ba8:	b0 90 af 01 	lds	r11, 0x01AF	; 0x8001af <y_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:731
      per_day += y_day;

      Hour = d_hour * 10;
      Hour += y_hour;

      Minute = d_minute * 10;
    2bac:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <d_minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:732
      Minute += y_minute;
    2bb0:	ab 2c       	mov	r10, r11
    2bb2:	98 9f       	mul	r25, r24
    2bb4:	a0 0c       	add	r10, r0
    2bb6:	11 24       	eor	r1, r1
    2bb8:	a0 92 1a 02 	sts	0x021A, r10	; 0x80021a <Minute>
/home/whisper/Arduino/Azangoo/set_clock.ino:734

      Second = d_second * 10;
    2bbc:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <d_second>
/home/whisper/Arduino/Azangoo/set_clock.ino:735
      Second += y_minute;
    2bc0:	98 9f       	mul	r25, r24
    2bc2:	b0 0c       	add	r11, r0
    2bc4:	11 24       	eor	r1, r1
    2bc6:	b0 92 18 02 	sts	0x0218, r11	; 0x800218 <Second>
is_date_valid():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:155
    }
}

bool Jalali::is_date_valid(int year, int month, int day, int calendar)
{
    if (month > 12 || month < 1)
    2bca:	21 97       	sbiw	r28, 0x01	; 1
    2bcc:	cc 30       	cpi	r28, 0x0C	; 12
    2bce:	d1 05       	cpc	r29, r1
    2bd0:	08 f4       	brcc	.+2      	; 0x2bd4 <set_clock()+0x11b6>
    2bd2:	92 c0       	rjmp	.+292    	; 0x2cf8 <set_clock()+0x12da>
convert_date():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:187

void Jalali::convert_date(int year, int month, int day, int &cyear, int &cmonth, int &cday, int calendar)
{
    if (!is_date_valid(year, month, day, calendar))
    {
        cday = cmonth = cyear = 0;
    2bd4:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <rtc_year+0x1>
    2bd8:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <rtc_year>
    2bdc:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <rtc_month+0x1>
    2be0:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <rtc_month>
    2be4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <rtc_day+0x1>
    2be8:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <rtc_day>
set_rtc():
/home/whisper/Arduino/Azangoo/functions.ino:3
void set_rtc() {
  //  RTCLib::set(byte second, byte minute, byte hour, byte dayOfWeek, byte dayOfMonth, byte month, byte year)
  rtc.set(Second, Minute, Hour, dow, rtc_day, rtc_month, rtc_year - 2000);
    2bec:	10 91 0f 02 	lds	r17, 0x020F	; 0x80020f <rtc_year>
    2bf0:	10 5d       	subi	r17, 0xD0	; 208
    2bf2:	00 91 0d 02 	lds	r16, 0x020D	; 0x80020d <rtc_month>
    2bf6:	f0 90 0b 02 	lds	r15, 0x020B	; 0x80020b <rtc_day>
beginTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2bfa:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <rtc>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2bfe:	d1 e0       	ldi	r29, 0x01	; 1
    2c00:	d0 93 2f 02 	sts	0x022F, r29	; 0x80022f <TwoWire::transmitting>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    2c04:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <TwoWire::txAddress>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2c08:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    2c0c:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <TwoWire::txBufferLength>
set():
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:609
 * @param year year to set to HW RTC in last 2 digits mode. As RTCs only support 19xx and 20xx years (see datasheets), it's harcoded to 20xx.
 */
void uRTCLib::set(const uint8_t second, const uint8_t minute, const uint8_t hour, const uint8_t dayOfWeek, const uint8_t dayOfMonth, const uint8_t month, const uint8_t year) {
	uRTCLIB_YIELD
	URTCLIB_WIRE.beginTransmission(_rtc_address);
	URTCLIB_WIRE.write(0); // set next input to start at the seconds register
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:610
	URTCLIB_WIRE.write(uRTCLIB_decToBcd(second)); // set seconds
    2c18:	ca e0       	ldi	r28, 0x0A	; 10
    2c1a:	8b 2d       	mov	r24, r11
    2c1c:	6c 2f       	mov	r22, r28
    2c1e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    2c22:	82 95       	swap	r24
    2c24:	80 7f       	andi	r24, 0xF0	; 240
    2c26:	68 2f       	mov	r22, r24
    2c28:	69 0f       	add	r22, r25
    2c2a:	8b e1       	ldi	r24, 0x1B	; 27
    2c2c:	93 e0       	ldi	r25, 0x03	; 3
    2c2e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <TwoWire::write(unsigned char)>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:611
	URTCLIB_WIRE.write(uRTCLIB_decToBcd(minute)); // set minutes
    2c32:	8a 2d       	mov	r24, r10
    2c34:	6c 2f       	mov	r22, r28
    2c36:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    2c3a:	82 95       	swap	r24
    2c3c:	80 7f       	andi	r24, 0xF0	; 240
    2c3e:	68 2f       	mov	r22, r24
    2c40:	69 0f       	add	r22, r25
    2c42:	8b e1       	ldi	r24, 0x1B	; 27
    2c44:	93 e0       	ldi	r25, 0x03	; 3
    2c46:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <TwoWire::write(unsigned char)>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:612
	URTCLIB_WIRE.write(uRTCLIB_decToBcd(hour)); // set hours
    2c4a:	89 2d       	mov	r24, r9
    2c4c:	6c 2f       	mov	r22, r28
    2c4e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    2c52:	82 95       	swap	r24
    2c54:	80 7f       	andi	r24, 0xF0	; 240
    2c56:	68 2f       	mov	r22, r24
    2c58:	69 0f       	add	r22, r25
    2c5a:	8b e1       	ldi	r24, 0x1B	; 27
    2c5c:	93 e0       	ldi	r25, 0x03	; 3
    2c5e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <TwoWire::write(unsigned char)>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:613
	URTCLIB_WIRE.write(uRTCLIB_decToBcd(dayOfWeek)); // set day of week (1=Sunday, 7=Saturday)
    2c62:	67 e0       	ldi	r22, 0x07	; 7
    2c64:	8b e1       	ldi	r24, 0x1B	; 27
    2c66:	93 e0       	ldi	r25, 0x03	; 3
    2c68:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <TwoWire::write(unsigned char)>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:614
	URTCLIB_WIRE.write(uRTCLIB_decToBcd(dayOfMonth)); // set date (1 to 31)
    2c6c:	8f 2d       	mov	r24, r15
    2c6e:	6c 2f       	mov	r22, r28
    2c70:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    2c74:	82 95       	swap	r24
    2c76:	80 7f       	andi	r24, 0xF0	; 240
    2c78:	68 2f       	mov	r22, r24
    2c7a:	69 0f       	add	r22, r25
    2c7c:	8b e1       	ldi	r24, 0x1B	; 27
    2c7e:	93 e0       	ldi	r25, 0x03	; 3
    2c80:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <TwoWire::write(unsigned char)>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:615
	URTCLIB_WIRE.write(0B10000000 | uRTCLIB_decToBcd(month)); // set month
    2c84:	80 2f       	mov	r24, r16
    2c86:	6c 2f       	mov	r22, r28
    2c88:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    2c8c:	82 95       	swap	r24
    2c8e:	80 7f       	andi	r24, 0xF0	; 240
    2c90:	89 0f       	add	r24, r25
    2c92:	80 68       	ori	r24, 0x80	; 128
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:616
	URTCLIB_WIRE.write(uRTCLIB_decToBcd(year)); // set year (0 to 99)
    2c9a:	81 2f       	mov	r24, r17
    2c9c:	6c 2f       	mov	r22, r28
    2c9e:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__udivmodqi4>
    2ca2:	82 95       	swap	r24
    2ca4:	80 7f       	andi	r24, 0xF0	; 240
    2ca6:	68 2f       	mov	r22, r24
    2ca8:	69 0f       	add	r22, r25
    2caa:	8b e1       	ldi	r24, 0x1B	; 27
    2cac:	93 e0       	ldi	r25, 0x03	; 3
    2cae:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <TwoWire::write(unsigned char)>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:617
	URTCLIB_WIRE.endTransmission();
    2cb2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TwoWire::endTransmission() [clone .constprop.55]>
beginTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:206
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    2cb6:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <rtc>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    2cba:	d0 93 2f 02 	sts	0x022F, r29	; 0x80022f <TwoWire::transmitting>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    2cbe:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <TwoWire::txAddress>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    2cc2:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    2cc6:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <TwoWire::txBufferLength>
set():
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:621
	uRTCLIB_YIELD
	//
	URTCLIB_WIRE.beginTransmission(_rtc_address);
	URTCLIB_WIRE.write(0X0F);
    2cca:	8f e0       	ldi	r24, 0x0F	; 15
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:622
	URTCLIB_WIRE.endTransmission();
    2cd2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TwoWire::endTransmission() [clone .constprop.55]>
set_clock():
/home/whisper/Arduino/Azangoo/set_clock.ino:741
      jal.convert_date(per_year, per_month, per_day, rtc_year, rtc_month, rtc_day, JALALI);
      set_rtc();
      break;
    }
  }
}
    2cd6:	df 91       	pop	r29
    2cd8:	cf 91       	pop	r28
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	ff 90       	pop	r15
    2ce0:	ef 90       	pop	r14
    2ce2:	df 90       	pop	r13
    2ce4:	cf 90       	pop	r12
    2ce6:	bf 90       	pop	r11
    2ce8:	af 90       	pop	r10
    2cea:	9f 90       	pop	r9
    2cec:	7f 90       	pop	r7
    2cee:	6f 90       	pop	r6
    2cf0:	5f 90       	pop	r5
    2cf2:	4f 90       	pop	r4
set_rtc():
/home/whisper/Arduino/Azangoo/functions.ino:4
  rtc.refresh();
    2cf4:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <uRTCLib::refresh() [clone .constprop.52]>
is_date_valid():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:157

bool Jalali::is_date_valid(int year, int month, int day, int calendar)
{
    if (month > 12 || month < 1)
        return false;
    if (day > 31 || day < 1)
    2cf8:	67 01       	movw	r12, r14
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	c8 1a       	sub	r12, r24
    2cfe:	d1 08       	sbc	r13, r1
    2d00:	9f e1       	ldi	r25, 0x1F	; 31
    2d02:	c9 16       	cp	r12, r25
    2d04:	d1 04       	cpc	r13, r1
    2d06:	08 f0       	brcs	.+2      	; 0x2d0a <set_clock()+0x12ec>
    2d08:	65 cf       	rjmp	.-310    	; 0x2bd4 <set_clock()+0x11b6>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:165
    int mnt;
    month--;

    if (calendar == JALALI)
    {
        if (year > UPPER_PERSIAN_YEAR || year < LOWER_PERSIAN_YEAR)
    2d0a:	c8 01       	movw	r24, r16
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	84 31       	cpi	r24, 0x14	; 20
    2d10:	99 40       	sbci	r25, 0x09	; 9
    2d12:	08 f0       	brcs	.+2      	; 0x2d16 <set_clock()+0x12f8>
    2d14:	5f cf       	rjmp	.-322    	; 0x2bd4 <set_clock()+0x11b6>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:167
            return false;
        if (month == 11)
    2d16:	cb 30       	cpi	r28, 0x0B	; 11
    2d18:	d1 05       	cpc	r29, r1
    2d1a:	c1 f4       	brne	.+48     	; 0x2d4c <set_clock()+0x132e>
is_year_leap():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:128
    {
        if (year > UPPER_PERSIAN_YEAR || year < LOWER_PERSIAN_YEAR)
            return false;
        long days0;
        long days1;
        days0 = jalali_jd0(year) + 1;
    2d1c:	c8 01       	movw	r24, r16
    2d1e:	0e 94 11 07 	call	0xe22	; 0xe22 <jalali_jd0(int)>
    2d22:	2b 01       	movw	r4, r22
    2d24:	3c 01       	movw	r6, r24
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:129
        days1 = jalali_jd0(year + 1) + 1;
    2d26:	c8 01       	movw	r24, r16
    2d28:	01 96       	adiw	r24, 0x01	; 1
    2d2a:	0e 94 11 07 	call	0xe22	; 0xe22 <jalali_jd0(int)>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:130
        if ((days1 - days0) == 366)
    2d2e:	64 19       	sub	r22, r4
    2d30:	75 09       	sbc	r23, r5
    2d32:	86 09       	sbc	r24, r6
    2d34:	97 09       	sbc	r25, r7
    2d36:	6e 36       	cpi	r22, 0x6E	; 110
    2d38:	71 40       	sbci	r23, 0x01	; 1
    2d3a:	81 05       	cpc	r24, r1
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	69 f5       	brne	.+90     	; 0x2d9a <set_clock()+0x137c>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:132
        {
            jmonths[11] = 30;
    2d40:	8e e1       	ldi	r24, 0x1E	; 30
    2d42:	90 e0       	ldi	r25, 0x00	; 0
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:135
            return true;
        }
        jmonths[11] = 29;
    2d44:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <jmonths+0x17>
    2d48:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <jmonths+0x16>
is_date_valid():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:169
    {
        if (year > UPPER_PERSIAN_YEAR || year < LOWER_PERSIAN_YEAR)
            return false;
        if (month == 11)
            is_year_leap(year, calendar);
        mnt = jmonths[month];
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ee 0f       	add	r30, r30
    2d50:	ff 1f       	adc	r31, r31
    2d52:	e7 5e       	subi	r30, 0xE7	; 231
    2d54:	fe 4f       	sbci	r31, 0xFE	; 254
convert_date():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:185
    return day <= mnt;
}

void Jalali::convert_date(int year, int month, int day, int &cyear, int &cmonth, int &cday, int calendar)
{
    if (!is_date_valid(year, month, day, calendar))
    2d56:	80 81       	ld	r24, Z
    2d58:	91 81       	ldd	r25, Z+1	; 0x01
    2d5a:	8e 15       	cp	r24, r14
    2d5c:	9f 05       	cpc	r25, r15
    2d5e:	0c f4       	brge	.+2      	; 0x2d62 <set_clock()+0x1344>
    2d60:	39 cf       	rjmp	.-398    	; 0x2bd4 <set_clock()+0x11b6>
date_to_days():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:56
long date_to_days(int year, int month, int day, int calendar)
{
    long days;
    if (calendar == JALALI)
    {
        days = jalali_jd0(year) + 1;
    2d62:	c8 01       	movw	r24, r16
    2d64:	0e 94 11 07 	call	0xe22	; 0xe22 <jalali_jd0(int)>
    2d68:	8b 01       	movw	r16, r22
    2d6a:	9c 01       	movw	r18, r24
    2d6c:	0f 5f       	subi	r16, 0xFF	; 255
    2d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d70:	2f 4f       	sbci	r18, 0xFF	; 255
    2d72:	3f 4f       	sbci	r19, 0xFF	; 255
    2d74:	e9 e1       	ldi	r30, 0x19	; 25
    2d76:	f1 e0       	ldi	r31, 0x01	; 1
set_clock():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:57
        for (int i = 0; i < month - 1; i++)
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
date_to_days():
    2d7c:	8c 17       	cp	r24, r28
    2d7e:	9d 07       	cpc	r25, r29
    2d80:	7c f4       	brge	.+30     	; 0x2da0 <set_clock()+0x1382>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:58
            days += jmonths[i];
    2d82:	41 91       	ld	r20, Z+
    2d84:	51 91       	ld	r21, Z+
    2d86:	05 2e       	mov	r0, r21
    2d88:	00 0c       	add	r0, r0
    2d8a:	66 0b       	sbc	r22, r22
    2d8c:	77 0b       	sbc	r23, r23
    2d8e:	04 0f       	add	r16, r20
    2d90:	15 1f       	adc	r17, r21
    2d92:	26 1f       	adc	r18, r22
    2d94:	37 1f       	adc	r19, r23
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:57
{
    long days;
    if (calendar == JALALI)
    {
        days = jalali_jd0(year) + 1;
        for (int i = 0; i < month - 1; i++)
    2d96:	01 96       	adiw	r24, 0x01	; 1
    2d98:	f1 cf       	rjmp	.-30     	; 0x2d7c <set_clock()+0x135e>
is_year_leap():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:135
        if ((days1 - days0) == 366)
        {
            jmonths[11] = 30;
            return true;
        }
        jmonths[11] = 29;
    2d9a:	8d e1       	ldi	r24, 0x1D	; 29
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	d2 cf       	rjmp	.-92     	; 0x2d44 <set_clock()+0x1326>
date_to_days():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:66
    {
        days = gregorian_jd0(year);
        for (int i = 0; i < month - 1; i++)
            days += gmonths[i];
    }
    days += day - 1;
    2da0:	0d 2c       	mov	r0, r13
    2da2:	00 0c       	add	r0, r0
    2da4:	ee 08       	sbc	r14, r14
    2da6:	ff 08       	sbc	r15, r15
    2da8:	c7 01       	movw	r24, r14
    2daa:	b6 01       	movw	r22, r12
    2dac:	60 0f       	add	r22, r16
    2dae:	71 1f       	adc	r23, r17
    2db0:	82 1f       	adc	r24, r18
    2db2:	93 1f       	adc	r25, r19
convert_date():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:192
        cday = cmonth = cyear = 0;
        return;
    }

    long jd = date_to_days(year, month, day, calendar);
    days_to_date(jd, cyear, cmonth, cday, !calendar);
    2db4:	ee 24       	eor	r14, r14
    2db6:	e3 94       	inc	r14
    2db8:	f1 2c       	mov	r15, r1
    2dba:	0b e0       	ldi	r16, 0x0B	; 11
    2dbc:	12 e0       	ldi	r17, 0x02	; 2
    2dbe:	2d e0       	ldi	r18, 0x0D	; 13
    2dc0:	32 e0       	ldi	r19, 0x02	; 2
    2dc2:	4f e0       	ldi	r20, 0x0F	; 15
    2dc4:	52 e0       	ldi	r21, 0x02	; 2
    2dc6:	0e 94 cb 0b 	call	0x1796	; 0x1796 <days_to_date(long, int&, int&, int&, int)>
    2dca:	10 cf       	rjmp	.-480    	; 0x2bec <set_clock()+0x11ce>

00002dcc <__vector_19>:
__vector_19():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2dcc:	1f 92       	push	r1
    2dce:	0f 92       	push	r0
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	0f 92       	push	r0
    2dd4:	11 24       	eor	r1, r1
    2dd6:	2f 93       	push	r18
    2dd8:	3f 93       	push	r19
    2dda:	4f 93       	push	r20
    2ddc:	5f 93       	push	r21
    2dde:	6f 93       	push	r22
    2de0:	7f 93       	push	r23
    2de2:	8f 93       	push	r24
    2de4:	9f 93       	push	r25
    2de6:	af 93       	push	r26
    2de8:	bf 93       	push	r27
    2dea:	ef 93       	push	r30
    2dec:	ff 93       	push	r31
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2dee:	8e e7       	ldi	r24, 0x7E	; 126
    2df0:	92 e0       	ldi	r25, 0x02	; 2
    2df2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <HardwareSerial::_tx_udr_empty_irq()>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    2df6:	ff 91       	pop	r31
    2df8:	ef 91       	pop	r30
    2dfa:	bf 91       	pop	r27
    2dfc:	af 91       	pop	r26
    2dfe:	9f 91       	pop	r25
    2e00:	8f 91       	pop	r24
    2e02:	7f 91       	pop	r23
    2e04:	6f 91       	pop	r22
    2e06:	5f 91       	pop	r21
    2e08:	4f 91       	pop	r20
    2e0a:	3f 91       	pop	r19
    2e0c:	2f 91       	pop	r18
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti

00002e18 <__vector_18>:
__vector_18():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2e18:	1f 92       	push	r1
    2e1a:	0f 92       	push	r0
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	0f 92       	push	r0
    2e20:	11 24       	eor	r1, r1
    2e22:	2f 93       	push	r18
    2e24:	8f 93       	push	r24
    2e26:	9f 93       	push	r25
    2e28:	ef 93       	push	r30
    2e2a:	ff 93       	push	r31
_rx_complete_irq():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2e2c:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <Serial+0x10>
    2e30:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <Serial+0x11>
    2e34:	80 81       	ld	r24, Z
    2e36:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <Serial+0x16>
    2e3a:	f0 91 95 02 	lds	r31, 0x0295	; 0x800295 <Serial+0x17>
    2e3e:	82 fd       	sbrc	r24, 2
    2e40:	1b c0       	rjmp	.+54     	; 0x2e78 <__vector_18+0x60>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2e42:	90 81       	ld	r25, Z
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2e44:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <Serial+0x19>
    2e48:	8f 5f       	subi	r24, 0xFF	; 255
    2e4a:	8f 73       	andi	r24, 0x3F	; 63
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2e4c:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <Serial+0x1a>
    2e50:	82 17       	cp	r24, r18
    2e52:	41 f0       	breq	.+16     	; 0x2e64 <__vector_18+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    2e54:	e0 91 97 02 	lds	r30, 0x0297	; 0x800297 <Serial+0x19>
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	e2 58       	subi	r30, 0x82	; 130
    2e5c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e5e:	95 8f       	std	Z+29, r25	; 0x1d
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    2e60:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <Serial+0x19>
__vector_18():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    2e64:	ff 91       	pop	r31
    2e66:	ef 91       	pop	r30
    2e68:	9f 91       	pop	r25
    2e6a:	8f 91       	pop	r24
    2e6c:	2f 91       	pop	r18
    2e6e:	0f 90       	pop	r0
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	0f 90       	pop	r0
    2e74:	1f 90       	pop	r1
    2e76:	18 95       	reti
_rx_complete_irq():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2e78:	80 81       	ld	r24, Z
    2e7a:	f4 cf       	rjmp	.-24     	; 0x2e64 <__vector_18+0x4c>

00002e7c <__vector_16>:
__vector_16():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2e7c:	1f 92       	push	r1
    2e7e:	0f 92       	push	r0
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	0f 92       	push	r0
    2e84:	11 24       	eor	r1, r1
    2e86:	2f 93       	push	r18
    2e88:	3f 93       	push	r19
    2e8a:	8f 93       	push	r24
    2e8c:	9f 93       	push	r25
    2e8e:	af 93       	push	r26
    2e90:	bf 93       	push	r27
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    2e92:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <timer0_millis>
    2e96:	90 91 00 02 	lds	r25, 0x0200	; 0x800200 <timer0_millis+0x1>
    2e9a:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <timer0_millis+0x2>
    2e9e:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <timer0_millis+0x3>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    2ea2:	30 91 fe 01 	lds	r19, 0x01FE	; 0x8001fe <timer0_fract>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    2ea6:	23 e0       	ldi	r18, 0x03	; 3
    2ea8:	23 0f       	add	r18, r19
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    2eaa:	2d 37       	cpi	r18, 0x7D	; 125
    2eac:	68 f1       	brcs	.+90     	; 0x2f08 <__vector_16+0x8c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    2eae:	26 e8       	ldi	r18, 0x86	; 134
    2eb0:	23 0f       	add	r18, r19
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    2eb2:	02 96       	adiw	r24, 0x02	; 2
    2eb4:	a1 1d       	adc	r26, r1
    2eb6:	b1 1d       	adc	r27, r1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    2eb8:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <timer0_fract>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    2ebc:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <timer0_millis>
    2ec0:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <timer0_millis+0x1>
    2ec4:	a0 93 01 02 	sts	0x0201, r26	; 0x800201 <timer0_millis+0x2>
    2ec8:	b0 93 02 02 	sts	0x0202, r27	; 0x800202 <timer0_millis+0x3>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    2ecc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <timer0_overflow_count>
    2ed0:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <timer0_overflow_count+0x1>
    2ed4:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <timer0_overflow_count+0x2>
    2ed8:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <timer0_overflow_count+0x3>
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	a1 1d       	adc	r26, r1
    2ee0:	b1 1d       	adc	r27, r1
    2ee2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <timer0_overflow_count>
    2ee6:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <timer0_overflow_count+0x1>
    2eea:	a0 93 05 02 	sts	0x0205, r26	; 0x800205 <timer0_overflow_count+0x2>
    2eee:	b0 93 06 02 	sts	0x0206, r27	; 0x800206 <timer0_overflow_count+0x3>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    2ef2:	bf 91       	pop	r27
    2ef4:	af 91       	pop	r26
    2ef6:	9f 91       	pop	r25
    2ef8:	8f 91       	pop	r24
    2efa:	3f 91       	pop	r19
    2efc:	2f 91       	pop	r18
    2efe:	0f 90       	pop	r0
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	0f 90       	pop	r0
    2f04:	1f 90       	pop	r1
    2f06:	18 95       	reti
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    2f08:	01 96       	adiw	r24, 0x01	; 1
    2f0a:	a1 1d       	adc	r26, r1
    2f0c:	b1 1d       	adc	r27, r1
    2f0e:	d4 cf       	rjmp	.-88     	; 0x2eb8 <__vector_16+0x3c>

00002f10 <__vector_24>:
__vector_24():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:534
  }
  return(flag);
}

ISR(TWI_vect)
{
    2f10:	1f 92       	push	r1
    2f12:	0f 92       	push	r0
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	0f 92       	push	r0
    2f18:	11 24       	eor	r1, r1
    2f1a:	2f 93       	push	r18
    2f1c:	3f 93       	push	r19
    2f1e:	4f 93       	push	r20
    2f20:	5f 93       	push	r21
    2f22:	6f 93       	push	r22
    2f24:	7f 93       	push	r23
    2f26:	8f 93       	push	r24
    2f28:	9f 93       	push	r25
    2f2a:	af 93       	push	r26
    2f2c:	bf 93       	push	r27
    2f2e:	ef 93       	push	r30
    2f30:	ff 93       	push	r31
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    2f32:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2f36:	88 7f       	andi	r24, 0xF8	; 248
    2f38:	80 36       	cpi	r24, 0x60	; 96
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <__vector_24+0x2e>
    2f3c:	4a c0       	rjmp	.+148    	; 0x2fd2 <__vector_24+0xc2>
    2f3e:	f0 f5       	brcc	.+124    	; 0x2fbc <__vector_24+0xac>
    2f40:	88 32       	cpi	r24, 0x28	; 40
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <__vector_24+0x36>
    2f44:	a7 c0       	rjmp	.+334    	; 0x3094 <__vector_24+0x184>
    2f46:	18 f5       	brcc	.+70     	; 0x2f8e <__vector_24+0x7e>
    2f48:	80 31       	cpi	r24, 0x10	; 16
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <__vector_24+0x3e>
    2f4c:	9b c0       	rjmp	.+310    	; 0x3084 <__vector_24+0x174>
    2f4e:	b8 f4       	brcc	.+46     	; 0x2f7e <__vector_24+0x6e>
    2f50:	88 23       	and	r24, r24
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <__vector_24+0x46>
    2f54:	05 c1       	rjmp	.+522    	; 0x3160 <__vector_24+0x250>
    2f56:	88 30       	cpi	r24, 0x08	; 8
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <__vector_24+0x4c>
    2f5a:	94 c0       	rjmp	.+296    	; 0x3084 <__vector_24+0x174>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2f5c:	ff 91       	pop	r31
    2f5e:	ef 91       	pop	r30
    2f60:	bf 91       	pop	r27
    2f62:	af 91       	pop	r26
    2f64:	9f 91       	pop	r25
    2f66:	8f 91       	pop	r24
    2f68:	7f 91       	pop	r23
    2f6a:	6f 91       	pop	r22
    2f6c:	5f 91       	pop	r21
    2f6e:	4f 91       	pop	r20
    2f70:	3f 91       	pop	r19
    2f72:	2f 91       	pop	r18
    2f74:	0f 90       	pop	r0
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	0f 90       	pop	r0
    2f7a:	1f 90       	pop	r1
    2f7c:	18 95       	reti
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f7e:	88 31       	cpi	r24, 0x18	; 24
    2f80:	09 f4       	brne	.+2      	; 0x2f84 <__vector_24+0x74>
    2f82:	88 c0       	rjmp	.+272    	; 0x3094 <__vector_24+0x184>
    2f84:	80 32       	cpi	r24, 0x20	; 32
    2f86:	51 f7       	brne	.-44     	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2f88:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi_error>
    2f8c:	14 c0       	rjmp	.+40     	; 0x2fb6 <__vector_24+0xa6>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f8e:	80 34       	cpi	r24, 0x40	; 64
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <__vector_24+0x84>
    2f92:	a5 c0       	rjmp	.+330    	; 0x30de <__vector_24+0x1ce>
    2f94:	40 f4       	brcc	.+16     	; 0x2fa6 <__vector_24+0x96>
    2f96:	80 33       	cpi	r24, 0x30	; 48
    2f98:	b9 f3       	breq	.-18     	; 0x2f88 <__vector_24+0x78>
    2f9a:	88 33       	cpi	r24, 0x38	; 56
    2f9c:	f9 f6       	brne	.-66     	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f9e:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <twi_error>
twi_reply():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2fa2:	85 ec       	ldi	r24, 0xC5	; 197
    2fa4:	bc c0       	rjmp	.+376    	; 0x311e <__vector_24+0x20e>
__vector_24():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2fa6:	80 35       	cpi	r24, 0x50	; 80
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <__vector_24+0x9c>
    2faa:	89 c0       	rjmp	.+274    	; 0x30be <__vector_24+0x1ae>
    2fac:	88 35       	cpi	r24, 0x58	; 88
    2fae:	09 f4       	brne	.+2      	; 0x2fb2 <__vector_24+0xa2>
    2fb0:	9e c0       	rjmp	.+316    	; 0x30ee <__vector_24+0x1de>
    2fb2:	88 34       	cpi	r24, 0x48	; 72
    2fb4:	99 f6       	brne	.-90     	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2fb6:	0e 94 7e 07 	call	0xefc	; 0xefc <twi_stop>
    2fba:	d0 cf       	rjmp	.-96     	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2fbc:	88 39       	cpi	r24, 0x98	; 152
    2fbe:	09 f4       	brne	.+2      	; 0x2fc2 <__vector_24+0xb2>
    2fc0:	94 c0       	rjmp	.+296    	; 0x30ea <__vector_24+0x1da>
    2fc2:	38 f5       	brcc	.+78     	; 0x3012 <__vector_24+0x102>
    2fc4:	88 37       	cpi	r24, 0x78	; 120
    2fc6:	29 f0       	breq	.+10     	; 0x2fd2 <__vector_24+0xc2>
    2fc8:	50 f4       	brcc	.+20     	; 0x2fde <__vector_24+0xce>
    2fca:	88 36       	cpi	r24, 0x68	; 104
    2fcc:	11 f0       	breq	.+4      	; 0x2fd2 <__vector_24+0xc2>
    2fce:	80 37       	cpi	r24, 0x70	; 112
    2fd0:	29 f6       	brne	.-118    	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2fd2:	83 e0       	ldi	r24, 0x03	; 3
    2fd4:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi_state>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2fd8:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <twi_rxBufferIndex>
    2fdc:	57 c0       	rjmp	.+174    	; 0x308c <__vector_24+0x17c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2fde:	88 38       	cpi	r24, 0x88	; 136
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <__vector_24+0xd4>
    2fe2:	83 c0       	rjmp	.+262    	; 0x30ea <__vector_24+0x1da>
    2fe4:	80 39       	cpi	r24, 0x90	; 144
    2fe6:	19 f0       	breq	.+6      	; 0x2fee <__vector_24+0xde>
    2fe8:	80 38       	cpi	r24, 0x80	; 128
    2fea:	09 f0       	breq	.+2      	; 0x2fee <__vector_24+0xde>
    2fec:	b7 cf       	rjmp	.-146    	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2fee:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <twi_rxBufferIndex>
    2ff2:	80 32       	cpi	r24, 0x20	; 32
    2ff4:	08 f0       	brcs	.+2      	; 0x2ff8 <__vector_24+0xe8>
    2ff6:	79 c0       	rjmp	.+242    	; 0x30ea <__vector_24+0x1da>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2ff8:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <twi_rxBufferIndex>
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	8e 0f       	add	r24, r30
    3000:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <twi_rxBufferIndex>
    3004:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	e3 52       	subi	r30, 0x23	; 35
    300c:	fe 4f       	sbci	r31, 0xFE	; 254
    300e:	80 83       	st	Z, r24
    3010:	3d c0       	rjmp	.+122    	; 0x308c <__vector_24+0x17c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3012:	80 3b       	cpi	r24, 0xB0	; 176
    3014:	39 f0       	breq	.+14     	; 0x3024 <__vector_24+0x114>
    3016:	e0 f4       	brcc	.+56     	; 0x3050 <__vector_24+0x140>
    3018:	80 3a       	cpi	r24, 0xA0	; 160
    301a:	09 f4       	brne	.+2      	; 0x301e <__vector_24+0x10e>
    301c:	85 c0       	rjmp	.+266    	; 0x3128 <__vector_24+0x218>
    301e:	88 3a       	cpi	r24, 0xA8	; 168
    3020:	09 f0       	breq	.+2      	; 0x3024 <__vector_24+0x114>
    3022:	9c cf       	rjmp	.-200    	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3024:	84 e0       	ldi	r24, 0x04	; 4
    3026:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi_state>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    302a:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <twi_txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    302e:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <twi_txBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3032:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <twi_onSlaveTransmit>
    3036:	f0 91 2e 02 	lds	r31, 0x022E	; 0x80022e <twi_onSlaveTransmit+0x1>
    303a:	09 95       	icall
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    303c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <twi_txBufferLength>
    3040:	81 11       	cpse	r24, r1
    3042:	0f c0       	rjmp	.+30     	; 0x3062 <__vector_24+0x152>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <twi_txBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    304a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <twi_txBuffer>
    304e:	09 c0       	rjmp	.+18     	; 0x3062 <__vector_24+0x152>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3050:	80 3c       	cpi	r24, 0xC0	; 192
    3052:	09 f4       	brne	.+2      	; 0x3056 <__vector_24+0x146>
    3054:	a6 cf       	rjmp	.-180    	; 0x2fa2 <__vector_24+0x92>
    3056:	88 3c       	cpi	r24, 0xC8	; 200
    3058:	09 f4       	brne	.+2      	; 0x305c <__vector_24+0x14c>
    305a:	a3 cf       	rjmp	.-186    	; 0x2fa2 <__vector_24+0x92>
    305c:	88 3b       	cpi	r24, 0xB8	; 184
    305e:	09 f0       	breq	.+2      	; 0x3062 <__vector_24+0x152>
    3060:	7d cf       	rjmp	.-262    	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3062:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <twi_txBufferIndex>
    3066:	81 e0       	ldi	r24, 0x01	; 1
    3068:	8e 0f       	add	r24, r30
    306a:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <twi_txBufferIndex>
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	e5 54       	subi	r30, 0x45	; 69
    3072:	fe 4f       	sbci	r31, 0xFE	; 254
    3074:	80 81       	ld	r24, Z
    3076:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    307a:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <twi_txBufferIndex>
    307e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <twi_txBufferLength>
    3082:	31 c0       	rjmp	.+98     	; 0x30e6 <__vector_24+0x1d6>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3084:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <twi_slarw>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3088:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    308c:	85 ec       	ldi	r24, 0xC5	; 197
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    308e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    3092:	64 cf       	rjmp	.-312    	; 0x2f5c <__vector_24+0x4c>
__vector_24():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3094:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <twi_masterBufferIndex>
    3098:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <twi_masterBufferLength>
    309c:	98 17       	cp	r25, r24
    309e:	b8 f5       	brcc	.+110    	; 0x310e <__vector_24+0x1fe>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    30a0:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi_masterBuffer>
    30a4:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <twi_masterBuffer+0x1>
    30a8:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <twi_masterBufferIndex>
    30ac:	21 e0       	ldi	r18, 0x01	; 1
    30ae:	2e 0f       	add	r18, r30
    30b0:	20 93 56 02 	sts	0x0256, r18	; 0x800256 <twi_masterBufferIndex>
    30b4:	e8 0f       	add	r30, r24
    30b6:	f9 2f       	mov	r31, r25
    30b8:	f1 1d       	adc	r31, r1
    30ba:	80 81       	ld	r24, Z
    30bc:	e5 cf       	rjmp	.-54     	; 0x3088 <__vector_24+0x178>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    30be:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <twi_masterBuffer>
    30c2:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <twi_masterBuffer+0x1>
    30c6:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <twi_masterBufferIndex>
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	8e 0f       	add	r24, r30
    30ce:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <twi_masterBufferIndex>
    30d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    30d6:	e2 0f       	add	r30, r18
    30d8:	f3 2f       	mov	r31, r19
    30da:	f1 1d       	adc	r31, r1
    30dc:	80 83       	st	Z, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    30de:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <twi_masterBufferIndex>
    30e2:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <twi_masterBufferLength>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    30e6:	98 17       	cp	r25, r24
    30e8:	88 f2       	brcs	.-94     	; 0x308c <__vector_24+0x17c>
twi_reply():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30ea:	85 e8       	ldi	r24, 0x85	; 133
    30ec:	d0 cf       	rjmp	.-96     	; 0x308e <__vector_24+0x17e>
__vector_24():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    30ee:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <twi_masterBuffer>
    30f2:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <twi_masterBuffer+0x1>
    30f6:	e0 91 56 02 	lds	r30, 0x0256	; 0x800256 <twi_masterBufferIndex>
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	8e 0f       	add	r24, r30
    30fe:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <twi_masterBufferIndex>
    3102:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    3106:	e2 0f       	add	r30, r18
    3108:	f3 2f       	mov	r31, r19
    310a:	f1 1d       	adc	r31, r1
    310c:	80 83       	st	Z, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    310e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <twi_sendStop>
    3112:	81 11       	cpse	r24, r1
    3114:	50 cf       	rjmp	.-352    	; 0x2fb6 <__vector_24+0xa6>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <twi_inRepStart>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    311c:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    311e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3122:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <twi_state>
    3126:	1a cf       	rjmp	.-460    	; 0x2f5c <__vector_24+0x4c>
twi_releaseBus():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:474
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3128:	85 ec       	ldi	r24, 0xC5	; 197
    312a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:477

  // update twi state
  twi_state = TWI_READY;
    312e:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <twi_state>
__vector_24():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:637
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    3132:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <twi_rxBufferIndex>
    3136:	80 32       	cpi	r24, 0x20	; 32
    3138:	30 f4       	brcc	.+12     	; 0x3146 <__vector_24+0x236>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    313a:	e0 91 fd 01 	lds	r30, 0x01FD	; 0x8001fd <twi_rxBufferIndex>
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	e3 52       	subi	r30, 0x23	; 35
    3142:	fe 4f       	sbci	r31, 0xFE	; 254
    3144:	10 82       	st	Z, r1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3146:	60 91 fd 01 	lds	r22, 0x01FD	; 0x8001fd <twi_rxBufferIndex>
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <twi_onSlaveReceive>
    3150:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <twi_onSlaveReceive+0x1>
    3154:	8d ed       	ldi	r24, 0xDD	; 221
    3156:	91 e0       	ldi	r25, 0x01	; 1
    3158:	09 95       	icall
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    315a:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <twi_rxBufferIndex>
    315e:	fe ce       	rjmp	.-516    	; 0x2f5c <__vector_24+0x4c>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3160:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <twi_error>
    3164:	28 cf       	rjmp	.-432    	; 0x2fb6 <__vector_24+0xa6>

00003166 <global constructors keyed to 65535_0_Azangoo.ino.cpp.o.2693>:
_GLOBAL__I_65535_0_Azangoo.ino.cpp.o.2693():
    3166:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <Serial+0x3>
    316a:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <Serial+0x2>
    316e:	88 ee       	ldi	r24, 0xE8	; 232
    3170:	93 e0       	ldi	r25, 0x03	; 3
    3172:	a0 e0       	ldi	r26, 0x00	; 0
    3174:	b0 e0       	ldi	r27, 0x00	; 0
    3176:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <Serial+0x4>
    317a:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <Serial+0x5>
    317e:	a0 93 84 02 	sts	0x0284, r26	; 0x800284 <Serial+0x6>
    3182:	b0 93 85 02 	sts	0x0285, r27	; 0x800285 <Serial+0x7>
    3186:	22 e7       	ldi	r18, 0x72	; 114
    3188:	31 e0       	ldi	r19, 0x01	; 1
    318a:	30 93 7f 02 	sts	0x027F, r19	; 0x80027f <Serial+0x1>
    318e:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <Serial>
    3192:	25 ec       	ldi	r18, 0xC5	; 197
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	30 93 8b 02 	sts	0x028B, r19	; 0x80028b <Serial+0xd>
    319a:	20 93 8a 02 	sts	0x028A, r18	; 0x80028a <Serial+0xc>
    319e:	24 ec       	ldi	r18, 0xC4	; 196
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	30 93 8d 02 	sts	0x028D, r19	; 0x80028d <Serial+0xf>
    31a6:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <Serial+0xe>
    31aa:	20 ec       	ldi	r18, 0xC0	; 192
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	30 93 8f 02 	sts	0x028F, r19	; 0x80028f <Serial+0x11>
    31b2:	20 93 8e 02 	sts	0x028E, r18	; 0x80028e <Serial+0x10>
    31b6:	21 ec       	ldi	r18, 0xC1	; 193
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	30 93 91 02 	sts	0x0291, r19	; 0x800291 <Serial+0x13>
    31be:	20 93 90 02 	sts	0x0290, r18	; 0x800290 <Serial+0x12>
    31c2:	22 ec       	ldi	r18, 0xC2	; 194
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	30 93 93 02 	sts	0x0293, r19	; 0x800293 <Serial+0x15>
    31ca:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <Serial+0x14>
    31ce:	26 ec       	ldi	r18, 0xC6	; 198
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	30 93 95 02 	sts	0x0295, r19	; 0x800295 <Serial+0x17>
    31d6:	20 93 94 02 	sts	0x0294, r18	; 0x800294 <Serial+0x16>
    31da:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <Serial+0x19>
    31de:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <Serial+0x1a>
    31e2:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <Serial+0x1b>
    31e6:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <Serial+0x1c>
    31ea:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <Wire+0x3>
    31ee:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <Wire+0x2>
    31f2:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <Wire+0x4>
    31f6:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <Wire+0x5>
    31fa:	a0 93 21 03 	sts	0x0321, r26	; 0x800321 <Wire+0x6>
    31fe:	b0 93 22 03 	sts	0x0322, r27	; 0x800322 <Wire+0x7>
    3202:	84 e8       	ldi	r24, 0x84	; 132
    3204:	91 e0       	ldi	r25, 0x01	; 1
    3206:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <Wire+0x1>
    320a:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <Wire>
    320e:	80 e2       	ldi	r24, 0x20	; 32
    3210:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <eeprom>
    3214:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <eeprom+0x3>
    3218:	80 e5       	ldi	r24, 0x50	; 80
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <eeprom+0x2>
    3220:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <eeprom+0x1>
    3224:	88 e6       	ldi	r24, 0x68	; 104
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <rtc+0x1>
    322c:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <rtc>
    3230:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <rtc+0x2>
    3234:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <rtc+0x3>
    3238:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <rtc+0x4>
    323c:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <rtc+0x5>
    3240:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <rtc+0x6>
    3244:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <rtc+0x7>
    3248:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <rtc+0x8>
    324c:	8f e0       	ldi	r24, 0x0F	; 15
    324e:	97 e2       	ldi	r25, 0x27	; 39
    3250:	90 93 b8 03 	sts	0x03B8, r25	; 0x8003b8 <rtc+0xa>
    3254:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <rtc+0x9>
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <rtc+0xb>
    325e:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <rtc+0xc>
    3262:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <rtc+0xd>
    3266:	10 92 bc 03 	sts	0x03BC, r1	; 0x8003bc <rtc+0xe>
    326a:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <rtc+0xf>
    326e:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <rtc+0x10>
    3272:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <rtc+0x11>
    3276:	90 e8       	ldi	r25, 0x80	; 128
    3278:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <rtc+0x12>
    327c:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <rtc+0x13>
    3280:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <rtc+0x14>
    3284:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <rtc+0x15>
    3288:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <rtc+0x16>
    328c:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <rtc+0x17>
    3290:	9e ef       	ldi	r25, 0xFE	; 254
    3292:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <rtc+0x18>
    3296:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <rtc+0x19>
    329a:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <rtc+0x1a>
    329e:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <lcd+0x3>
    32a2:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <lcd+0x2>
    32a6:	20 ea       	ldi	r18, 0xA0	; 160
    32a8:	31 e0       	ldi	r19, 0x01	; 1
    32aa:	30 93 97 03 	sts	0x0397, r19	; 0x800397 <lcd+0x1>
    32ae:	20 93 96 03 	sts	0x0396, r18	; 0x800396 <lcd>
    32b2:	98 e0       	ldi	r25, 0x08	; 8
    32b4:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <lcd+0x4>
    32b8:	9f ef       	ldi	r25, 0xFF	; 255
    32ba:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <lcd+0x5>
    32be:	97 e0       	ldi	r25, 0x07	; 7
    32c0:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <lcd+0x6>
    32c4:	96 e0       	ldi	r25, 0x06	; 6
    32c6:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <lcd+0x7>
    32ca:	95 e0       	ldi	r25, 0x05	; 5
    32cc:	90 93 9e 03 	sts	0x039E, r25	; 0x80039e <lcd+0x8>
    32d0:	94 e0       	ldi	r25, 0x04	; 4
    32d2:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <lcd+0x9>
    32d6:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <lcd+0xa>
    32da:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <lcd+0xb>
    32de:	10 92 a2 03 	sts	0x03A2, r1	; 0x8003a2 <lcd+0xc>
    32e2:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <lcd+0xd>
    32e6:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <lcd+0xe>
    32ea:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <lcd+0xf>
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	0e 94 37 06 	call	0xc6e	; 0xc6e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]>
    32f4:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <keypad+0x2>
    32f8:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <keypad+0x6>
    32fc:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <keypad+0x5>
    3300:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <keypad+0x7>
    3304:	86 e9       	ldi	r24, 0x96	; 150
    3306:	91 e0       	ldi	r25, 0x01	; 1
    3308:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <keypad+0x1>
    330c:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <keypad>
    3310:	e3 e4       	ldi	r30, 0x43	; 67
    3312:	f3 e0       	ldi	r31, 0x03	; 3
    3314:	10 82       	st	Z, r1
    3316:	14 82       	std	Z+4, r1	; 0x04
    3318:	13 82       	std	Z+3, r1	; 0x03
    331a:	15 82       	std	Z+5, r1	; 0x05
    331c:	36 96       	adiw	r30, 0x06	; 6
    331e:	83 e0       	ldi	r24, 0x03	; 3
    3320:	ef 37       	cpi	r30, 0x7F	; 127
    3322:	f8 07       	cpc	r31, r24
    3324:	b9 f7       	brne	.-18     	; 0x3314 <global constructors keyed to 65535_0_Azangoo.ino.cpp.o.2693+0x1ae>
    3326:	86 e3       	ldi	r24, 0x36	; 54
    3328:	91 e0       	ldi	r25, 0x01	; 1
    332a:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <keypad+0x63>
    332e:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <keypad+0x62>
    3332:	82 e3       	ldi	r24, 0x32	; 50
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <keypad+0x65>
    333a:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <keypad+0x64>
    333e:	84 e0       	ldi	r24, 0x04	; 4
    3340:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <keypad+0x66>
    3344:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <keypad+0x67>
    3348:	8a e3       	ldi	r24, 0x3A	; 58
    334a:	91 e0       	ldi	r25, 0x01	; 1
    334c:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <keypad+0x61>
    3350:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <keypad+0x60>
    3354:	8a e0       	ldi	r24, 0x0A	; 10
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	90 93 90 03 	sts	0x0390, r25	; 0x800390 <keypad+0x69>
    335c:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <keypad+0x68>
    3360:	84 ef       	ldi	r24, 0xF4	; 244
    3362:	91 e0       	ldi	r25, 0x01	; 1
    3364:	90 93 92 03 	sts	0x0392, r25	; 0x800392 <keypad+0x6b>
    3368:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <keypad+0x6a>
    336c:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <keypad+0x6e>
    3370:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <keypad+0x6d>
    3374:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <keypad+0x5c>
    3378:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <keypad+0x5d>
    337c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <keypad+0x5e>
    3380:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <keypad+0x5f>
    3384:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <keypad+0x6c>
    3388:	08 95       	ret

0000338a <main>:
main():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/main.cpp:34

//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	00 d0       	rcall	.+0      	; 0x3390 <main+0x6>
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
init():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3394:	78 94       	sei
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    3396:	84 b5       	in	r24, 0x24	; 36
    3398:	83 60       	ori	r24, 0x03	; 3
    339a:	84 bd       	out	0x24, r24	; 36
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    339c:	85 b5       	in	r24, 0x25	; 37
    339e:	83 60       	ori	r24, 0x03	; 3
    33a0:	85 bd       	out	0x25, r24	; 37
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    33a2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    33a6:	81 60       	ori	r24, 0x01	; 1
    33a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    33ac:	92 e0       	ldi	r25, 0x02	; 2
    33ae:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    33b2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    33b6:	81 60       	ori	r24, 0x01	; 1
    33b8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    33bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    33c0:	81 60       	ori	r24, 0x01	; 1
    33c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    33c6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    33ca:	84 60       	ori	r24, 0x04	; 4
    33cc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    33d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    33d4:	81 60       	ori	r24, 0x01	; 1
    33d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    33da:	87 e8       	ldi	r24, 0x87	; 135
    33dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    33e0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
begin():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    33e4:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <Serial+0x10>
    33e8:	f0 91 8f 02 	lds	r31, 0x028F	; 0x80028f <Serial+0x11>
    33ec:	90 83       	st	Z, r25
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    33ee:	e0 91 8a 02 	lds	r30, 0x028A	; 0x80028a <Serial+0xc>
    33f2:	f0 91 8b 02 	lds	r31, 0x028B	; 0x80028b <Serial+0xd>
    33f6:	10 82       	st	Z, r1
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    33f8:	e0 91 8c 02 	lds	r30, 0x028C	; 0x80028c <Serial+0xe>
    33fc:	f0 91 8d 02 	lds	r31, 0x028D	; 0x80028d <Serial+0xf>
    3400:	8f ec       	ldi	r24, 0xCF	; 207
    3402:	80 83       	st	Z, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    3404:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <Serial+0x18>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3408:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <Serial+0x14>
    340c:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <Serial+0x15>
    3410:	86 e0       	ldi	r24, 0x06	; 6
    3412:	80 83       	st	Z, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    3414:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <Serial+0x12>
    3418:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <Serial+0x13>
    341c:	80 81       	ld	r24, Z
    341e:	88 69       	ori	r24, 0x98	; 152
    3420:	80 83       	st	Z, r24
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    3422:	e0 91 90 02 	lds	r30, 0x0290	; 0x800290 <Serial+0x12>
    3426:	f0 91 91 02 	lds	r31, 0x0291	; 0x800291 <Serial+0x13>
    342a:	80 81       	ld	r24, Z
    342c:	8f 7d       	andi	r24, 0xDF	; 223
    342e:	80 83       	st	Z, r24
setup():
/home/whisper/Arduino/Azangoo/Azangoo.ino:87

uint8_t h_year = 0, s_year = 0, d_year = 0, y_year = 0, d_month = 0, y_month = 0, d_day = 0, y_day = 0, d_hour = 0, y_hour = 0, d_minute = 0,  y_minute = 0, d_second = 0, y_second = 0, status = 0;

void setup() {
  Serial.begin(9600);
  Wire.begin();
    3430:	0e 94 0a 03 	call	0x614	; 0x614 <TwoWire::begin() [clone .constprop.4]>
/home/whisper/Arduino/Azangoo/Azangoo.ino:88
  URTCLIB_WIRE.begin();
    3434:	0e 94 0a 03 	call	0x614	; 0x614 <TwoWire::begin() [clone .constprop.4]>
set_rtc_address():
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:560
 * \brief Sets RTC i2 addres
 *
 * @param addr RTC i2C address
 */
void uRTCLib::set_rtc_address(const int addr) {
	_rtc_address = addr;
    3438:	88 e6       	ldi	r24, 0x68	; 104
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	90 93 af 03 	sts	0x03AF, r25	; 0x8003af <rtc+0x1>
    3440:	80 93 ae 03 	sts	0x03AE, r24	; 0x8003ae <rtc>
setup():
/home/whisper/Arduino/Azangoo/Azangoo.ino:90
  rtc.set_rtc_address(0x68);
  lcd.begin(16, 2);
    3444:	82 e0       	ldi	r24, 0x02	; 2
    3446:	0e 94 37 06 	call	0xc6e	; 0xc6e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char) [clone .constprop.71]>
/home/whisper/Arduino/Azangoo/Azangoo.ino:91
  pinMode(relay, OUTPUT);
    344a:	61 e0       	ldi	r22, 0x01	; 1
    344c:	81 e1       	ldi	r24, 0x11	; 17
    344e:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
/home/whisper/Arduino/Azangoo/Azangoo.ino:92
  pinMode(ramdan_mode, INPUT_PULLUP);
    3452:	62 e0       	ldi	r22, 0x02	; 2
    3454:	82 e0       	ldi	r24, 0x02	; 2
    3456:	0e 94 3c 03 	call	0x678	; 0x678 <pinMode>
welcome():
/home/whisper/Arduino/Azangoo/functions.ino:45
  eeprom.eeprom_read(location - 1, &shab_minute);
  eeprom.eeprom_read(location - 0, &shab_second);
}

void welcome() {
  lcd.clear();
    345a:	0e 94 30 06 	call	0xc60	; 0xc60 <LiquidCrystal::clear() [clone .constprop.73]>
/home/whisper/Arduino/Azangoo/functions.ino:46
  lcd.setCursor(3, 0);
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	83 e0       	ldi	r24, 0x03	; 3
    3462:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/functions.ino:47
  lcd.print(F("Pray Timer"));
    3466:	8f ef       	ldi	r24, 0xFF	; 255
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:48
  lcd.setCursor(1, 1);
    346e:	61 e0       	ldi	r22, 0x01	; 1
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/functions.ino:49
  lcd.print(F("0937 938 6752"));
    3476:	81 ef       	ldi	r24, 0xF1	; 241
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
setup():
/home/whisper/Arduino/Azangoo/Azangoo.ino:96
  welcome();
  //Setup df player mini
  //Serial.begin(9600);
  execute_CMD(0x3F, 0, 0);
    347e:	40 e0       	ldi	r20, 0x00	; 0
    3480:	60 e0       	ldi	r22, 0x00	; 0
    3482:	8f e3       	ldi	r24, 0x3F	; 63
    3484:	0e 94 23 08 	call	0x1046	; 0x1046 <execute_CMD(unsigned char, unsigned char, unsigned char)>
/home/whisper/Arduino/Azangoo/Azangoo.ino:97
  delay(500);
    3488:	64 ef       	ldi	r22, 0xF4	; 244
    348a:	71 e0       	ldi	r23, 0x01	; 1
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
/home/whisper/Arduino/Azangoo/Azangoo.ino:98
  execute_CMD(0x06, 0, 20); // Set the volume (0x00~0x30)
    3494:	44 e1       	ldi	r20, 0x14	; 20
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	86 e0       	ldi	r24, 0x06	; 6
    349a:	0e 94 23 08 	call	0x1046	; 0x1046 <execute_CMD(unsigned char, unsigned char, unsigned char)>
/home/whisper/Arduino/Azangoo/Azangoo.ino:99
  delay(2500);
    349e:	64 ec       	ldi	r22, 0xC4	; 196
    34a0:	79 e0       	ldi	r23, 0x09	; 9
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
/home/whisper/Arduino/Azangoo/Azangoo.ino:100
  execute_CMD(0x11, 1, 0);
    34aa:	40 e0       	ldi	r20, 0x00	; 0
    34ac:	61 e0       	ldi	r22, 0x01	; 1
    34ae:	81 e1       	ldi	r24, 0x11	; 17
    34b0:	0e 94 23 08 	call	0x1046	; 0x1046 <execute_CMD(unsigned char, unsigned char, unsigned char)>
/home/whisper/Arduino/Azangoo/Azangoo.ino:101
  delay(500);
    34b4:	64 ef       	ldi	r22, 0xF4	; 244
    34b6:	71 e0       	ldi	r23, 0x01	; 1
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
eeprom_read():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.h:156
    34c0:	42 e0       	ldi	r20, 0x02	; 2
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	67 e0       	ldi	r22, 0x07	; 7
    34c6:	72 e0       	ldi	r23, 0x02	; 2
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	0e 94 44 0b 	call	0x1688	; 0x1688 <uEEPROMLib::eeprom_read(unsigned int, unsigned char*, unsigned int) [clone .constprop.15]>
setup():
/home/whisper/Arduino/Azangoo/Azangoo.ino:103
  eeprom.eeprom_read(0, &set);
  if (set == 255) {
    34d0:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <set>
    34d4:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <set+0x1>
    34d8:	8f 3f       	cpi	r24, 0xFF	; 255
    34da:	91 05       	cpc	r25, r1
    34dc:	09 f0       	breq	.+2      	; 0x34e0 <main+0x156>
    34de:	54 c0       	rjmp	.+168    	; 0x3588 <main+0x1fe>
/home/whisper/Arduino/Azangoo/Azangoo.ino:104
    set_clock();
    34e0:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <set_clock()>
    34e4:	1a 82       	std	Y+2, r1	; 0x02
    34e6:	19 82       	std	Y+1, r1	; 0x01
main():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:253
	if (n == 0) {
		r = false;
	} else if (n == 1) {
		r = _eeprom_write(address, (byte) *((byte *) data));
	} else {
		dataptr = (byte *) data;
    34e8:	ce 01       	movw	r24, r28
    34ea:	01 96       	adiw	r24, 0x01	; 1
    34ec:	7c 01       	movw	r14, r24
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:244
bool uEEPROMLib::eeprom_write(const unsigned int address, void *data, const unsigned int n = 0) {
	bool r = true;
	byte *dataptr;

	uint8_t len = 0;
	unsigned int temp_address = address;
    34ee:	d1 2c       	mov	r13, r1
    34f0:	c1 2c       	mov	r12, r1
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:245
	uint16_t bytes_not_written = n;
    34f2:	02 e0       	ldi	r16, 0x02	; 2
    34f4:	10 e0       	ldi	r17, 0x00	; 0
beginTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    34f6:	aa 24       	eor	r10, r10
    34f8:	a3 94       	inc	r10
eeprom_write():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:257
	} else {
		dataptr = (byte *) data;
		while (bytes_not_written > 0) {
			// Calculate remaining bytes in current page from the point of the current
			// address offset. Remember, each page is 32 bytes per the datasheet
			page_bytes_remaining = (page_size - (temp_address % page_size) );
    34fa:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <eeprom>
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	c6 01       	movw	r24, r12
    3502:	b9 01       	movw	r22, r18
    3504:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__udivmodhi4>
    3508:	28 1b       	sub	r18, r24
    350a:	39 0b       	sbc	r19, r25
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:259

			len = (page_bytes_remaining < bytes_not_written ? page_bytes_remaining : bytes_not_written);
    350c:	20 17       	cp	r18, r16
    350e:	31 07       	cpc	r19, r17
    3510:	08 f0       	brcs	.+2      	; 0x3514 <main+0x18a>
    3512:	20 2f       	mov	r18, r16
    3514:	b2 2e       	mov	r11, r18
    3516:	9e e1       	ldi	r25, 0x1E	; 30
    3518:	92 17       	cp	r25, r18
    351a:	10 f4       	brcc	.+4      	; 0x3520 <main+0x196>
    351c:	5e e1       	ldi	r21, 0x1E	; 30
    351e:	b5 2e       	mov	r11, r21
beginTransmission():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:206
  txBufferLength = 0;
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
    3520:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <eeprom+0x1>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:196
}

void TwoWire::beginTransmission(uint8_t address)
{
  // indicate that we are transmitting
  transmitting = 1;
    3524:	a0 92 2f 02 	sts	0x022F, r10	; 0x80022f <TwoWire::transmitting>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:198
  // set address of targeted slave
  txAddress = address;
    3528:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <TwoWire::txAddress>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:200
  // reset tx buffer iterator vars
  txBufferIndex = 0;
    352c:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <TwoWire::txBufferIndex>
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/libraries/Wire/src/Wire.cpp:201
  txBufferLength = 0;
    3530:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <TwoWire::txBufferLength>
_eeprom_write_sub():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:220
 */
bool uEEPROMLib::_eeprom_write_sub(const unsigned int address, byte *data, const uint8_t n) {
	uint8_t idx = 0;
	uEEPROMLIB_YIELD
	UEEPROMLIB_WIRE.beginTransmission(_ee_address);
	UEEPROMLIB_WIRE.write((int)(address >> 8)); // MSB
    3534:	8d 2d       	mov	r24, r13
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:221
	UEEPROMLIB_WIRE.write((int)(address & 0xFF)); // LSB
    353c:	c6 01       	movw	r24, r12
    353e:	99 27       	eor	r25, r25
    3540:	0e 94 1b 08 	call	0x1036	; 0x1036 <TwoWire::write(int) [clone .constprop.54]>
    3544:	7e 2c       	mov	r7, r14
    3546:	47 01       	movw	r8, r14
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:222
	for (; idx < n; idx++) {
    3548:	88 2d       	mov	r24, r8
    354a:	87 19       	sub	r24, r7
    354c:	8b 15       	cp	r24, r11
    354e:	40 f4       	brcc	.+16     	; 0x3560 <main+0x1d6>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:223
		UEEPROMLIB_WIRE.write(*(data + idx));
    3550:	f4 01       	movw	r30, r8
    3552:	61 91       	ld	r22, Z+
    3554:	4f 01       	movw	r8, r30
    3556:	8b e1       	ldi	r24, 0x1B	; 27
    3558:	93 e0       	ldi	r25, 0x03	; 3
    355a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <TwoWire::write(unsigned char)>
    355e:	f4 cf       	rjmp	.-24     	; 0x3548 <main+0x1be>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:226
		uEEPROMLIB_YIELD
	}
	delay(uEEPROMLIB_WIRE_DELAY); // Little delay to assure EEPROM is able to process data; if missing and inside for look meses some values
    3560:	66 e0       	ldi	r22, 0x06	; 6
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:227
	return UEEPROMLIB_WIRE.endTransmission() == 0;
    356c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TwoWire::endTransmission() [clone .constprop.55]>
eeprom_write():
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:272
//			Serial.print(temp_address, DEC);
//			Serial.println("].");

			// Write it
			r &= _eeprom_write_sub(temp_address, dataptr, len);
			bytes_not_written -= len;
    3570:	6b 2d       	mov	r22, r11
    3572:	70 e0       	ldi	r23, 0x00	; 0
    3574:	06 1b       	sub	r16, r22
    3576:	17 0b       	sbc	r17, r23
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:273
			temp_address += len;
    3578:	c6 0e       	add	r12, r22
    357a:	d7 1e       	adc	r13, r23
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:274
			dataptr += len;
    357c:	e6 0e       	add	r14, r22
    357e:	f7 1e       	adc	r15, r23
/home/whisper/Arduino/libraries/uEEPROMLib/src/uEEPROMLib.cpp:254
		r = false;
	} else if (n == 1) {
		r = _eeprom_write(address, (byte) *((byte *) data));
	} else {
		dataptr = (byte *) data;
		while (bytes_not_written > 0) {
    3580:	01 15       	cp	r16, r1
    3582:	11 05       	cpc	r17, r1
    3584:	09 f0       	breq	.+2      	; 0x3588 <main+0x1fe>
    3586:	b9 cf       	rjmp	.-142    	; 0x34fa <main+0x170>
is_year_leap():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:143
    else
    {
        if (year > UPPER_GREGORIAN_YEAR || year < LOWER_GREGORIAN_YEAR)
            return false;
        if ((year % 4) == 0)
            if ((year % 100) != 0 || (year % 400) == 0)
    3588:	24 e6       	ldi	r18, 0x64	; 100
    358a:	62 2e       	mov	r6, r18
    358c:	71 2c       	mov	r7, r1
    358e:	30 e9       	ldi	r19, 0x90	; 144
    3590:	c3 2e       	mov	r12, r19
    3592:	dd 24       	eor	r13, r13
    3594:	d3 94       	inc	r13
serialEventRun():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	44 2e       	mov	r4, r20
    359a:	40 e0       	ldi	r20, 0x00	; 0
    359c:	54 2e       	mov	r5, r20
loop():
/home/whisper/Arduino/Azangoo/Azangoo.ino:117
  if (key == 'A') {
    status = 0;
    set_clock();
  } else if (key == 'B') {
    status = 8;
    set_clock_only = true;
    359e:	33 24       	eor	r3, r3
    35a0:	33 94       	inc	r3
get_day_number():
/home/whisper/Arduino/Azangoo/functions.ino:60
    value = 186;
    month_num -= 6;
  }
  if ( month_num > 1 ) {
    month_num--;
    value += month_num * 30;
    35a2:	9e e1       	ldi	r25, 0x1E	; 30
    35a4:	29 2e       	mov	r2, r25
loop():
/home/whisper/Arduino/Azangoo/Azangoo.ino:111
    eeprom.eeprom_write(0, 0);
  }
}

void loop() {
  char key = keypad.getKey();
    35a6:	0e 94 46 04 	call	0x88c	; 0x88c <Keypad::getKey() [clone .constprop.21]>
/home/whisper/Arduino/Azangoo/Azangoo.ino:112
  if (key == 'A') {
    35aa:	81 34       	cpi	r24, 0x41	; 65
    35ac:	09 f0       	breq	.+2      	; 0x35b0 <main+0x226>
    35ae:	bb c1       	rjmp	.+886    	; 0x3926 <main+0x59c>
/home/whisper/Arduino/Azangoo/Azangoo.ino:113
    status = 0;
    35b0:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <status>
/home/whisper/Arduino/Azangoo/Azangoo.ino:118
    set_clock();
  } else if (key == 'B') {
    status = 8;
    set_clock_only = true;
    set_clock();
    35b4:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <set_clock()>
/home/whisper/Arduino/Azangoo/Azangoo.ino:120
  }
  if (millis() > last_loop + 1000) {
    35b8:	0e 94 de 03 	call	0x7bc	; 0x7bc <millis>
    35bc:	ab 01       	movw	r20, r22
    35be:	bc 01       	movw	r22, r24
    35c0:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <last_loop>
    35c4:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <last_loop+0x1>
    35c8:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <last_loop+0x2>
    35cc:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <last_loop+0x3>
    35d0:	88 51       	subi	r24, 0x18	; 24
    35d2:	9c 4f       	sbci	r25, 0xFC	; 252
    35d4:	af 4f       	sbci	r26, 0xFF	; 255
    35d6:	bf 4f       	sbci	r27, 0xFF	; 255
    35d8:	84 17       	cp	r24, r20
    35da:	95 07       	cpc	r25, r21
    35dc:	a6 07       	cpc	r26, r22
    35de:	b7 07       	cpc	r27, r23
    35e0:	08 f0       	brcs	.+2      	; 0x35e4 <main+0x25a>
    35e2:	95 c1       	rjmp	.+810    	; 0x390e <main+0x584>
/home/whisper/Arduino/Azangoo/Azangoo.ino:121
    last_loop = millis();
    35e4:	0e 94 de 03 	call	0x7bc	; 0x7bc <millis>
    35e8:	60 93 25 02 	sts	0x0225, r22	; 0x800225 <last_loop>
    35ec:	70 93 26 02 	sts	0x0226, r23	; 0x800226 <last_loop+0x1>
    35f0:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <last_loop+0x2>
    35f4:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <last_loop+0x3>
get_rtc():
/home/whisper/Arduino/Azangoo/functions.ino:8
  rtc.set(Second, Minute, Hour, dow, rtc_day, rtc_month, rtc_year - 2000);
  rtc.refresh();
}

void get_rtc() {
  rtc.refresh();
    35f8:	0e 94 b0 08 	call	0x1160	; 0x1160 <uRTCLib::refresh() [clone .constprop.52]>
/home/whisper/Arduino/Azangoo/functions.ino:9
  rtc_year = rtc.year() + 2000;
    35fc:	20 91 b5 03 	lds	r18, 0x03B5	; 0x8003b5 <rtc+0x7>
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	20 53       	subi	r18, 0x30	; 48
    3604:	38 4f       	sbci	r19, 0xF8	; 248
    3606:	30 93 10 02 	sts	0x0210, r19	; 0x800210 <rtc_year+0x1>
    360a:	20 93 0f 02 	sts	0x020F, r18	; 0x80020f <rtc_year>
month():
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:525
 * \brief Returns actual month
 *
 * @return Current stored month
 */
uint8_t uRTCLib::month() {
	return _month;
    360e:	00 91 b4 03 	lds	r16, 0x03B4	; 0x8003b4 <rtc+0x6>
get_rtc():
/home/whisper/Arduino/Azangoo/functions.ino:10
  rtc_month = rtc.month();
    3612:	10 e0       	ldi	r17, 0x00	; 0
    3614:	10 93 0e 02 	sts	0x020E, r17	; 0x80020e <rtc_month+0x1>
    3618:	00 93 0d 02 	sts	0x020D, r16	; 0x80020d <rtc_month>
day():
/home/whisper/Arduino/libraries/uRTCLib/src/uRTCLib.cpp:516
 * \brief Returns actual day
 *
 * @return Current stored day
 */
uint8_t uRTCLib::day() {
	return _day;
    361c:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <rtc+0x5>
get_rtc():
/home/whisper/Arduino/Azangoo/functions.ino:11
  rtc_day = rtc.day();
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	f0 93 0c 02 	sts	0x020C, r31	; 0x80020c <rtc_day+0x1>
    3626:	e0 93 0b 02 	sts	0x020B, r30	; 0x80020b <rtc_day>
/home/whisper/Arduino/Azangoo/functions.ino:12
  Hour = rtc.hour();
    362a:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <rtc+0x4>
    362e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <Hour>
/home/whisper/Arduino/Azangoo/functions.ino:13
  Minute = rtc.minute();
    3632:	80 91 b1 03 	lds	r24, 0x03B1	; 0x8003b1 <rtc+0x3>
    3636:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <Minute>
/home/whisper/Arduino/Azangoo/functions.ino:14
  Second = rtc.second();
    363a:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <rtc+0x2>
    363e:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <Second>
is_date_valid():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:155
    }
}

bool Jalali::is_date_valid(int year, int month, int day, int calendar)
{
    if (month > 12 || month < 1)
    3642:	01 50       	subi	r16, 0x01	; 1
    3644:	11 09       	sbc	r17, r1
    3646:	0c 30       	cpi	r16, 0x0C	; 12
    3648:	11 05       	cpc	r17, r1
    364a:	08 f4       	brcc	.+2      	; 0x364e <main+0x2c4>
    364c:	75 c1       	rjmp	.+746    	; 0x3938 <main+0x5ae>
convert_date():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:187

void Jalali::convert_date(int year, int month, int day, int &cyear, int &cmonth, int &cday, int calendar)
{
    if (!is_date_valid(year, month, day, calendar))
    {
        cday = cmonth = cyear = 0;
    364e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <per_year+0x1>
    3652:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <per_year>
    3656:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <per_month+0x1>
    365a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <per_month>
    365e:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <per_day+0x1>
    3662:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <per_day>
display_home():
/home/whisper/Arduino/Azangoo/functions.ino:67
  value += day_num;
  return value;
}

void display_home() {
  lcd.clear();
    3666:	0e 94 30 06 	call	0xc60	; 0xc60 <LiquidCrystal::clear() [clone .constprop.73]>
/home/whisper/Arduino/Azangoo/functions.ino:68
  lcd.print(F("Date: "));
    366a:	8a e3       	ldi	r24, 0x3A	; 58
    366c:	91 e0       	ldi	r25, 0x01	; 1
    366e:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:69
  lcd.print(per_year);
    3672:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <per_year>
    3676:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <per_year+0x1>
    367a:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/functions.ino:70
  lcd.print(F("/"));
    367e:	88 e3       	ldi	r24, 0x38	; 56
    3680:	91 e0       	ldi	r25, 0x01	; 1
    3682:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:71
  if ( per_month < 10 ) {
    3686:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <per_month>
    368a:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <per_month+0x1>
    368e:	0a 97       	sbiw	r24, 0x0a	; 10
    3690:	24 f4       	brge	.+8      	; 0x369a <main+0x310>
/home/whisper/Arduino/Azangoo/functions.ino:72
    lcd.print(F("0"));
    3692:	86 e3       	ldi	r24, 0x36	; 54
    3694:	91 e0       	ldi	r25, 0x01	; 1
    3696:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:74
  }
  lcd.print(per_month);
    369a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <per_month>
    369e:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <per_month+0x1>
    36a2:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/functions.ino:75
  lcd.print(F("/"));
    36a6:	84 e3       	ldi	r24, 0x34	; 52
    36a8:	91 e0       	ldi	r25, 0x01	; 1
    36aa:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:76
  if ( per_day < 10 ) {
    36ae:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <per_day>
    36b2:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <per_day+0x1>
    36b6:	0a 97       	sbiw	r24, 0x0a	; 10
    36b8:	24 f4       	brge	.+8      	; 0x36c2 <main+0x338>
/home/whisper/Arduino/Azangoo/functions.ino:77
    lcd.print(F("0"));
    36ba:	82 e3       	ldi	r24, 0x32	; 50
    36bc:	91 e0       	ldi	r25, 0x01	; 1
    36be:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:79
  }
  lcd.print(per_day);
    36c2:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <per_day>
    36c6:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <per_day+0x1>
    36ca:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Print::print(int, int) [clone .constprop.32]>
/home/whisper/Arduino/Azangoo/functions.ino:80
  lcd.setCursor(0, 1);
    36ce:	61 e0       	ldi	r22, 0x01	; 1
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/functions.ino:81
  lcd.print(F("Time:  "));
    36d6:	8a e2       	ldi	r24, 0x2A	; 42
    36d8:	91 e0       	ldi	r25, 0x01	; 1
    36da:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:82
  if ( Hour < 10 ) {
    36de:	10 91 1c 02 	lds	r17, 0x021C	; 0x80021c <Hour>
    36e2:	1a 30       	cpi	r17, 0x0A	; 10
    36e4:	20 f4       	brcc	.+8      	; 0x36ee <main+0x364>
/home/whisper/Arduino/Azangoo/functions.ino:83
    lcd.print(F("0"));
    36e6:	88 e2       	ldi	r24, 0x28	; 40
    36e8:	91 e0       	ldi	r25, 0x01	; 1
    36ea:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:85
  }
  lcd.print(Hour);
    36ee:	81 2f       	mov	r24, r17
    36f0:	0e 94 df 0c 	call	0x19be	; 0x19be <Print::print(unsigned char, int) [clone .constprop.36]>
/home/whisper/Arduino/Azangoo/functions.ino:86
  lcd.print(F(":"));
    36f4:	86 e2       	ldi	r24, 0x26	; 38
    36f6:	91 e0       	ldi	r25, 0x01	; 1
    36f8:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:87
  if ( Minute < 10 ) {
    36fc:	10 91 1a 02 	lds	r17, 0x021A	; 0x80021a <Minute>
    3700:	1a 30       	cpi	r17, 0x0A	; 10
    3702:	20 f4       	brcc	.+8      	; 0x370c <main+0x382>
/home/whisper/Arduino/Azangoo/functions.ino:88
    lcd.print(F("0"));
    3704:	84 e2       	ldi	r24, 0x24	; 36
    3706:	91 e0       	ldi	r25, 0x01	; 1
    3708:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:90
  }
  lcd.print(Minute);
    370c:	81 2f       	mov	r24, r17
    370e:	0e 94 df 0c 	call	0x19be	; 0x19be <Print::print(unsigned char, int) [clone .constprop.36]>
/home/whisper/Arduino/Azangoo/functions.ino:91
  lcd.print(F(":"));
    3712:	82 e2       	ldi	r24, 0x22	; 34
    3714:	91 e0       	ldi	r25, 0x01	; 1
    3716:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:92
  if ( Second < 10 ) {
    371a:	10 91 18 02 	lds	r17, 0x0218	; 0x800218 <Second>
    371e:	1a 30       	cpi	r17, 0x0A	; 10
    3720:	20 f4       	brcc	.+8      	; 0x372a <main+0x3a0>
/home/whisper/Arduino/Azangoo/functions.ino:93
    lcd.print(F("0"));
    3722:	80 e2       	ldi	r24, 0x20	; 32
    3724:	91 e0       	ldi	r25, 0x01	; 1
    3726:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:95
  }
  lcd.print(Second);
    372a:	81 2f       	mov	r24, r17
    372c:	0e 94 df 0c 	call	0x19be	; 0x19be <Print::print(unsigned char, int) [clone .constprop.36]>
loop():
/home/whisper/Arduino/Azangoo/Azangoo.ino:124
    get_rtc();
    display_home();
    day_number = get_day_number(per_month, per_day);
    3730:	e0 90 23 02 	lds	r14, 0x0223	; 0x800223 <per_day>
    3734:	f0 90 24 02 	lds	r15, 0x0224	; 0x800224 <per_day+0x1>
    3738:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <per_month>
    373c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <per_month+0x1>
main():
/home/whisper/Arduino/Azangoo/functions.ino:53
  lcd.setCursor(1, 1);
  lcd.print(F("0937 938 6752"));
}

short int get_day_number(int month_num, int day_num) {
  short int value = 0;
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	20 e0       	ldi	r18, 0x00	; 0
get_day_number():
/home/whisper/Arduino/Azangoo/functions.ino:54
  if ( month_num > 6 ) {
    3744:	87 30       	cpi	r24, 0x07	; 7
    3746:	91 05       	cpc	r25, r1
    3748:	1c f0       	brlt	.+6      	; 0x3750 <main+0x3c6>
/home/whisper/Arduino/Azangoo/functions.ino:56
    value = 186;
    month_num -= 6;
    374a:	06 97       	sbiw	r24, 0x06	; 6
main():
/home/whisper/Arduino/Azangoo/functions.ino:55
}

short int get_day_number(int month_num, int day_num) {
  short int value = 0;
  if ( month_num > 6 ) {
    value = 186;
    374c:	2a eb       	ldi	r18, 0xBA	; 186
    374e:	30 e0       	ldi	r19, 0x00	; 0
get_day_number():
/home/whisper/Arduino/Azangoo/functions.ino:58
    month_num -= 6;
  }
  if ( month_num > 1 ) {
    3750:	82 30       	cpi	r24, 0x02	; 2
    3752:	91 05       	cpc	r25, r1
    3754:	44 f0       	brlt	.+16     	; 0x3766 <main+0x3dc>
/home/whisper/Arduino/Azangoo/functions.ino:59
    month_num--;
    3756:	01 97       	sbiw	r24, 0x01	; 1
/home/whisper/Arduino/Azangoo/functions.ino:60
    value += month_num * 30;
    3758:	28 9e       	mul	r2, r24
    375a:	a0 01       	movw	r20, r0
    375c:	29 9e       	mul	r2, r25
    375e:	50 0d       	add	r21, r0
    3760:	11 24       	eor	r1, r1
    3762:	24 0f       	add	r18, r20
    3764:	35 1f       	adc	r19, r21
/home/whisper/Arduino/Azangoo/functions.ino:62
  }
  value += day_num;
    3766:	e2 0e       	add	r14, r18
    3768:	f3 1e       	adc	r15, r19
loop():
/home/whisper/Arduino/Azangoo/Azangoo.ino:124
    376a:	f0 92 20 02 	sts	0x0220, r15	; 0x800220 <day_number+0x1>
    376e:	e0 92 1f 02 	sts	0x021F, r14	; 0x80021f <day_number>
/home/whisper/Arduino/Azangoo/Azangoo.ino:125
    if (last_day != day_number) {
    3772:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <last_day>
    3776:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <last_day+0x1>
    377a:	8e 15       	cp	r24, r14
    377c:	9f 05       	cpc	r25, r15
    377e:	11 f0       	breq	.+4      	; 0x3784 <main+0x3fa>
/home/whisper/Arduino/Azangoo/Azangoo.ino:126
      new_day = true;
    3780:	30 92 31 01 	sts	0x0131, r3	; 0x800131 <new_day>
/home/whisper/Arduino/Azangoo/Azangoo.ino:128
    }
    if (new_day) {
    3784:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <new_day>
    3788:	88 23       	and	r24, r24
    378a:	09 f4       	brne	.+2      	; 0x378e <main+0x404>
    378c:	5e c0       	rjmp	.+188    	; 0x384a <main+0x4c0>
read_eeprom():
/home/whisper/Arduino/Azangoo/functions.ino:32
  eeprom.eeprom_write(location - 1, shab_minute);
  eeprom.eeprom_write(location - 0, shab_second);
}

void read_eeprom(int location) {
  location *= 9;
    378e:	99 e0       	ldi	r25, 0x09	; 9
    3790:	9e 9d       	mul	r25, r14
    3792:	80 01       	movw	r16, r0
    3794:	9f 9d       	mul	r25, r15
    3796:	10 0d       	add	r17, r0
    3798:	11 24       	eor	r1, r1
/home/whisper/Arduino/Azangoo/functions.ino:33
  eeprom.eeprom_read(location - 8, &sobh_hour);
    379a:	6b e1       	ldi	r22, 0x1B	; 27
    379c:	72 e0       	ldi	r23, 0x02	; 2
    379e:	c8 01       	movw	r24, r16
    37a0:	08 97       	sbiw	r24, 0x08	; 8
    37a2:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
/home/whisper/Arduino/Azangoo/functions.ino:34
  eeprom.eeprom_read(location - 7, &sobh_minute);
    37a6:	69 e1       	ldi	r22, 0x19	; 25
    37a8:	72 e0       	ldi	r23, 0x02	; 2
    37aa:	c8 01       	movw	r24, r16
    37ac:	07 97       	sbiw	r24, 0x07	; 7
    37ae:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
/home/whisper/Arduino/Azangoo/functions.ino:35
  eeprom.eeprom_read(location - 6, &sobh_second);
    37b2:	67 e1       	ldi	r22, 0x17	; 23
    37b4:	72 e0       	ldi	r23, 0x02	; 2
    37b6:	c8 01       	movw	r24, r16
    37b8:	06 97       	sbiw	r24, 0x06	; 6
    37ba:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
/home/whisper/Arduino/Azangoo/functions.ino:36
  eeprom.eeprom_read(location - 5, &zohr_hour);
    37be:	66 e1       	ldi	r22, 0x16	; 22
    37c0:	72 e0       	ldi	r23, 0x02	; 2
    37c2:	c8 01       	movw	r24, r16
    37c4:	05 97       	sbiw	r24, 0x05	; 5
    37c6:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
/home/whisper/Arduino/Azangoo/functions.ino:37
  eeprom.eeprom_read(location - 4, &zohr_minute);
    37ca:	65 e1       	ldi	r22, 0x15	; 21
    37cc:	72 e0       	ldi	r23, 0x02	; 2
    37ce:	c8 01       	movw	r24, r16
    37d0:	04 97       	sbiw	r24, 0x04	; 4
    37d2:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
/home/whisper/Arduino/Azangoo/functions.ino:38
  eeprom.eeprom_read(location - 3, &zohr_second);
    37d6:	64 e1       	ldi	r22, 0x14	; 20
    37d8:	72 e0       	ldi	r23, 0x02	; 2
    37da:	c8 01       	movw	r24, r16
    37dc:	03 97       	sbiw	r24, 0x03	; 3
    37de:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
/home/whisper/Arduino/Azangoo/functions.ino:39
  eeprom.eeprom_read(location - 2, &shab_hour);
    37e2:	63 e1       	ldi	r22, 0x13	; 19
    37e4:	72 e0       	ldi	r23, 0x02	; 2
    37e6:	c8 01       	movw	r24, r16
    37e8:	02 97       	sbiw	r24, 0x02	; 2
    37ea:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
/home/whisper/Arduino/Azangoo/functions.ino:40
  eeprom.eeprom_read(location - 1, &shab_minute);
    37ee:	62 e1       	ldi	r22, 0x12	; 18
    37f0:	72 e0       	ldi	r23, 0x02	; 2
    37f2:	c8 01       	movw	r24, r16
    37f4:	01 97       	sbiw	r24, 0x01	; 1
    37f6:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
/home/whisper/Arduino/Azangoo/functions.ino:41
  eeprom.eeprom_read(location - 0, &shab_second);
    37fa:	61 e1       	ldi	r22, 0x11	; 17
    37fc:	72 e0       	ldi	r23, 0x02	; 2
    37fe:	c8 01       	movw	r24, r16
    3800:	0e 94 46 0b 	call	0x168c	; 0x168c <void uEEPROMLib::eeprom_read<unsigned char>(unsigned int, unsigned char*) [clone .constprop.8]>
loop():
/home/whisper/Arduino/Azangoo/Azangoo.ino:130
      read_eeprom(day_number);
      new_day = false;
    3804:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <new_day>
/home/whisper/Arduino/Azangoo/Azangoo.ino:131
      last_day = day_number;
    3808:	f0 92 1e 02 	sts	0x021E, r15	; 0x80021e <last_day+0x1>
    380c:	e0 92 1d 02 	sts	0x021D, r14	; 0x80021d <last_day>
/home/whisper/Arduino/Azangoo/Azangoo.ino:132
      if ( digitalRead(ramdan_mode) == HIGH ) {
    3810:	82 e0       	ldi	r24, 0x02	; 2
    3812:	0e 94 ac 02 	call	0x558	; 0x558 <digitalRead>
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	c1 f4       	brne	.+48     	; 0x384a <main+0x4c0>
calc_ramdan():
/home/whisper/Arduino/Azangoo/functions.ino:99
  }
  lcd.print(Second);
}

void calc_ramdan() {
  if (sobh_minute >= 30) {
    381a:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <sobh_minute>
    381e:	8e 31       	cpi	r24, 0x1E	; 30
    3820:	08 f4       	brcc	.+2      	; 0x3824 <main+0x49a>
    3822:	e5 c0       	rjmp	.+458    	; 0x39ee <main+0x664>
/home/whisper/Arduino/Azangoo/functions.ino:100
    sobh_minute -= 30;
    3824:	8e 51       	subi	r24, 0x1E	; 30
/home/whisper/Arduino/Azangoo/functions.ino:103
  } else {
    sobh_hour--;
    sobh_minute = 60 - (30 - sobh_minute);
    3826:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <sobh_minute>
/home/whisper/Arduino/Azangoo/functions.ino:105
  }
  if ( zohr_minute >= 30 ) {
    382a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <zohr_minute>
    382e:	8e 31       	cpi	r24, 0x1E	; 30
    3830:	08 f4       	brcc	.+2      	; 0x3834 <main+0x4aa>
    3832:	e4 c0       	rjmp	.+456    	; 0x39fc <main+0x672>
/home/whisper/Arduino/Azangoo/functions.ino:106
    zohr_minute -= 30;
    3834:	8e 51       	subi	r24, 0x1E	; 30
/home/whisper/Arduino/Azangoo/functions.ino:109
  } else {
    zohr_hour--;
    zohr_minute = 60 - (30 - zohr_minute);
    3836:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <zohr_minute>
/home/whisper/Arduino/Azangoo/functions.ino:111
  }
  if (shab_minute >= 30) {
    383a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <shab_minute>
    383e:	8e 31       	cpi	r24, 0x1E	; 30
    3840:	08 f4       	brcc	.+2      	; 0x3844 <main+0x4ba>
    3842:	e3 c0       	rjmp	.+454    	; 0x3a0a <main+0x680>
/home/whisper/Arduino/Azangoo/functions.ino:112
    shab_minute -= 30;
    3844:	8e 51       	subi	r24, 0x1E	; 30
/home/whisper/Arduino/Azangoo/functions.ino:115
  } else {
    shab_hour--;
    shab_minute = 60 - (30 - shab_minute);
    3846:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <shab_minute>
loop():
/home/whisper/Arduino/Azangoo/Azangoo.ino:136
        calc_ramdan();
      }
    }
    if ( (Hour == sobh_hour && Minute == sobh_minute && Second == sobh_second) || (Hour == zohr_hour && Minute == zohr_minute && Second == zohr_second) || (Hour == shab_hour && Minute == shab_minute && Second == shab_second)) {
    384a:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <Hour>
    384e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <sobh_hour>
    3852:	89 13       	cpse	r24, r25
    3854:	0c c0       	rjmp	.+24     	; 0x386e <main+0x4e4>
    3856:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <Minute>
    385a:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <sobh_minute>
    385e:	29 13       	cpse	r18, r25
    3860:	06 c0       	rjmp	.+12     	; 0x386e <main+0x4e4>
    3862:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <Second>
    3866:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <sobh_second>
    386a:	29 17       	cp	r18, r25
    386c:	01 f1       	breq	.+64     	; 0x38ae <main+0x524>
    386e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <zohr_hour>
    3872:	89 13       	cpse	r24, r25
    3874:	0c c0       	rjmp	.+24     	; 0x388e <main+0x504>
    3876:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <Minute>
    387a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <zohr_minute>
    387e:	29 13       	cpse	r18, r25
    3880:	06 c0       	rjmp	.+12     	; 0x388e <main+0x504>
    3882:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <Second>
    3886:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <zohr_second>
    388a:	29 17       	cp	r18, r25
    388c:	81 f0       	breq	.+32     	; 0x38ae <main+0x524>
    388e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <shab_hour>
    3892:	89 13       	cpse	r24, r25
    3894:	3c c0       	rjmp	.+120    	; 0x390e <main+0x584>
    3896:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <Minute>
    389a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <shab_minute>
    389e:	98 13       	cpse	r25, r24
    38a0:	36 c0       	rjmp	.+108    	; 0x390e <main+0x584>
    38a2:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <Second>
    38a6:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <shab_second>
    38aa:	98 13       	cpse	r25, r24
    38ac:	30 c0       	rjmp	.+96     	; 0x390e <main+0x584>
play_azan():
/home/whisper/Arduino/Azangoo/functions.ino:120
  }
}

void play_azan() {
  digitalWrite(relay, HIGH);
    38ae:	61 e0       	ldi	r22, 0x01	; 1
    38b0:	81 e1       	ldi	r24, 0x11	; 17
    38b2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
/home/whisper/Arduino/Azangoo/functions.ino:121
  lcd.clear();
    38b6:	0e 94 30 06 	call	0xc60	; 0xc60 <LiquidCrystal::clear() [clone .constprop.73]>
/home/whisper/Arduino/Azangoo/functions.ino:122
    lcd.setCursor(4, 0);
    38ba:	60 e0       	ldi	r22, 0x00	; 0
    38bc:	84 e0       	ldi	r24, 0x04	; 4
    38be:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/functions.ino:123
    lcd.print(F("Playing"));
    38c2:	88 e1       	ldi	r24, 0x18	; 24
    38c4:	91 e0       	ldi	r25, 0x01	; 1
    38c6:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:124
    lcd.setCursor(1, 1);
    38ca:	61 e0       	ldi	r22, 0x01	; 1
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <LiquidCrystal::setCursor(unsigned char, unsigned char) [clone .constprop.42]>
/home/whisper/Arduino/Azangoo/functions.ino:125
    lcd.print(F("0937 938 6752"));
    38d2:	8a e0       	ldi	r24, 0x0A	; 10
    38d4:	91 e0       	ldi	r25, 0x01	; 1
    38d6:	0e 94 f6 06 	call	0xdec	; 0xdec <Print::print(__FlashStringHelper const*) [clone .constprop.43]>
/home/whisper/Arduino/Azangoo/functions.ino:126
  if (digitalRead(ramdan_mode) == HIGH) {
    38da:	82 e0       	ldi	r24, 0x02	; 2
    38dc:	0e 94 ac 02 	call	0x558	; 0x558 <digitalRead>
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <main+0x55c>
    38e4:	99 c0       	rjmp	.+306    	; 0x3a18 <main+0x68e>
/home/whisper/Arduino/Azangoo/functions.ino:127
    execute_CMD(0x11, 0, 2); //play file 2
    38e6:	42 e0       	ldi	r20, 0x02	; 2
    38e8:	60 e0       	ldi	r22, 0x00	; 0
    38ea:	81 e1       	ldi	r24, 0x11	; 17
    38ec:	0e 94 23 08 	call	0x1046	; 0x1046 <execute_CMD(unsigned char, unsigned char, unsigned char)>
/home/whisper/Arduino/Azangoo/functions.ino:128
    delay(1800000);
    38f0:	60 e4       	ldi	r22, 0x40	; 64
    38f2:	77 e7       	ldi	r23, 0x77	; 119
    38f4:	8b e1       	ldi	r24, 0x1B	; 27
    38f6:	90 e0       	ldi	r25, 0x00	; 0
/home/whisper/Arduino/Azangoo/functions.ino:131
    } else {
    execute_CMD(0x11, 0, 1); //play file 1
    delay(300000);
    38f8:	0e 94 ac 03 	call	0x758	; 0x758 <delay>
/home/whisper/Arduino/Azangoo/functions.ino:133
    }
  execute_CMD(0x0E, 0, 0);
    38fc:	40 e0       	ldi	r20, 0x00	; 0
    38fe:	60 e0       	ldi	r22, 0x00	; 0
    3900:	8e e0       	ldi	r24, 0x0E	; 14
    3902:	0e 94 23 08 	call	0x1046	; 0x1046 <execute_CMD(unsigned char, unsigned char, unsigned char)>
/home/whisper/Arduino/Azangoo/functions.ino:134
  digitalWrite(relay, LOW);
    3906:	60 e0       	ldi	r22, 0x00	; 0
    3908:	81 e1       	ldi	r24, 0x11	; 17
    390a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <digitalWrite>
serialEventRun():
/home/whisper/.arduino15/packages/MiniCore/hardware/avr/2.2.2/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    390e:	41 14       	cp	r4, r1
    3910:	51 04       	cpc	r5, r1
    3912:	09 f4       	brne	.+2      	; 0x3916 <main+0x58c>
    3914:	48 ce       	rjmp	.-880    	; 0x35a6 <main+0x21c>
    3916:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Serial0_available()>
    391a:	88 23       	and	r24, r24
    391c:	09 f4       	brne	.+2      	; 0x3920 <main+0x596>
    391e:	41 ce       	rjmp	.-894    	; 0x35a2 <main+0x218>
    3920:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3924:	3e ce       	rjmp	.-900    	; 0x35a2 <main+0x218>
loop():
/home/whisper/Arduino/Azangoo/Azangoo.ino:115
void loop() {
  char key = keypad.getKey();
  if (key == 'A') {
    status = 0;
    set_clock();
  } else if (key == 'B') {
    3926:	82 34       	cpi	r24, 0x42	; 66
    3928:	09 f0       	breq	.+2      	; 0x392c <main+0x5a2>
    392a:	46 ce       	rjmp	.-884    	; 0x35b8 <main+0x22e>
/home/whisper/Arduino/Azangoo/Azangoo.ino:116
    status = 8;
    392c:	f8 e0       	ldi	r31, 0x08	; 8
    392e:	f0 93 2a 02 	sts	0x022A, r31	; 0x80022a <status>
/home/whisper/Arduino/Azangoo/Azangoo.ino:117
    set_clock_only = true;
    3932:	30 92 29 02 	sts	0x0229, r3	; 0x800229 <set_clock_only>
    3936:	3e ce       	rjmp	.-900    	; 0x35b4 <main+0x22a>
is_date_valid():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:157

bool Jalali::is_date_valid(int year, int month, int day, int calendar)
{
    if (month > 12 || month < 1)
        return false;
    if (day > 31 || day < 1)
    3938:	7f 01       	movw	r14, r30
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	e8 1a       	sub	r14, r24
    393e:	f1 08       	sbc	r15, r1
    3940:	9f e1       	ldi	r25, 0x1F	; 31
    3942:	e9 16       	cp	r14, r25
    3944:	f1 04       	cpc	r15, r1
    3946:	08 f0       	brcs	.+2      	; 0x394a <main+0x5c0>
    3948:	82 ce       	rjmp	.-764    	; 0x364e <main+0x2c4>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:175
    }
    else
    {
        if (year > UPPER_GREGORIAN_YEAR || year < LOWER_GREGORIAN_YEAR)
            return false;
        if (month == 1)
    394a:	01 30       	cpi	r16, 0x01	; 1
    394c:	11 05       	cpc	r17, r1
    394e:	b9 f4       	brne	.+46     	; 0x397e <main+0x5f4>
is_year_leap():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:142
    }
    else
    {
        if (year > UPPER_GREGORIAN_YEAR || year < LOWER_GREGORIAN_YEAR)
            return false;
        if ((year % 4) == 0)
    3950:	c9 01       	movw	r24, r18
    3952:	83 70       	andi	r24, 0x03	; 3
    3954:	99 27       	eor	r25, r25
    3956:	89 2b       	or	r24, r25
    3958:	a1 f5       	brne	.+104    	; 0x39c2 <main+0x638>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:143
            if ((year % 100) != 0 || (year % 400) == 0)
    395a:	c9 01       	movw	r24, r18
    395c:	b3 01       	movw	r22, r6
    395e:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    3962:	89 2b       	or	r24, r25
    3964:	31 f4       	brne	.+12     	; 0x3972 <main+0x5e8>
    3966:	c9 01       	movw	r24, r18
    3968:	b6 01       	movw	r22, r12
    396a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <__divmodhi4>
    396e:	89 2b       	or	r24, r25
    3970:	41 f5       	brne	.+80     	; 0x39c2 <main+0x638>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:145
            {
                gmonths[1] = 29;
    3972:	8d e1       	ldi	r24, 0x1D	; 29
    3974:	90 e0       	ldi	r25, 0x00	; 0
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:148
                return true;
            }
        gmonths[1] = 28;
    3976:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <gmonths+0x3>
    397a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <gmonths+0x2>
is_date_valid():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:177
    {
        if (year > UPPER_GREGORIAN_YEAR || year < LOWER_GREGORIAN_YEAR)
            return false;
        if (month == 1)
            is_year_leap(year, calendar);
        mnt = gmonths[month];
    397e:	d8 01       	movw	r26, r16
    3980:	aa 0f       	add	r26, r26
    3982:	bb 1f       	adc	r27, r27
    3984:	af 5f       	subi	r26, 0xFF	; 255
    3986:	be 4f       	sbci	r27, 0xFE	; 254
convert_date():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:185
    return day <= mnt;
}

void Jalali::convert_date(int year, int month, int day, int &cyear, int &cmonth, int &cday, int calendar)
{
    if (!is_date_valid(year, month, day, calendar))
    3988:	8d 91       	ld	r24, X+
    398a:	9c 91       	ld	r25, X
    398c:	8e 17       	cp	r24, r30
    398e:	9f 07       	cpc	r25, r31
    3990:	0c f4       	brge	.+2      	; 0x3994 <main+0x60a>
    3992:	5d ce       	rjmp	.-838    	; 0x364e <main+0x2c4>
date_to_days():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:62
        for (int i = 0; i < month - 1; i++)
            days += jmonths[i];
    }
    else
    {
        days = gregorian_jd0(year);
    3994:	c9 01       	movw	r24, r18
    3996:	0e 94 4a 0b 	call	0x1694	; 0x1694 <gregorian_jd0(int)>
    399a:	e1 e0       	ldi	r30, 0x01	; 1
    399c:	f1 e0       	ldi	r31, 0x01	; 1
main():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:63
        for (int i = 0; i < month - 1; i++)
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	20 e0       	ldi	r18, 0x00	; 0
date_to_days():
    39a2:	20 17       	cp	r18, r16
    39a4:	31 07       	cpc	r19, r17
    39a6:	84 f4       	brge	.+32     	; 0x39c8 <main+0x63e>
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:64
            days += gmonths[i];
    39a8:	81 90       	ld	r8, Z+
    39aa:	91 90       	ld	r9, Z+
    39ac:	09 2c       	mov	r0, r9
    39ae:	00 0c       	add	r0, r0
    39b0:	aa 08       	sbc	r10, r10
    39b2:	bb 08       	sbc	r11, r11
    39b4:	68 0d       	add	r22, r8
    39b6:	79 1d       	adc	r23, r9
    39b8:	8a 1d       	adc	r24, r10
    39ba:	9b 1d       	adc	r25, r11
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:63
            days += jmonths[i];
    }
    else
    {
        days = gregorian_jd0(year);
        for (int i = 0; i < month - 1; i++)
    39bc:	2f 5f       	subi	r18, 0xFF	; 255
    39be:	3f 4f       	sbci	r19, 0xFF	; 255
    39c0:	f0 cf       	rjmp	.-32     	; 0x39a2 <main+0x618>
is_year_leap():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:148
            if ((year % 100) != 0 || (year % 400) == 0)
            {
                gmonths[1] = 29;
                return true;
            }
        gmonths[1] = 28;
    39c2:	8c e1       	ldi	r24, 0x1C	; 28
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	d7 cf       	rjmp	.-82     	; 0x3976 <main+0x5ec>
date_to_days():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:66
    {
        days = gregorian_jd0(year);
        for (int i = 0; i < month - 1; i++)
            days += gmonths[i];
    }
    days += day - 1;
    39c8:	0f 2c       	mov	r0, r15
    39ca:	00 0c       	add	r0, r0
    39cc:	00 0b       	sbc	r16, r16
    39ce:	11 0b       	sbc	r17, r17
    39d0:	6e 0d       	add	r22, r14
    39d2:	7f 1d       	adc	r23, r15
    39d4:	80 1f       	adc	r24, r16
    39d6:	91 1f       	adc	r25, r17
convert_date():
/home/whisper/Arduino/libraries/Jalali/src/Jalali.cpp:192
        cday = cmonth = cyear = 0;
        return;
    }

    long jd = date_to_days(year, month, day, calendar);
    days_to_date(jd, cyear, cmonth, cday, !calendar);
    39d8:	f1 2c       	mov	r15, r1
    39da:	e1 2c       	mov	r14, r1
    39dc:	03 e2       	ldi	r16, 0x23	; 35
    39de:	12 e0       	ldi	r17, 0x02	; 2
    39e0:	21 e2       	ldi	r18, 0x21	; 33
    39e2:	32 e0       	ldi	r19, 0x02	; 2
    39e4:	49 e0       	ldi	r20, 0x09	; 9
    39e6:	52 e0       	ldi	r21, 0x02	; 2
    39e8:	0e 94 cb 0b 	call	0x1796	; 0x1796 <days_to_date(long, int&, int&, int&, int)>
    39ec:	3c ce       	rjmp	.-904    	; 0x3666 <main+0x2dc>
calc_ramdan():
/home/whisper/Arduino/Azangoo/functions.ino:102

void calc_ramdan() {
  if (sobh_minute >= 30) {
    sobh_minute -= 30;
  } else {
    sobh_hour--;
    39ee:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <sobh_hour>
    39f2:	91 50       	subi	r25, 0x01	; 1
    39f4:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <sobh_hour>
/home/whisper/Arduino/Azangoo/functions.ino:103
    sobh_minute = 60 - (30 - sobh_minute);
    39f8:	82 5e       	subi	r24, 0xE2	; 226
    39fa:	15 cf       	rjmp	.-470    	; 0x3826 <main+0x49c>
/home/whisper/Arduino/Azangoo/functions.ino:108
  }
  if ( zohr_minute >= 30 ) {
    zohr_minute -= 30;
  } else {
    zohr_hour--;
    39fc:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <zohr_hour>
    3a00:	91 50       	subi	r25, 0x01	; 1
    3a02:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <zohr_hour>
/home/whisper/Arduino/Azangoo/functions.ino:109
    zohr_minute = 60 - (30 - zohr_minute);
    3a06:	82 5e       	subi	r24, 0xE2	; 226
    3a08:	16 cf       	rjmp	.-468    	; 0x3836 <main+0x4ac>
/home/whisper/Arduino/Azangoo/functions.ino:114
  }
  if (shab_minute >= 30) {
    shab_minute -= 30;
  } else {
    shab_hour--;
    3a0a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <shab_hour>
    3a0e:	91 50       	subi	r25, 0x01	; 1
    3a10:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <shab_hour>
/home/whisper/Arduino/Azangoo/functions.ino:115
    shab_minute = 60 - (30 - shab_minute);
    3a14:	82 5e       	subi	r24, 0xE2	; 226
    3a16:	17 cf       	rjmp	.-466    	; 0x3846 <main+0x4bc>
play_azan():
/home/whisper/Arduino/Azangoo/functions.ino:130
    lcd.print(F("0937 938 6752"));
  if (digitalRead(ramdan_mode) == HIGH) {
    execute_CMD(0x11, 0, 2); //play file 2
    delay(1800000);
    } else {
    execute_CMD(0x11, 0, 1); //play file 1
    3a18:	41 e0       	ldi	r20, 0x01	; 1
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	81 e1       	ldi	r24, 0x11	; 17
    3a1e:	0e 94 23 08 	call	0x1046	; 0x1046 <execute_CMD(unsigned char, unsigned char, unsigned char)>
/home/whisper/Arduino/Azangoo/functions.ino:131
    delay(300000);
    3a22:	60 ee       	ldi	r22, 0xE0	; 224
    3a24:	73 e9       	ldi	r23, 0x93	; 147
    3a26:	84 e0       	ldi	r24, 0x04	; 4
    3a28:	90 e0       	ldi	r25, 0x00	; 0
    3a2a:	66 cf       	rjmp	.-308    	; 0x38f8 <main+0x56e>

00003a2c <__udivmodqi4>:
__udivmodqi4():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
    3a2c:	99 1b       	sub	r25, r25
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
    3a2e:	79 e0       	ldi	r23, 0x09	; 9
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
    3a30:	04 c0       	rjmp	.+8      	; 0x3a3a <__udivmodqi4_ep>

00003a32 <__udivmodqi4_loop>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
    3a32:	99 1f       	adc	r25, r25
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
    3a34:	96 17       	cp	r25, r22
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
    3a36:	08 f0       	brcs	.+2      	; 0x3a3a <__udivmodqi4_ep>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
    3a38:	96 1b       	sub	r25, r22

00003a3a <__udivmodqi4_ep>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
    3a3a:	88 1f       	adc	r24, r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
    3a3c:	7a 95       	dec	r23
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
    3a3e:	c9 f7       	brne	.-14     	; 0x3a32 <__udivmodqi4_loop>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
    3a40:	80 95       	com	r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
    3a42:	08 95       	ret

00003a44 <__udivmodhi4>:
__udivmodhi4():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    3a44:	aa 1b       	sub	r26, r26
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    3a46:	bb 1b       	sub	r27, r27
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    3a48:	51 e1       	ldi	r21, 0x11	; 17
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    3a4a:	07 c0       	rjmp	.+14     	; 0x3a5a <__udivmodhi4_ep>

00003a4c <__udivmodhi4_loop>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    3a4c:	aa 1f       	adc	r26, r26
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    3a4e:	bb 1f       	adc	r27, r27
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    3a50:	a6 17       	cp	r26, r22
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    3a52:	b7 07       	cpc	r27, r23
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    3a54:	10 f0       	brcs	.+4      	; 0x3a5a <__udivmodhi4_ep>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    3a56:	a6 1b       	sub	r26, r22
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    3a58:	b7 0b       	sbc	r27, r23

00003a5a <__udivmodhi4_ep>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3a5a:	88 1f       	adc	r24, r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    3a5c:	99 1f       	adc	r25, r25
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    3a5e:	5a 95       	dec	r21
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    3a60:	a9 f7       	brne	.-22     	; 0x3a4c <__udivmodhi4_loop>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    3a62:	80 95       	com	r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    3a64:	90 95       	com	r25
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    3a66:	bc 01       	movw	r22, r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    3a68:	cd 01       	movw	r24, r26
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3a6a:	08 95       	ret

00003a6c <__divmodhi4>:
__divmodhi4():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    3a6c:	97 fb       	bst	r25, 7
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    3a6e:	07 2e       	mov	r0, r23
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    3a70:	16 f4       	brtc	.+4      	; 0x3a76 <__divmodhi4+0xa>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    3a72:	00 94       	com	r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    3a74:	07 d0       	rcall	.+14     	; 0x3a84 <__divmodhi4_neg1>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    3a76:	77 fd       	sbrc	r23, 7
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    3a78:	09 d0       	rcall	.+18     	; 0x3a8c <__divmodhi4_neg2>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    3a7a:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <__udivmodhi4>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    3a7e:	07 fc       	sbrc	r0, 7
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    3a80:	05 d0       	rcall	.+10     	; 0x3a8c <__divmodhi4_neg2>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    3a82:	3e f4       	brtc	.+14     	; 0x3a92 <__divmodhi4_exit>

00003a84 <__divmodhi4_neg1>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    3a84:	90 95       	com	r25
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    3a86:	81 95       	neg	r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    3a88:	9f 4f       	sbci	r25, 0xFF	; 255
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    3a8a:	08 95       	ret

00003a8c <__divmodhi4_neg2>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    3a8c:	70 95       	com	r23
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    3a8e:	61 95       	neg	r22
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    3a90:	7f 4f       	sbci	r23, 0xFF	; 255

00003a92 <__divmodhi4_exit>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    3a92:	08 95       	ret

00003a94 <__udivmodsi4>:
__udivmodsi4():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3a94:	a1 e2       	ldi	r26, 0x21	; 33
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3a96:	1a 2e       	mov	r1, r26
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3a98:	aa 1b       	sub	r26, r26
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3a9a:	bb 1b       	sub	r27, r27
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    3a9c:	fd 01       	movw	r30, r26
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3a9e:	0d c0       	rjmp	.+26     	; 0x3aba <__udivmodsi4_ep>

00003aa0 <__udivmodsi4_loop>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3aa0:	aa 1f       	adc	r26, r26
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3aa2:	bb 1f       	adc	r27, r27
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3aa4:	ee 1f       	adc	r30, r30
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3aa6:	ff 1f       	adc	r31, r31
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3aa8:	a2 17       	cp	r26, r18
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3aaa:	b3 07       	cpc	r27, r19
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3aac:	e4 07       	cpc	r30, r20
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3aae:	f5 07       	cpc	r31, r21
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3ab0:	20 f0       	brcs	.+8      	; 0x3aba <__udivmodsi4_ep>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3ab2:	a2 1b       	sub	r26, r18
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3ab4:	b3 0b       	sbc	r27, r19
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3ab6:	e4 0b       	sbc	r30, r20
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3ab8:	f5 0b       	sbc	r31, r21

00003aba <__udivmodsi4_ep>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3aba:	66 1f       	adc	r22, r22
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3abc:	77 1f       	adc	r23, r23
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3abe:	88 1f       	adc	r24, r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3ac0:	99 1f       	adc	r25, r25
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3ac2:	1a 94       	dec	r1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3ac4:	69 f7       	brne	.-38     	; 0x3aa0 <__udivmodsi4_loop>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3ac6:	60 95       	com	r22
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3ac8:	70 95       	com	r23
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3aca:	80 95       	com	r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3acc:	90 95       	com	r25
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3ace:	9b 01       	movw	r18, r22
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3ad0:	ac 01       	movw	r20, r24
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3ad2:	bd 01       	movw	r22, r26
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3ad4:	cf 01       	movw	r24, r30
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3ad6:	08 95       	ret

00003ad8 <__divmodsi4>:
__divmodsi4():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    3ad8:	05 2e       	mov	r0, r21
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    3ada:	97 fb       	bst	r25, 7
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    3adc:	1e f4       	brtc	.+6      	; 0x3ae4 <__divmodsi4+0xc>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    3ade:	00 94       	com	r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    3ae0:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__negsi2>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3ae4:	57 fd       	sbrc	r21, 7
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    3ae6:	07 d0       	rcall	.+14     	; 0x3af6 <__divmodsi4_neg2>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    3ae8:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <__udivmodsi4>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    3aec:	07 fc       	sbrc	r0, 7
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    3aee:	03 d0       	rcall	.+6      	; 0x3af6 <__divmodsi4_neg2>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    3af0:	4e f4       	brtc	.+18     	; 0x3b04 <__divmodsi4_exit>
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    3af2:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <__negsi2>

00003af6 <__divmodsi4_neg2>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    3af6:	50 95       	com	r21
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    3af8:	40 95       	com	r20
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    3afa:	30 95       	com	r19
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    3afc:	21 95       	neg	r18
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    3afe:	3f 4f       	sbci	r19, 0xFF	; 255
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    3b00:	4f 4f       	sbci	r20, 0xFF	; 255
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    3b02:	5f 4f       	sbci	r21, 0xFF	; 255

00003b04 <__divmodsi4_exit>:
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    3b04:	08 95       	ret

00003b06 <__negsi2>:
__negsi2():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    3b06:	90 95       	com	r25
    3b08:	80 95       	com	r24
    3b0a:	70 95       	com	r23
    3b0c:	61 95       	neg	r22
    3b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b10:	8f 4f       	sbci	r24, 0xFF	; 255
    3b12:	9f 4f       	sbci	r25, 0xFF	; 255
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    3b14:	08 95       	ret

00003b16 <__usmulhisi3>:
__usmulhisi3():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    3b16:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <__umulhisi3>

00003b1a <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    3b1a:	b7 ff       	sbrs	r27, 7
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    3b1c:	08 95       	ret
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    3b1e:	82 1b       	sub	r24, r18
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    3b20:	93 0b       	sbc	r25, r19
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    3b22:	08 95       	ret

00003b24 <__cmpdi2_s8>:
__cmpdi2_s8():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2102
    3b24:	00 24       	eor	r0, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2103
    3b26:	a7 fd       	sbrc	r26, 7
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2104
    3b28:	00 94       	com	r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2105
    3b2a:	2a 17       	cp	r18, r26
    3b2c:	30 05       	cpc	r19, r0
    3b2e:	40 05       	cpc	r20, r0
    3b30:	50 05       	cpc	r21, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2106
    3b32:	60 05       	cpc	r22, r0
    3b34:	70 05       	cpc	r23, r0
    3b36:	80 05       	cpc	r24, r0
    3b38:	90 05       	cpc	r25, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2107
    3b3a:	08 95       	ret

00003b3c <__tablejump2__>:
__tablejump2__():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3b3c:	ee 0f       	add	r30, r30
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3b3e:	ff 1f       	adc	r31, r31
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    3b40:	05 90       	lpm	r0, Z+
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    3b42:	f4 91       	lpm	r31, Z
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    3b44:	e0 2d       	mov	r30, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    3b46:	09 94       	ijmp

00003b48 <__umulhisi3>:
__umulhisi3():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3b48:	a2 9f       	mul	r26, r18
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3b4a:	b0 01       	movw	r22, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3b4c:	b3 9f       	mul	r27, r19
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3b4e:	c0 01       	movw	r24, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3b50:	a3 9f       	mul	r26, r19
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3b52:	70 0d       	add	r23, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    3b54:	81 1d       	adc	r24, r1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    3b56:	11 24       	eor	r1, r1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3b58:	91 1d       	adc	r25, r1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3b5a:	b2 9f       	mul	r27, r18
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3b5c:	70 0d       	add	r23, r0
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3b5e:	81 1d       	adc	r24, r1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3b60:	11 24       	eor	r1, r1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3b62:	91 1d       	adc	r25, r1
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3b64:	08 95       	ret

00003b66 <_exit>:
exit():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3b66:	f8 94       	cli

00003b68 <__stop_program>:
__stop_program():
/home/nvidia/jenkins/workspace/avr-gcc-staging/label/nvidia-jetson-aarch64/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3b68:	ff cf       	rjmp	.-2      	; 0x3b68 <__stop_program>
